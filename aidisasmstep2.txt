asm1() @11FC4B4
{
	for(r3 = 0; r3 < 4; r3++)
	{
		if(*(*(*gBattleResources + 0x14) + 2) == *((*gBattlerAttacker * 0x58) + gBattleMons + 0xC + (r3 * 2)))
		{
			*(*(*gBattleResources + 0x14) + 8) = *((*gBattlerAttacker * 0x58) + gBattleMons + 0x24 + r3)
			return
		}
	}

	*(*(*gBattleResources + 0x14) + 8) = 0
}





asm2() @11FC4E8
{
	bkpt 0x0000
}





asm3() @11FC4EE
{
	if(*((*((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 1) < *((*((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 4))
		*(*(*gBattleResources + 0x14) + 8) = 1
	else
		*(*(*gBattleResources + 0x14) + 8) = 0
}





asm4() @11FC51E
{
	*(*(*gBattleResources + 0x14) + 8) = *(data_0203D500_J + ((*gBattlerTarget & 2) >> 1) + 1)
}





asm5() @11FC53A
{	
	if(*((((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 1) >= 0x5F || *((((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 4) >= 0x5F)
		*(*(*gBattleResources + 0x14) + 8) = 1
	elseif(*((((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 2) < 0x64 && *((((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 5) < 0x64)
		*(*(*gBattleResources + 0x14) + 8) = 1
	else
		*(*(*gBattleResources + 0x14) + 8) = 0
	}
}





asm6() @11FC57A
{
	if(*(*((*gBattlerTarget * 2) + gBattlerPartyIndexes) + gRecordedAbilities) != 0)
	{
		if(IsMoveBlockedByAbility(*((*((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 0x16), *(*(*gBattleResources + 0x14) + 2), *((*gBattlerTarget * 0x58) + gBattleMons + 0x21), *((*gBattlerTarget * 0x58) + gBattleMons + 0x22)))
			*(*(*gBattleResources + 0x14) + 8) = 1
		elseif(IsMoveBlockedByAbility(*((*((*gBattlerTarget * 0x58) + gBattleMons) * 0x1C) + gBaseStats + 0x17), *(*(*gBattleResources + 0x14) + 2), *((*gBattlerTarget * 0x58) + gBattleMons + 0x21), *((*gBattlerTarget * 0x58) + gBattleMons + 0x22)))
			*(*(*gBattleResources + 0x14) + 8) = 1
		else
			*(*(*gBattleResources + 0x14) + 8) = 0
	}
	else
		*(*(*gBattleResources + 0x14) + 8) = 0
}





asm7() @11FC5D6
{
	if(*gTrickRoomTurns != 0)
		r4 = 1
	else
		r4 = 0
	
	r5 = 0
	s1 = 0
	
	for(r6 = 0; r6 < 6; r6++)
	{
		s0 = (r6 * 0x64) + gEnemyParty
		
		if(GetMonData(s0, 0x39) != 0 && GetMonData(s0, 0x2D) == 0)
		{
			s1 += GetMonData(s0, 0x3D)
			r5++
		}
	}
	
	*(*(*gBattleResources + 0x14) + 8) = (((s1 / r5) - 0x64) >> 0x1F) ^ r4
}





asm8() @11FC63E
{
	for(r4 = 0; r4 < 6; r4++)
	{
		if((*gBattleTypeFlags & 1 == 0 || r4 != 1) && r4 != 0)
		{
			r0 = *gWasMonShown & (1 << r4)
			
			if(r0 == 0)
				continue;
		}
		
		r5 = (r4 * 0x64) + gPlayerParty
		
		r0 = GetMonData(r5, 0x39)
		
		if(r0 != 0)
		{
			r0 = GetMonData(r5, 0x2D)
			
			if(r0 == 0)
			{
				r0 = asm8pt5(*(*(*gBattleResources + 0x14) + 2), GetMonData(r5, 0xB)) & 8
				
				if(r0 & 8 != 0)
					break;
			}
		}
	}
	
	*(*(*gBattleResources + 0x14) + 8) = r0
}





asm8pt5(arg0, arg1)
{
	r0 = AI_TypeCalc(arg0, arg1, *((arg1 * 0x1C) + gBaseStats + 0x16))
	r6 = AI_TypeCalc(arg0, arg1, *((arg1 * 0x1C) + gBaseStats + 0x17))
	
	if(r0 < r6)
		r0 = r6
	
	return r0
}





asm9() @11FC6EA
{
	for(s0 = 0; s0 < 4; s0++)
	{
		r2 = s0
		r1 = *((*((*gBattlerTarget * 2) + gBattlerPartyIndexes) * 0xC) + data_0203B970_J + (r2 * 2))

		do
		{
			r2--
			
			if(r2 < 0 && *((r1 * 0xC) + gBattleMoves + 1) > 1)
			{
				*gDynamicBasePower = 0
				*(*gBattleStruct + 0x13) = 0
				*(gBattleScripting + 0xE) = 1
				*gMoveResultFlags = 0
				*gCritMultiplier = 1
				*gCurrentMove = r1
				AI_CalcDmg(*gBattlerTarget, *gBattlerAttacker)
				TypeCalc(*gCurrentMove, *gBattlerAttacker, *gBattlerTarget)
				
				if(*((r1 * 0xC) + gBattleMoves) == 0x1D)
					*gBattleMoveDamage *= 4
				elseif(*((r1 * 0xC) + gBattleMoves) == 0x2C)
					*gBattleMoveDamage *= 2
				
				if(*gBattleMoveDamage == 0)
					*gBattleMoveDamage = 1
				
				if(*((*gBattlerAttacker * 0x58) + gBattleMons + 0x28) <= *gBattleMoveDamage)
				{
					*(*(*gBattleResources + 0x14) + 8) = 1
					return
				}
			}
		} while(r1 != *((*((*gBattlerTarget * 2) + gBattlerPartyIndexes) * 0xC) + data_0203B970_J + (r2 * 2)))
	}
	
	*(*(*gBattleResources + 0x14) + 8) = 0
}