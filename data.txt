addr e: addr j: desc

		   : 24 00 02 02: ??????
		   : 30 04 02 02: gWindows
3C 06 02 02: B8 05 02 02: gSprites
		   : E8 0D 02 02: ??????
		   : C2 1A 02 02: ??????
D0 1C 02 02: 4C 1C 02 02: gStringVar1
		   : 10 1D 02 02: ?????? (GetMoveRelearnerMoves: ptr to data that's read from exactly as if it was gLevelUpLearnsets)
								 (GetNumberOfRelearnableMoves: ptr to data that's read from exactly as if it was gLevelUpLearnsets)
74 29 02 02: E4 28 02 02: gBattle_BG0_X
76 29 02 02: E6 28 02 02: gBattle_BG0_Y
8C 29 02 02: FC 28 02 02: gDisplayedStringBattle
B8 2A 02 02: 28 2A 02 02: gBattleTextBuff1
C8 2A 02 02: 38 2A 02 02: gBattleTextBuff2
4C 2B 02 02: AC 2A 02 02: gBattleTypeFlags
50 2B 02 02: B0 2A 02 02: gBattleTerrain
C8 2B 02 02: 28 2B 02 02: gBattleBufferA[4]
C4 33 02 02: 24 33 02 02: gBattleBufferB
C4 3B 02 02: 24 3B 02 02: gActiveBattler
C8 3B 02 02: 28 3B 02 02: gBattleControllerExecFlags
CC 3B 02 02: 2C 3B 02 02: gBattlersCount
CE 3B 02 02: 2E 3B 02 02: gBattlerPartyIndexes
DE 3B 02 02: 3E 3B 02 02: gBattlerByTurnOrder
E2 3B 02 02: 42 3B 02 02: gCurrentTurnActionNumber
E3 3B 02 02: 43 3B 02 02: gCurrentActionFuncId
E4 3B 02 02: 44 3B 02 02: gBattleMons
FC 3B 02 02: 5C 3B 02 02: gBattleMons.statStages
04 3C 02 02: 64 3B 02 02: gBattleMons.ability
0C 3C 02 02: 6C 3B 02 02: gBattleMons.hp
30 3C 02 02: 90 3B 02 02: gBattleMons.status1
3C 3C 02 02: 9C 3B 02 02: gBattleMons[1]
48 3D 02 02: A8 3C 02 02: gCurrMovePos
49 3D 02 02: A9 3C 02 02: gChosenMovePos
4A 3D 02 02: AA 3C 02 02: gCurrentMove
4C 3D 02 02: AC 3C 02 02: gChosenMove
50 3D 02 02: B0 3C 02 02: gBattleMoveDamage
54 3D 02 02: B4 3C 02 02: gHpDealt
58 3D 02 02: B8 3C 02 02: gTakenDmg
68 3D 02 02: C8 3C 02 02: gLastUsedItem
6A 3D 02 02: CA 3C 02 02: gLastUsedAbility
6B 3D 02 02: CB 3C 02 02: gBattlerAttacker
6C 3D 02 02: CC 3C 02 02: gBattlerTarget
6E 3D 02 02: CE 3C 02 02: gEffectBattler
6F 3D 02 02: CF 3C 02 02: gPotentialItemEffectBattler
70 3D 02 02: D0 3C 02 02: gAbsentBattlerFlags
71 3D 02 02: D1 3C 02 02: gCritMultiplier
72 3D 02 02: D2 3C 02 02: gMultiHitCounter
74 3D 02 02: D4 3C 02 02: gBattleScriptCurrInstr
7C 3D 02 02: DC 3C 02 02: gChosenActionByBattler (FR) / ?????? (PD)
						        (HandleAction_UseMove: set to 4 if move was redirected by Lightning Rod/Storm Drain, 0 otherwise)
								(ConsumeItem: only executes if this is not FF)
								(atk49_moveend: only executes MoveValuesCleanUp() if this is not 4)
80 3D 02 02: E0 3C 02 02: gSelectionBattleScripts
98 3D 02 02: F8 3C 02 02: gLastMoves
A0 3D 02 02: 00 3D 02 02: gLastLandedMoves
A8 3D 02 02: 08 3D 02 02: gLastHitByType
B8 3D 02 02: 18 3D 02 02: gLockedMoves
C4 3D 02 02: 24 3D 02 02: gChosenMoveByBattler
CC 3D 02 02: 2C 3D 02 02: gMoveResultFlags
D0 3D 02 02: 30 3D 02 02: gHitMarker
D8 3D 02 02: 38 3D 02 02: gTakenDmgByBattler
DE 3D 02 02: 3E 3D 02 02: gSideStatuses
E4 3D 02 02: 44 3D 02 02: gSideTimers
FC 3D 02 02: 5C 3D 02 02: gStatuses3
0C 3E 02 02: 6C 3D 02 02: gDisableStructs
80 3E 02 02: E0 3D 02 02: gRandomTurnNumber
82 3E 02 02: E2 3D 02 02: gBattleCommunication
85 3E 02 02: E5 3D 02 02: cEFFECT_CHOOSER
87 3E 02 02: E7 3D 02 02: cMULTISTRING_CHOOSER
8A 3E 02 02: EA 3D 02 02: gBattleOutcome
8C 3E 02 02: EC 3D 02 02: gProtectStructs
CC 3E 02 02: 2C 3E 02 02: gSpecialStatuses
1C 3F 02 02: 7C 3E 02 02: gBattleWeather
1E 3F 02 02: 7E 3E 02 02: gTrickRoomTurns (PD)
1F 3F 02 02: 7F 3E 02 02: gWonderRoomTurns (PD)
20 3F 02 02: 80 3E 02 02: gWishFutureKnock
50 3F 02 02: B0 3E 02 02: gDynamicBasePower
54 3F 02 02: B4 3E 02 02: gEnigmaBerries
5C 3F 02 02: BC 3E 02 02: gEnigmaBerries.itemEffect
C4 3F 02 02: 24 3F 02 02: gBattleScripting
D2 3F 02 02: 32 3F 02 02: sDMG_MULTIPLIER
D4 3F 02 02: 34 3F 02 02: sB_ANIM_ARG1
D8 3F 02 02: 38 3F 02 02: sMOVEEND_STATE
DE 3F 02 02: 3E 3F 02 02: sSTATCHANGER
DF 3F 02 02: 3F 3F 02 02: sSTAT_ANIM_PLAYED (FRPD) / sSECOND_STATCHANGER (PD)
E8 3F 02 02: 48 3F 02 02: gBattleStruct
F4 3F 02 02: 54 3F 02 02: gBattleResources
FC 3F 02 02: 5C 3F 02 02: gMoveSelectionCursor
04 40 02 02: 64 3F 02 02: gBattlerInMenuId
1C 40 02 02: 7C 3F 02 02: gMonSpritesGfxPtr
20 40 02 02: 80 3F 02 02: gBattleMovePower
29 40 02 02: 89 3F 02 02: gPlayerPartyCount
2C 40 02 02: 8C 3F 02 02: gEnemyParty
80 40 02 02: E0 3F 02 02: gEnemyParty.level
		   : F8 3F 02 02: (gEnemyParty.friendship, but this is different in english)
84 42 02 02: E4 41 02 02: gPlayerParty
3C 43 02 02: 9C 42 02 02: gPlayerParty[1].level
F8 44 02 02: 58 44 02 02: ??????
5C 45 02 02: BC 44 02 02: ??????
64 45 02 02: C4 44 02 02: ??????
6C 45 02 02: CC 44 02 02: ??????
80 45 02 02: E0 44 02 02: ??????
88 45 02 02: E8 44 02 02: ??????
2C 55 02 02: 8C 54 02 02: ??????
14 93 02 02: 4C 92 02 02: ??????
64 17 03 02: 9C 16 03 02: gLoadedSaveData
8C 1C 03 02: C4 1B 03 02: gLastEncryptionKey
A4 1D 03 02: D8 1C 03 02: ?????? (GetEvolutionTargetSpecies: used as index to find the mon to check against the parameter to EVO_TRADE_FOR_SPECIFIC_MON) (gTradePartnerSelectedMon?)
A8 1D 03 02: DC 1C 03 02: ??????
B0 1D 03 02: E4 1C 03 02: ??????
BC 1D 03 02: F0 1C 03 02: sWarpDestination
FC 6D 03 02: 30 6D 03 02: gMapHeader
10 6E 03 02: 44 6D 03 02: gMapHeader.regionMapSectionId
13 6E 03 02: 47 6D 03 02: gMapHeader.mapType
38 6E 03 02: 6C 6D 03 02: gEventObjects (atkEF_handleballthrow: Lure Ball boosted if this[0] is 1) (gIsPlayerFishing?)
78 70 03 02: AC 6F 03 02: gPlayerAvatar
		   : FC 6F 03 02: ?????? (sub_808C9C4: set to created window)
								 (sub_808CBA4: window stored here is deleted)
								 (sub_808CC74: used as window to print to)
D4 70 03 02: 08 70 03 02: ??????
D6 70 03 02: 0A 70 03 02: gSpecialVar_MonBoxId
D8 70 03 02: 0C 70 03 02: gSpecialVar_MonBoxPos
E0 70 03 02: 14 70 03 02: ??????
F0 70 03 02: 24 70 03 02: ??????
F4 70 03 02: 28 70 03 02: sStartMenuCursorPos
F5 70 03 02: 29 70 03 02: sNumStartMenuActions
F6 70 03 02: 2A 70 03 02: ??????
FF 70 03 02: 33 70 03 02: ??????
00 71 03 02: 34 70 03 02: ??????
		   : C0 70 03 02: ?????? (sub_8078BEC: this[0] is constantly incremented; when it reaches 3 it's set to 0 again and this[1] is incremented (if 15, set to 0))
								 (sub_8078BEC: used as an index into data_3852A0_J)
F8 71 03 02: 2C 71 03 02: gPlttBufferUnfaded
F8 75 03 02: 2C 75 03 02: gPlttBufferFaded
B8 7A 03 02: EC 79 03 02: gPaletteFade
C8 7A 03 02: FC 79 03 02: ??????
		   : 14 7B 03 02: ?????? (fn_9396A8_J: some sort of data is copied into this)
30 7F 03 02: 64 7E 03 02: ??????
34 7F 03 02: 68 7E 03 02: gWeatherPtr
94 83 03 02: C8 82 03 02: gWeatherPtr->altGammaShifts
A4 86 03 02: D8 85 03 02: sPaletteGammaTypes
		   : E2 85 03 02: ?????? (CreateNPCTrainerParty: checked if less than 0x2E6, if so, used as an index to copy data from table data_09400000_J into gEnemyParty)
								 (CanUseNewAI: used as an index into gTrainers)
D0 86 03 02: 1C 86 03 02: ??????
A4 97 03 02: F0 96 03 02: ??????
AC 97 03 02: F8 96 03 02: ??????
B0 97 03 02: FC 96 03 02: ??????
B4 97 03 02: 00 97 03 02: ??????
B6 97 03 02: 02 97 03 02: ??????
20 98 03 02: 6C 97 03 02: ??????
21 98 03 02: 6D 97 03 02: ??????
22 98 03 02: 6E 97 03 02: ??????
		   : A8 AC 03 02: ??????
FA AD 03 02: 72 AD 03 02: ??????
           : 00 B9 03 02: ?????? (sub_8032768: zeroed starting from here to 0203BB00)
		   : 50 B9 03 02: ?????? (appears to be an array of bits, one for each battler)
								 (ItemBattleEffects: all cleared at start of cases ITEMEFFECT_ON_SWITCH_IN and ITEMEFFECT_TURN_END)
								 (ItemBattleEffects: only executes case ITEMEFFECT_MOVE_END if this battler's bit is set)
								 (atk01_accuracycheck: set the target's bit and clears others if the move doesn't miss (only if accuracy was checked at all))
								 (atk0C_datahpupdate: set the active battler's bit if damage was dealt; set all battlers' bits if pkmn with Unnerve faints)
		   : 60 B9 03 02: ?????? (atk4B_returnatktoball: adds 2 each time function is run for battler on player's side, max 6)
								 (ShouldSwitchIfMightBeDoubleTargeted: choose not to switch with a probability increasing the higher this gets)
								 (ShouldSwitchIfStallMon: choose not to switch with a probability increasing the higher this gets)
		   : 64 B9 03 02: gWasMonShown
		   : 65 B9 03 02: ?????? (ShouldSwitch_NewAI: set to 1 when fn executed (always ran whenever it's possible to switch))
		   : 70 B9 03 02: ?????? (appears to be an array of unknown objects; first field is a 4-entry array of 2 bytes each, second field is a 4-entry array of 1 byte each)
								 (atk02_attackstring: when player attacks: insert [gCurrentMove, 0] into the first empty slot for the mon, or increment the field2 of the first entry where field1 = gCurrentMove and field2 != 0xFF, whichever comes first)
								 (atk02_attackstring: when player attacks: if neither of the above is available, insert [gCurrentMove, 0] into the last slot where field2 != 0xFF; if even that fails, insert it into the first slot)
		   : 00 BB 03 02: ?????? (appears to be an array of 167 unknown 4-byte objects, possibly ItemSlots)
								 (LoadPlayerBag: Entire array written to in a loop, just like gLoadedSaveData.items, read from j0203C010)
								 (SavePlayerBag: Entire array read from in a loop, just like gLoadedSaveData.items, and written to j0203C010)
		   : 30 BF 03 02: ?????? (appears to be (0-3) array of ptrs to Sprites, (4) int)
								 (fn_EB8398_J: Set this[moveId] to the created sprite)
								 (fn_EB8398_J: Set this.4 to moveId)
								 (fn_EB873C_J: If this.4 != 0, destroy all four sprites)
								 (fn_EB873C_J: Set this[0] to 0 and this.4 to 0)
		   : 40 BF 03 02: ?????? (appears to be a data structure of at least 3 bytes)
								 (HandleMoveSwitching: Set this.2 to 0 if (gMain.newKeys & (A_BUTTON | SELECT_BUTTON)) || (gMain.newKeys & (B_BUTTON | SELECT_BUTTON)); 1 otherwise)
								 (fn_EB856A_J: Set this.2 to 0)
								 (fn_EB856A_J: If this.4 != 1, set this.4 to 1 and load palettes into this.0 and this.1)
								 (fn_EB85EE_J: If this.2 != 0, do something with this.0; otherwise do same to this.1)
								 (fn_EB85EE_J: If this.2 != 0, add 0x400 to something)
								 (fn_EB85EE_J: If something, set this.4 to 0)
								 (fn_EB8698_J: Set something to something something this.1)
								 (fn_EB8698_J: If this.2 != 0, add 0x400 to something)
		   : 70 BF 03 02: ?????? (fn_EB8398_J: Set this.0 to the battler)
								 (fn_EB8398_J: Get this[battler].8[moveId] and set data_0203D300_J[0] to it)
								 (fn_EB8398_J: Get this[battler].0xC[moveId] and set data_0203D300_J[3] to it)
								 (fn_EB8398_J: Use ratio of this[battler].8[moveId] to this[battler].0xC[moveId] to obtain a result)
								 (fn_EB8398_J: Use gBattleMoves[this[battler].0[moveId]] to select a sprite)
								 (fn_EB85EE_J: Something about this[gBattleResources + 4])
		   : F4 BF 03 02: ?????? (CanUseNewAI: If gBattleTypeFlags & 0x100 (BATTLE_TYPE_BATTLE_TOWER?), read the AI flags from here)
		   : 00 C0 03 02: ?????? (NewGameInitData: zeroed starting from here to 0203CEC4)
		   : 0D C0 03 02: ?????? (sub_8032768: this.1 is set to 0)
								 (music_something: this.1 is set to 0)
								 {SoftForceDirection: if (this.0 & 2) isn't set, the player isn't on foot, surfing, or (?acrobike), there's not an existing direction, and this.1 isn't 0, this.2 corresponds to the new direction: this.2 & DPAD_DOWN = south, this.2 & DPAD_UP = north, this.2 & DPAD_LEFT = west, otherwise east}
								 (MovePlayerAvatarUsingKeypadInput: MovePlayerOnBike is only run if (this.0 & 2) isn't set, otherwise MovePlayerNotOnBike)
								 (PlayerNotOnBikeMoving: if surfing or (?machbike) and this.1 < 0x10, go slower than normal)
								 (PlayerNotOnBikeMoving: if surfing or (?machbike) and this.1 > 0x10, go (faster than normal? fn_5C164))
								 (PlayerNotOnBikeMoving: if (this.0 & 1) is set, run when possible even when B isn't held)
								 (PlayCollisionSoundIfNotFacingWarp: if a wall collision occurs, set this.1 to 0)
								 (fn_183A90_J: If R is pressed and flag 0x82F is set, toggle (this.0 & 1))
								 (fn_183A90_J: If the player isn't on foot, surfing, or (?acrobike) and B is pressed, toggle (this.0 & 2) and set this.1 to 0)
								 (fn_183A90_J: If the player isn't on foot, surfing, or (?acrobike) and an arrow key is held, set this.2 to the arrow key and increment this.1 once per frame up to 0x30)
								 (fn_183A90_J: If the player isn't on foot, surfing, or (?acrobike) and an arrow key isn't held, decrease this.1 by 2 per frame until 0)
		   : 10 C0 03 02: ?????? (appears to be an array of 167 unknown 4-byte objects, possibly ItemSlots)
								 (LoadPlayerBag: Entire array read from in a loop, just like gSaveBlock1Ptr->bagPocket_Items, and written to j0203BB00)
								 (SavePlayerBag: Entire array written to in a loop, just like gSaveBlock1Ptr->bagPocket_Items, read from j0203BB00)
		   : AC C2 03 02: gDaycareParentMoves
		   : B4 C2 03 02: gDaycareParentMoves[1]
		   : 18 CB 03 02: ?????? (GetLocationMusic: if this.0xE is not zero, return this.0xC instead of the default music)
								 (fn_E9F204_J: convert this.4 (number) to a string and store it in data_0203D520_J)
								 (fn_E9EBB0_J: If data_0203D52A_J is 0, data_0203D50A_J is 1, A is pressed, and (data_0203D562_J + data_0203D561_J) != 0, set this.0xC to data_E9FBC4_J[fn_E9F92C_J(data_0203D562_J + data_0203D561_J) - 1] then start playing the music at this.0xC)
								 (fn_E9EBB0_J: If data_0203D52A_J is 0, data_0203D50A_J is 1, A is pressed, and (data_0203D562_J + data_0203D561_J) != 0, set this.0xE to 1)
								 (fn_E9EBB0_J: If data_0203D52A_J is 0, data_0203D50A_J is 1, A is pressed, and (data_0203D562_J + data_0203D561_J) == 0, set this.0xE to 0)
		   : 27 CB 03 02: ?????? (InitStartMenuStep/fn_E9D4A2_J: if set, skip START menu items 3-5)
								 (InitStartMenuStep/fn_E9D4A2_J: if set, s4 = 9F 59 60 98 FF for menu item 3; otherwise s4 = gSaveBlock1Ptr->location (which shouldn't happen))
		   : 28 CB 03 02: ?????? (appears to be an array of 64 bits)
								 (fn_E9FA12_J: this function returns the number of bits in the array that are set)
								 (fn_E9F92C_J: if its argument is 0, this function returns 0; otherwise returns the index (plus 1) of the (argument)th 1 byte in the array (0xFF if there is none))
		   : 54 CB 03 02: ?????? (fn_EE5000: set data_0203D2E0_J.0 to this on start)
								 (fn_EE51C0: set this to data_0203D2E0_J.0 on exit)
		   : 58 CB 03 02: ?????? (GetFlagPointer: if the flag number is 0xF000 or above, read it from this[number - 0xF000])
		   : 00 D1 03 02: ?????? (appears to be an array of 4 SpriteTemplates)
								 (fn_E9F398_J: used to temporarily store SpriteTemplates before their creation in a loop)
		   : 00 D2 03 02: ?????? (appears to be an array of 4 SpriteTemplates)
								 (fn_E9F398_J: used to temporarily store SpriteTemplates before their creation in a loop)
		   : E0 D2 03 02: ?????? (fn_EE5000: set this.4, this.8, and this.0xC to 0 and this.0 to data_0203CB54_J on start)
								 (fn_EE540C: use this.0 as an index into gPokemonStoragePtr->0x824C[])
								 (fn_EE51C0: set data_0203CB54_J to this.0 on exit)
								 (fn_EE51C0: if UP is pressed, decrement this.0 if not 0, decrement this.2 if not 0 (otherwise decrement this.1), and if data_0203D2EC_J is 1, swap gPokemonStoragePtr->0x824C[this.0] and gPokemonStoragePtr->0x824C[this.0 + 1])
								 (fn_EE51C0: if DOWN is pressed, decrement this.0 if less than (data_0203D2E4_J - 1), increment this.2 if not 2 (otherwise increment this.1), and if data_0203D2EC_J is 1, swap gPokemonStoragePtr->0x824C[this.0] and gPokemonStoragePtr->0x824C[this.0 - 1])
		   : E1 D2 03 02: ?????? (fn_EE543E: use this.0 as an index into gPokemonStoragePtr->0x824C[])
								 (fn_EE543E: use this.0 as an index into data_06009000_J)
								 (fn_EE54D6: determine something through this.0, and something else through this.4)
		   : E2 D2 03 02: ?????? (fn_EE5510: used as an index into data_06009000_J)
		   : E4 D2 03 02: ?????? (fn_EE5000: set this to the currently occupied size of gPokemonStoragePtr->0x824C[])
								 (fn_EE54D6: used as an upper limit of something)
								 (fn_EE51C0: DOWN only does something if data_0203D2E0_J.0 is less than (this - 1))
		   : EC D2 03 02: ?????? (fn_EE51C0: when this is 1 and A, B, or SELECT are pressed, set this to 0 and switch a palette)
								 (fn_EE51C0: when START is pressed, toggle this and switch a palette)
								 (fn_EE51C0: when this is 1, UP/DOWN swap entries of gPokemonStoragePtr->0x824C[])
		   : ED D2 03 02: ?????? (fn_EE5000: set this to 0x10 on start)
								 (fn_EE51C0: decrement once per frame until 0)
		   : EE D2 03 02: ?????? (fn_EE51C0: exit when this is 1)
								 (fn_EE51C0: when data_0203D2EC_J != 1 and A, B, or SELECT are pressed, set this to 1)
		   : F9 D2 03 02: ?????? (sub_806CAC8: set to zero on start)
								 (sub_806CAC8: if 1, act as if SELECT was pressed)
								 (fn_EE5000: if gPokemonStoragePtr->0x824C[0] == 0, set this to 1 and don't execute the function)
								 (fn_EE51C0: if the A button is pressed with data_0203D2EC_J != 1, set this to 1 and prepare to exit)
		   : FA D2 03 02: ?????? (fn_EE5000: set this to the created task on start)
								 (fn_EE51C0: destroy this task on exit)
		   : FF D2 03 02: ?????? (fn_EE5000: set to 1 on start)
								 (fn_EE51C0: set to 0 on exit)
								 (InitStartMenuStep: set to 1 when this is called with parameter 5 (final step))
								 (TransferPlttBuffer: if this isn't 0 and addr 0x3000000 is 0x7F60, do... something, otherwise delete palette 0xBA)
								 (TransferPlttBuffer: if addr 0x3000000 isn't 0x7F60, set this to 0)
		   : 00 D3 03 02: ?????? (Appears to be an array of characters)
								 (fn_EB8398_J: Set this[0] to data_0203BF70_J[battler].8[moveId])
								 (fn_EB8398_J: Set this[2] to CHAR_SLASH)
								 (fn_EB8398_J: Set this[3] to data_0203BF70_J[battler].0xC[moveId])
								 (fn_EB8398_J: Print the full contents)
		   : 40 D3 03 02: ?????? (Appears to be an array of ints)
								 (fn_EB8398_J: Set this[1] to the ratio from earlier)
								 (fn_EB8398_J: Set this[2] to (the ratio from earlier) + 1)
								 (fn_EB8398_J: Set this[0] to 0)
								 (fn_EB8398_J: Use the full contents as an argument to box_print)
		   : 80 D3 03 02: ?????? (Appears to be an array of record size 0x20)
								 (fn_EB8398_J: Copies data_EB8780_J into this[moveId])
								 (fn_EB8398_J: Add moveId to this[moveId])
								 (InitStartMenuStep/fn_E9D4A2_J: set to and used as the window id)
		   : 20 D4 03 02: ?????? (Appears to be a SpriteSheet object)
							     (fn_EB8398_J: Set to {data = data_E95DDC, size = 0x100, tag = (0x78A0 + moveId)} then call LoadSpriteSheet())
		   : 80 D4 03 02: gBackupMonData
           : 00 D5 03 02: ?????? (sub_8032768: zeroed starting from here to 0203D600)
								 (fn_E9EA40_J: set to 0 at start)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0xFF, increment this and set REG_BLDY to this each frame until 0x10, then set data_0203D52A_J to 0xFE)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0xFE, decrement this and set REG_BLDY to this each frame until 0, then set data_0203D52A_J to 0)
		   : 02 D5 03 02: ?????? (fn_E9EBB0_J: if data_0203D50A_J is 0, increment this (mod 512) and set REG_BG3HOFS and REG_BG3VOFS to (this / 2) each frame)
		   : 04 D5 03 02: ?????? (fn_E9EAA4_J: set to 1)
								 (fn_E9F6F4_J: set to 0)
								 (fn_E9FC28_J: set to 0)
		   : 0A D5 03 02: ?????? (fn_E9EAA4_J: set to 0)
								 (fn_E9EBB0_J: if this is 0, increment data_0203D504_J (mod 512) and set REG_BG3HOFS and REG_BG3VOFS to (this / 2) each frame)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0xFF, data_0203D500_J is 0x10, and this isn't 0, call fn_E9EAA4_J)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0xFF, data_0203D500_J is 0x10, and this is 0, call fn_E9F6F4_J or fn_E9FC28_J, depending on data_0203D51E_J)
								 (fn_E9EBB0_J: used as switch between three "modes" of receiving input)
								 (fn_E9F6F4_J: set to 1)
								 (fn_E9FC28_J: set to 2)
		   : 1E D5 03 02: ?????? (fn_E9EA00_J: set to 0 at start)
								 (fn_E9F272_J: used as switch to load one of four palettes)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0xFF, data_0203D500_J is 0x10, and data_0203D50A_J is 0, call fn_E9F6F4_J if this is 1 or fn_E9FC28_J if 2)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 0, A is pressed, and this is 0, open the pokedex)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 0, A is pressed, this is 1, and at least 1 bit in data_0203CB28_J is set, set data_0203D52A_J to 0xFF)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 0, A is pressed, this is 1, and no bits in data_0203CB28_J are set, call fn_EA06E8_J)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 0, A is pressed, and this is 2, set data_0203D52A_J to 0xFF)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 0, A is pressed, and this is 3, set data_0203D51F_J to 0 and go back to the START menu)
		   : 1F D5 03 02: ?????? (fn_E9E980_J: If this is 0x80, jump to mysteryfunc (fn_E9EA00_J); else go back to the START menu)
								 (fn_E9EA00_J: set to 0x80 at start)
								 (fn_E9EBB0_J: If data_0203D52A_J is 0, data_0203D50A_J is 0, and B is pressed, set this to 0 and go back to the START menu)
		   : 20 D5 03 02: ?????? (fn_E9F204_J: used as storage space for a string printed to gMysteryFuncWindows[5])
		   : 28 D5 03 02: ?????? (fn_E9F056_J: set to the same thing as gMysteryFuncWindows[2])
		   : 2A D5 03 02: ?????? (fn_E9EA00_J: set to 0x18 at start)
								 (fn_E9EBB0_J: if 0xFF, possibility to become 0xFE; if 0xFE, possibility to become 0; if 0, possiblity to become 0xFF (usually from B button), otherwise decrement once per frame until 0)
		   : 30 D5 03 02: gMysteryFuncWindows
		   : 50 D5 03 02: ?????? (fn_E9EA00_J: set to REG_BG0CNT at start)
								 (fn_E9EAA4_J: set REG_BG0CNT to this mod 4)
		   : 52 D5 03 02: ?????? (fn_E9EA00_J: set to REG_BG1CNT at start)
								 (fn_E9EAA4_J: set REG_BG1CNT to (this mod 4) + 1)
		   : 60 D5 03 02: ?????? (fn_E9F6F4_J: set this to the number of 1 bits in data_0203CB28_J)
								 (fn_E9EBB0_J: used as the size of some mystery list)
		   : 61 D5 03 02: ?????? (fn_E9F6F4_J: set to 0 at start)
								 (fn_E9F6F4_J: if more than 5 1 bits in data_0203CB28_J, do something with fn_EA05F4_J with this as parameter)
								 (fn_E9F8B0_J: unknown)
								 (fn_E9EBB0_J: used as the selection offset of some mystery list)
		   : 62 D5 03 02: ?????? (fn_E9F6F4_J: set to 0 at start)
								 (fn_E9F8B0_J: unknown)
								 (fn_E9EBB0_J: used as the selection id of some mystery list)
		   : 70 D5 03 02: ?????? (fn_E9F398_J: loaded with the results of a call to LoadSpritePalette)
		   : 71 D5 03 02: ?????? (fn_E9F398_J: loaded with the results of a call to LoadSpritePalette)
		   : 80 D5 03 02: gMysteryFuncUnknownListSize
		   : 82 D5 03 02: gMysteryFuncUnknownList // record size 2
		   : 00 D6 03 02: sHatchedEggLevelUpMoves_New
		   : 64 D6 03 02: ?????? (BuildEggMoveset: read but not used?)
		   : 74 D6 03 02: sHatchedEggEggMoves_New
		   : 80 D6 03 02: ?????? (fn_E9FC28_J: set to 0 at start)
								 (fn_E9EBB0_J: used as the selection id of some mystery list, seven entries per row)
		   : 81 D6 03 02: ?????? (fn_E9FC28_J: if gMysteryFuncUnknownListSize is 14 or more, do something with fn_EA05F4_J with this as parameter)
								 (fn_E9FFDC_J: used as index into gMysteryFuncUnknownList)
								 (fn_E9EBB0_J: used as the selection offset of some mystery list, seven entries per row)
		   : 82 D6 03 02: ?????? (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 2, A is pressed, and gMysteryFuncUnknownListSize isn't 0, toggle this)
		   : 90 D6 03 02: ?????? (fn_EA0158_J: set to 1 at start)
								 (fn_E9EBB0_J: if data_0203D52A_J is 0, data_0203D50A_J is 2, and any key but B is pressed, set this to 1)
		   : 00 FE 03 02: gLastUsedItemType
		   : 04 FE 03 02: gCritCapture
		   
		   : 00 00 00 03: ??????
		   : 9C 0F 00 03: ??????
AE 0F 00 03: AE 0F 00 03: sPrimaryTilesetCBCounter
B0 0F 00 03: B0 0F 00 03: sPrimaryTilesetCBBufferSize
B2 0F 00 03: B2 0F 00 03: sSecondaryTilesetCBCounter
B4 0F 00 03: B4 0F 00 03: sSecondaryTilesetCBBufferSize
B8 0F 00 03: B8 0F 00 03: sPrimaryTilesetCB
BC 0F 00 03: BC 0F 00 03: sSecondaryTilesetCB
F0 30 00 03: 30 31 00 03: gMain
		   : 98 3E 00 03: ??????
84 4F 00 03: C4 4F 00 03: gBattleMainFunc
90 4F 00 03: D0 4F 00 03: gBattleResults
A3 4F 00 03: E3 4F 00 03: gBattleResults.battleTurnCounter
F4 4F 00 03: 34 50 00 03: ??????
F8 4F 00 03: 38 50 00 03: gNumberOfMovesToChoose
00 50 00 03: 40 50 00 03: gRngValue
08 50 00 03: 48 50 00 03: gSaveBlock1Ptr
0C 50 00 03: 4C 50 00 03: gSaveBlock2Ptr
10 50 00 03: 50 50 00 03: gPokemonStoragePtr
14 50 00 03: 54 50 00 03: gBGTilemapBuffers1
18 50 00 03: 58 50 00 03: gBGTilemapBuffers2
1C 50 00 03: 5C 50 00 03: gBGTilemapBuffers3
78 50 00 03: B8 50 00 03: ??????
7C 50 00 03: BC 50 00 03: ??????
		   : D0 50 00 03: ??????
98 50 00 03: D8 50 00 03: ??????
7C 53 00 03: CC 53 00 03: gCB2_AfterEvolution
		   : 40 55 00 03: ?????? (GetEvolutionTargetSpecies: EVO_FRIENDSHIP_DAY works when this.2 is less than 11; EVO_FRIENDSHIP_NIGHT works when this.2 is between 12 and 23 inclusive) (gLocalTime?)
		   : 42 55 00 03: ?????? (atkEF_handleballthrow: Dusk Ball boosted if less than 6 or greater than 20) (gLocalTime.hours?)
		   : 48 55 00 03: ?????? (GetTrainerApproachDistance: set to address of trainerObj)
88 5E 00 03: D8 5E 00 03: ??????
		   
		   
funcs e,j,desc:
000544 = 000544 = SetMainCallback2
0006F4 = 0006F4 = SetVBlankCallback
000A38 = 000A38 = SetGpuReg
0017D0 = 0017D0 = LoadBgTiles
001960 = 001960 = IsDma3ManagerBusyWithBgCopy
0019BC = 0019BC = ShowBg
001B90 = 001B90 = ChangeBgX
0020BC = 0020BC = CopyBgTilemapBufferToVram
002124 = 002124 = CopyToBgTilemapBufferRect
002228 = 002228 = CopyToBgTilemapBufferRect_ChangePalette
002454 = 002454 = FillBgTilemapBufferRect_Palette0
002BB0 = 002BB0 = AllocZeroed
002BC4 = 002BC4 = Free
003CE4 = 003CB0 = AddWindow
003E3C = 003E08 = RemoveWindow
003ECC = 003E98 = FreeAllWindowBuffers
003F20 = 003EEC = CopyWindowToVram
003FA0 = 003F6C = PutWindowTilemap
0041F0 = 0041BC = BlitBitmapRectToWindow
004404 = 0043D0 = CopyToWindowPixelBuffer
00445C = 004428 = FillWindowPixelBuffer
006124 = 005F90 = RenderTextFont9
006F8C = 006B08 = CreateSprite
0071EC = 006D68 = CreateSpriteAndAnimate
007280 = 006DFC = DestroySprite
007804 = 007380 = DestroySpriteAndFreeResources
00838C = 007F08 = StartSpriteAnim
0086DC = 008258 = LoadSpriteSheet
008928 = 0084A4 = LoadSpritePalette
008A30 = 0085AC = FreeSpritePaletteByTag
008CF4 = 008870 = StringCopy10
008D28 = 0088A4 = StringGetEnd10
008D84 = 008900 = StringCopy
008DA4 = 008920 = StringAppend
008E08 = 008984 = StringLength
008E28 = 0089A4 = StringCompare
008E78 = 0089F4 = ConvertIntToDecimalStringN
00DFA4 = 00D998 = BtlController_EmitGetMonData
00DFF0 = 00D9E4 = BtlController_EmitSetMonData
00E0B4 = 00DAA8 = BtlController_EmitReturnMonToBall
00E194 = 00DB88 = BtlController_EmitBallThrowAnim
00E5EC = 00DFA0 = BtlController_EmitHealthBarUpdate
00E848 = 00E1FC = BtlController_EmitTwoReturnValues
00E874 = 00E228 = BtlController_EmitChosenMonReturnValue
00EB28 = 00E4DC = BtlController_EmitBattleAnimation
016E24 = 016634 = GetBattlerForBattleScript
016EC8 = 0166D8 = PressurePPLose
017248 = 016A58 = MarkBattlerForControllerExec
0172E8 = 016AF8 = CancelMultiTurnMoves
0173AC = 016BBC = PrepareStringBattle
017520 = 016D30 = BattleScriptPush
017544 = 016D54 = BattleScriptPushCursor
01756C = 016D7C = BattleScriptPop
017A64 = GetImprisonedMovesCount
0192D4 = 018AE4 = AtkCanceller_UnableToUseMove
019DAC = CastformDataTypeChange (FR) / TerubimDataTypeChange (PD)
019F18 = 019728 = AbilityBattleEffects
01BBE4 = 01B3F4 = BattleScriptExecute
01BC24 = 01B434 = BattleScriptPushCursorAndCallback
01BC68 = 01B478 = ItemBattleEffects
01D05C = GetMoveTarget
01D438 = 01CC48 = IsMonDisobedient
01DB10 = 01D320 = JumpIfMoveFailed
01DC10 = 01D420 = JumpIfMoveAffectedByProtect
01E68C = 01DE9C = AI_CalcDmg
01E770 = 01DF80 = ModulateDmgByType
01EAB8 = 01E2C8 = CheckWonderGuardAndLevitate
01ED3C = 01E54C = ModulateDmgByType2
01EDF4 = 01E604 = TypeCalc
01EFCC = 01E7DC = AI_TypeCalc
01FEE8 = 01F6F8 = GetBattlerTurnOrderNum
01FF20 = 01F730 = SetMoveEffect
02A1C0 = 029998 = IsTwoTurnsMove
02A224 = 0299FC = AttacksThisTurn
02E228 = 02DA24 = AdjustFriendshipOnBattleFaint
030A14 = 030180 = MoveSelectionDestroyCursorAt
036530 = 035CA4 = OpponentBufferExecCompleted
039698 = 038E04 = HasSuperEffectiveMoveAgainstOpponents
039E3C = 0395A8 = GetMostSuitableMonToSwitchInto
03D97C = 03D0E8 = ZeroBoxMonData
03DA14 = 03D180 = ZeroPlayerPartyMons
03DA34 = 03D1A0 = ZeroEnemyPartyMons
03DA54 = 03D1C0 = CreateMon
03DD98 = 03D504 = CreateMonWithNature (FR) / CreateMonWithoutNature (PD)
03E3E8 = 03DB54 = CalculateBoxMonChecksum
03E47C = 03DBE8 = CalculateMonStats
03E774 = 03DEE0 = BoxMonToMon
03E830 = 03DF9C = GetLevelFromBoxMonExp
03E89C = 03E008 = GiveMoveToMon
03E8B0 = 03E01C = GiveMoveToBoxMon
03EB94 = 03E300 = DeleteFirstMoveAndGiveMoveToMon
03EC40 = 03E3AC = DeleteFirstMoveAndGiveMoveToBoxMon
03ECEC = 03E458 = CalculateBaseDamage
03F5B4 = 03ED20 = CountAliveMonsInBattle
03F720 = 03EE8C = GetMonGender
03F730 = 03EE9C = GetBoxMonGender
03F78C = 03EEF8 = GetGenderFromSpeciesAndPersonality
03F8F8 = 03F064 = EncryptBoxMon
03F940 = 03F0AC = GetSubstruct
03FBE8 = 03F354 = GetMonData
03FD44 = 03F4B0 = GetBoxMonData
04037C = 03FA70 = SetMonData
0404D0 = 03FBC4 = SetBoxMonData
040B08 = 0401FC = CopyMon
040C3C = 040330 = CalculatePlayerPartyCount
040D7C = 040470 = GetMonAbility
04101C = 04070C = CalculatePPWithBonus
042EB4 = 0425A4 = GetNatureFromPersonality
043298 = 042988 = SpeciesToNationalPokedexNum
043A70 = CheckPartyPokerus
043AD8 = 043194 = CheckPartyHasHadPokerus
043C2C = 043278 = CanMonLearnTMHM
043DD4 = 043420 = GetLevelUpMovesBySpecies
044234 = 04387C = GetFlavorRelationByPersonality
0442D8 = 043920 = MonRestorePP
044EC8 = 04448C = Random
04549C = 044A60 = Daycare_FindEmptySpot
0454CC = 044A90 = StorePokemonInDaycare
0455AC = 044B70 = ShiftDaycareSlots
04565C = 044C20 = TakeSelectedPokemonFromDaycare
045970 = 044F34 = GetEggSpecies
045A78 = 04503C = RemoveIVIndexFromList
045AC0 = 045084 = InheritIVs
045C28 = 0451EC = GetEggMoves
045CD0 = 045294 = BuildEggMoveset
045F70 = 045534 = RemoveEggFromDayCare
045FA0 = 045564 = AlterEggSpeciesWithIncenseItem
046000 = 0455C4 = DetermineEggSpeciesAndParentSlots
046208 = 0457B4 = SetInitialEggData
046744 = 045CD8 = AppendGenderSymbol
0480A8 = 047630 = GetHealthboxElementGfxPtr
048618 = UpdateHpTextInHealthboxInDoubles
04A648 = AddTextPrinterAndCreateWindowOnHealthbox
04A6D8 = RemoveWindowOnHealthbox
04A6E8 = FillHealthboxObject
054E90 = 054750 = IncrementGameStat
055238 = 054AF8 = Overworld_GetMapHeaderByGroupAndId
055250 = 054B10 = GetDestinationWarpMapHeader
056158 = 055A18 = GetMapTypeByGroupAndId
056188 = 055A48 = Overworld_GetMapTypeOfSaveblockLocation
0561D8 = 055A98 = is_map_type_1_2_3_5_or_6
058F48 = 058804 = MapGridGetMetatileIdAt
058F78 = 058834 = MapGridGetMetatileBehaviorAt
059B74 = 059430 = MetatileBehavior_IsSandOrDeepSand
059BC8 = 059484 = MetatileBehavior_IsWarpDoor
059C8C = 059548 = MetatileBehavior_IsNonAnimDoor
059CA4 = 059560 = MetatileBehavior_IsSurfableWaterOrUnderwater
059ED8 = 059794 = MetatileBehavior_IsPlayerFacingTVScreen
059EF4 = 0597B0 = MetatileBehavior_IsPC
059F34 = 0597F0 = MetatileBehavior_IsTallGrass
059F4C = 059808 = MetatileBehavior_IsLongGrass
059F58 = 059814 = MetatileBehavior_IsBridge
059F5C = 059818 = MetatileBehavior_GetBridgeSth
059F88 = 059844 = MetatileBehavior_IsIndoorEncounter
059F9C = 059858 = MetatileBehavior_IsMountain
05A01C = 0598D8 = MetatileBehavior_IsDeepOrOceanWater
05B45C = 05AD18 = TryInterruptEventObjectSpecialAnim
05B4B0 = 05AD6C = npc_clear_strange_bits
05B4D4 = 05AD90 = MovePlayerAvatarUsingKeypadInput
05B50C = 05ADC8 = PlayerAllowForcedMovementIfMovingSameDirection
05B528 = 05ADE4 = TryDoMetatileBehaviorForcedMovement
05B5A0 = 05AE5C = GetForcedMovementByMetatileBehavior
05B93C = 05B1F8 = MovePlayerNotOnBike
05BB1C = 05B3D8 = CheckForPlayerAvatarCollision
05BE08 = 05B6C4 = DoPlayerAvatarTransition
05C024 = 05B8E0 = PlayerSetAnimId
05C104 = 05B9C0 = PlayerGoSpeed1
05C11C = 05B9D8 = PlayerGoSpeed2
05C1D0 = 05BA8C = PlayerNotOnBikeCollide
05C1F4 = 05BAB0 = PlayerFaceDirection
05C23C = 05BAF8 = PlayerJumpLedge
05C538 = 05BDF4 = PlayerGetDestCoords
05C6C4 = 05BF80 = GetPlayerFacingDirection
05C74C = 05C008 = TestPlayerAvatarFlags
05CCD0 = 05C58C = task_add_bump_boulder
05DFB0 = 05D870 = GetFieldObjectIdByXY
05E4C8 = 05DD88 = RemoveFieldObjectByLocalIdAndMap
0636AC = 062F6C = GetCollisionAtCoords
063A20 = 0632E0 = MoveCoords
063F84 = 063844 = GetWalkNormalMovementAction
063FB0 = 063870 = GetPlayerRunMovementAction
0696C0 = 068F80 = ScriptUnfreezeEventObjects
069940 = 069200 = ScriptContext2_Enable
06994C = 06920C = ScriptContext2_Disable
069AE4 = 0693A4 = ScriptContext1_SetupScript
069C74 = 069534 = mapheader_run_first_tag2_script_list_match
06CE20 = 06C614 = player_get_pos_to_and_height
06CE38 = 06C62C = player_get_next_pos_and_height
06CEA0 = 06C694 = TryStartInteractionScript
06D5E8 = 06CDDC = TryStartStepBasedScript
06DCD0 = 06D4C4 = map_warp_consider_2_to_inside
06E25C = 06DA50 = IsNationalPokedexEnabled
06E454 = 06DC48 = GetVarPointer
06E568 = 06DD5C = VarGet
06E584 = 06DD78 = VarSet
06E6A8 = 06DE9C = FlagClear
06E680 = 06DE74 = FlagSet
06E6D0 = 06DEC4 = FlagGet
06ED54 = 06E548 = BuildStartMenuActions
06EE7C = 06E670 = ShowSafariBallsWindow
06EF44 = 06E738 = PrintStartMenuActions
06F258 = 06EA4C = ShowStartMenu
06F4B4 = 06ECA4 = StartMenuPokedexCallback
06FED8 = 06F67C = ResetTilesetAnimBuffer
06FF04 = 06F6A8 = AppendTilesetAnimToBuffer
0703A8 = 06FB4C = LoadCompressedPalette
0703EC = 06FB90 = LoadPalette
070588 = 06FD2C = BeginNormalPaletteFade
070E44 = 0705E8 = BeginFastPaletteFade
07141C = 070BC0 = UpdateBlendRegisters
071A68 = 07120C = GetCurrentMapMusic
071AB4 = 071258 = FadeOutMapMusic
071AEC = 071290 = FadeOutAndPlayNewMapMusic
0722CC = 071A70 = PlaySE
0751C4 = 074968 = GetBattlerSide
0751D8 = 07497C = GetBattlerPosition
0751E8 = 07498C = GetBattlerAtPosition
075290 = 074A34 = IsDoubleBattle
07741C = 076BB4 = CreateTask
077508 = 076CA0 = DestroyTask
07AF98 = 07A6F8 = weather_get_current
081B30 = 08171C = CheckForTrainersWantingBattle
082A88 = 082674 = GetPersonalityWithUnownForm
082AB8 = 0826A4 = GetUnownFormFromPersonality
088E8C = 088A68 = pokedex_count
08B9F4 = 08B490 = StorageGetCurrentBox
08BA18 = 08B4B4 = GetBoxMonDataFromAnyBox
08BAA0 = 08B53C = GetBoxMonDataFromSelectedBox
08BAC0 = 08B55C = SetBoxMonDataFromSelectedBox
08BB6C = 08B608 = GetAndCopyBoxMonDataFromAnyBox
08BD30 = 08B7CC = GetBoxedMonPtr
08BD6C = 08B808 = GetBoxNamePtr
08C0D4 = 08BB10 = CountMonsInBox
08CFF8 = 08CA34 = add_to_c3_somehow
08FBA4 = 08F5E0 = ?????
08FD20 = 08F75C = ?????
08FD34 = 08F770 = ?????
08FD5C = 08F798 = ?????
0912E0 = 090D1C = ?????
091730 = 09116C = ?????
091760 = 09119C = ?????
0920FC = 091B30 = ?????
0937DC = 093210 = CompactPartySlots
093AD0 = 093504 = ?????
094CC8 = 0946FC = ?????
094D34 = 094768 = ?????
094DA8 = 0947DC = ?????
094DEC = 094820 = ?????
094E88 = 0948BC = ?????
094F90 = 0949B8 = ?????
094F94 = 0949BC = ?????
095024 = 094A4C = ?????
099DE0 = 0997E8 = ApplyNewEncryptionKeyToBagItems
099E44 = 09984C = SetBagItemsPointers
099F40 = 099948 = CheckBagHasItem
09A8BC = 09A2C4 = ItemId_GetName
09A924 = 09A330 = GetHoldEffect
09A948 = 09A354 = GetHoldEffectParam
0A0E90 = 0A2164 = GetSafariZoneFlag
0BD09C = 0BE35C = MovePlayerOnBike
0BD488 = 0BE748 = IsRunningDisallowed
0C71D0 = 0C83AC = RecordAbilityBattle
0C7208 = 0C83E4 = RecordItemEffectBattle
0CC79C = 0CD914 = set_unknown_box_id
0CC7A8 = 0CD920 = get_unknown_box_id
0CD38C = 0CE4D8 = VblankCB_TrainerHillRecords
0CD3A0 = 0CE4EC = MainCB2_TrainerHillRecords
0CD4D0 = 0CE61C = ClearVramOamPlttRegs
0CD608 = 0CE754 = ClearTasksAndGraphicalStructs
0D77F4 = 0D8898 = BattleStringExpandPlaceholdersToDisplayedString
0D87BC = 0D980C = BattlePutTextOnWindow
0F67A4 = 0F77FC = schedule_bg_copy_tilemap_to_vram
0F6F1C = 0F7F7C = NewMenuHelpers_DrawStdWindowFrame
0F793C = 0F899C = GetStartMenuWindowId
0F7948 = 0F89A8 = RemoveStartMenuWindow
10AD10 = 10B80C = UseRegisteredKeyItemOnField
10F904 = 110438 = MoveMenuCursor
11B0D0 = 11B914 = InUnionRoom
125A78 = 1263C4 = ItemIdToBattleMoveId
12E51C = 12ED24 = AddTextPrinterParameterized3
12E5A4 = 12EDAC = AddTextPrinterParameterized4
1E3B60 = 1C7A84 = CpuFastSet
1E3B64 = 1C7A88 = CpuSet
1E3B9C = square root
1E3BA8 = 1C7AC8 = call r0
1E3BAC = 1C7ACC = call r1
1E4018 = 1C7F38 = division
1E40F4 = 1C8014 = modulus
1E460C = 1C852C = division
1E4684 = 1C85A4 = modulus
1E5E78 = 1C9D98 = memcpy
1E5ED8 = 1C9DF8 = ?????

014D4A = 01456A = GetSpeedStat
014E98 = 0146B8 = GetPriority
014F14 = 014734 = GetAbilityValues
019E68 = 019678 = unknown_uncalled_func (disasm if needed)
019EC4 = 0196D4 = GetAbilityUserOnSameSide
01CD00 = 01C510 = CheckUnnerve
01CD98 = 01C5A8 = IsAffectedBySheerForce
01CDC6 = 01C5D6 = GetPinchThreshholdFromParam
01CDEC = 01C5FC = CheckAndRunCheekPouch
01CE30 = 01C640 = GetMoveWithNoPP
01CEEC = 01C6FC = GetPartyIndex
01F310 = 01EB20 = HasItemWithTypeEffect
01F358 = 01EB68 = GetWeatherTurns
01FCCC = 01F4DC = ConsumeItem
027E3A = 027612 = CheckLeafGuardAndFlowerVeil
02D05C = 02C834 = unknown_uncalled_func (disasm if needed)
041714 = 040E04 = ?????
045BF0 = 0451B4 = GetStatFromPowerItem
045DD8 = 04539C = ?????
045E00 = 0453C4 = ?????
?????? = 099F54 = ShiftListElementsLeft (unimplemented)
?????? = 168C88 = ClearFocusBand (unimplemented)
?????? = 168C9C = SetFocusBand (unimplemented)
?????? = 183A90 = ????? (unimplemented)
?????? = 2058E0 = ????? (unimplemented)
?????? = 205B0C = CopyMonToBattleMon (unimplemented)
?????? = 205C80 = GetMonThatCanWithstandBiggestAttack (unimplemented)
?????? = 205CF6 = GetGoodStallMon (unimplemented)
?????? = 205D8A = GetSideParty (unimplemented)
?????? = 205D96 = GetFirstAllowableSwitchin (unimplemented)
?????? = 205E14 = CanDoSevereDamage (unimplemented)
?????? = 205EE8 = IsMonFasterThan (unimplemented)
?????? = 205F48 = ShouldSwitchIfTrickRoom (unimplemented)
?????? = 205FDE = ShouldSwitchIfWeatherTeam (unimplemented)
?????? = 2060C0 = GetAITarget (unimplemented)
?????? = 2060FC = GetBestTrickRoomAttacker (unimplemented)
?????? = 206164 = GetAvailableWeatherSetter (unimplemented)
?????? = 2061DC = ChooseBestSwitchinNewAI (unimplemented)
?????? = 20621C = GetSlowMonWithLowHP (unimplemented)
?????? = 206292 = GetMatchupScore (unimplemented)
?????? = 206334 = ShouldUseTrickRoom (unimplemented)
?????? = 2063A4 = IsTeamSlow (unimplemented)
?????? = 206418 = IsMoveSuperEffective (unimplemented)
?????? = 20649C = CanUseNewAI (unimplemented)
?????? = 2064C6 = ShouldSwitchIfStallMon (unimplemented)
?????? = 2065CC = HasHealingMove (unimplemented)
?????? = 206600 = HasDamagingStatusThatWorks (unimplemented)
?????? = 2066CC = GetBestMatchupScore (unimplemented)
?????? = 207370 = ????? (unimplemented)
?????? = 207450 = GetPinchThreshhold (unimplemented)
?????? = 207470 = PushScriptInstr (unimplemented)
?????? = 2074A0 = SoftForceDirection (unimplemented)
?????? = 2074F0 = GetWalkFastMovementAction_New (unimplemented)
?????? = 207524 = GetPlayerRunMovementAction_New (unimplemented)
?????? = 2076B0 = RunTypeEffectivenessBasedAbilities (unimplemented)
?????? = 251AC0 = ????? (unimplemented)
?????? = 251B30 = GetNature_CheckSynchronize (unimplemented)
?????? = 251B58 = ????? (unimplemented)
?????? = 251BA4 = ????? (unimplemented)
?????? = 251BBA = ????? (unimplemented)
?????? = 251BE4 = ????? (unimplemented)
?????? = 251C92 = ForceUnownFormOnPersonality (unimplemented)
?????? = 251CB6 = CuteCharmOverworldEffect (unimplemented)
?????? = 251CF4 = ????? (unimplemented)
?????? = 251DA0 = IsMoveBlockedByAbility (unimplemented)
?????? = 251E40 = ShouldSwitch_NewAI (unimplemented)
?????? = 251E8C = ShouldSwitchIfLockedMoveOrRegenerator (unimplemented)
?????? = 251FD0 = ShouldSwitchIfCurseOrYawn (unimplemented)
?????? = 252058 = ShouldSwitchIfMightBeDoubleTargeted (unimplemented)
?????? = 252248 = GetTypeMatchup (unimplemented)
?????? = 3915EC = ????? (unimplemented)
?????? = 3C5D20 = DecompressBoxMon (unimplemented)
?????? = 3C5DC2 = SetBoxMonDataToCompressedBoxMonData (unimplemented)
?????? = 3C5DDE = GetCompressedBoxMonData (unimplemented)
?????? = 3C5F84 = GetCompressedBoxMonFromBox (unimplemented)
?????? = 3C5FA0 = CopyMonToBox (unimplemented)


data:
21A8D4 = sHoldEffectToType
254784 = 21118C = gBaseStats
250104 = sSoundMovesTable
2504FC = 25CF04 = sAccuracyStageRatios
25053C = sStatusFlagsForMoveEffects
25062C = sMoveEffectBS_Ptrs
254784 = 21118C = gBaseStats
259754 = 21615C = gEvolutionTable
25D7B4 = 21A1BC = gLevelUpLearnsets
25DEAD = gStatStageRatios
25E45C = gBitTable

old weather: 8765 4321
1 = WEATHER_RAIN_TEMPORARY
2 = WEATHER_RAIN_DOWNPOUR_UNUSED
3 = WEATHER_RAIN_PERMANENT
4 = WEATHER_SANDSTORM_TEMPORARY
5 = WEATHER_SANDSTORM_PERMANENT
6 = WEATHER_SUN_TEMPORARY
7 = WEATHER_SUN_PERMANENT
8 = WEATHER_HAIL

new weather: 8765 4321
1 = WEATHER_RAIN_TEMPORARY
2 = WEATHER_RAIN_PERMANENT
3 = WEATHER_SANDSTORM_TEMPORARY
4 = WEATHER_SANDSTORM_PERMANENT
5 = WEATHER_SUN_TEMPORARY
6 = WEATHER_SUN_PERMANENT
7 = WEATHER_HAIL_TEMPORARY
8 = WEATHER_HAIL_PERMANENT

SideTimer:
0xB = tailwindTimer

DisableStruct:
0x18 = unburden / slowStartTimer

BattleMove:
0x9 = [NEW] extraFlags
0xA = [NEW] categoryFlags
0xB = [NEW] typeFlags3

BattleMove.extraFlags: 8765 4321
1 = FLAG_SOUND_MOVE
2 = FLAG_BALLISTIC_MOVE
3 = FLAG_POWDER_MOVE
4 = FLAG_MENTAL_MOVE
5 = FLAG_PUNCH_MOVE or FLAG_RECOIL_MOVE
6 = FLAG_PULSE_MOVE or FLAG_BITE_MOVE
7 = FLAG_BITE_MOVE or FLAG_PULSE_MOVE
8 = FLAG_RECOIL_MOVE or FLAG_PUNCH_MOVE

BattleMove.categoryFlags: 4321
1 = DOES_SPECIAL_DMG
2 = SPECIAL_MOVE
3 = (checked by prankster/(ability93))
4 = 

BattleMove.typeFlags3: 4321
1 = FLAG_SECONDARY_EFFECT
2 = 
3 = 
4 = 

BoxPokemon_Japanese:
00 = personality
04 = otId
08 = vuts rqpo nmlk jihg fedc ba98 7654 3210
	43210 = hpIV
	98765 = attackIV
	edcba = defenseIV
	jihgf = speedIV
	onmlk = spAttackIV
	tsrqp = spDefenseIV
	u = isEgg
	v = altAbility
0C = nickname[7]
13 = ppBonuses
14 = friendship
15 = metLocation
16 = metLevel
17 = pokeball
18 = hpEV
19 = attackEV
1A = defenseEV
1B = speedEV
1C = spAttackEV
1D = spDefenseEV
1E = otName[6]
24 = species
26 = fedc ba98 7654 3210
	ba9876543210 = heldItem
	fedc = markings
28 = DCBA zyxw vuts rqpo nmlk jihg fedc ba98 7654 3210
	9876543210 = moves[0]
	jihgfedcba = moves[1]
	tsrqponmlk = moves[2]
	DCBAzyxwvu = moves[3]
2D = nmlk jihg fedc ba98 7654 3210
	kjihgfedcba9876543210 = experience
	ml = pokerus
	n = altAbility == 2?
	
evo methods:
0x10 = EVO_LEVEL_GENDER - param = level
0x11 = EVO_LOCATION - param = regionMapSectionId
0x12 = EVO_MOVE_OR_MOVETYPE - param = move id if high bit 0, move type if high bit 1
0x13 = EVO_LEVEL_WITH_ITEM_DAY - param = item id, or 0 for no item requirement
0x14 = EVO_LEVEL_WITH_ITEM_NIGHT - param = item id, or 0 for no item requirement
0x15 = EVO_MON_OR_MON_TYPE_IN_PARTY - param = mon species id if high bit 0, mon type if high bit 1
0x16 = EVO_ITEM_GENDER - param = item id
0x17 = EVO_TRADE_FOR_SPECIFIC_MON - param = mon species id
0x18 = EVO_WEATHER - param = overworld weather id

POCKET_POKE_BALLS = 3 in FR
MOVE_EFFECT_RECOIL_50 = 0x37
AI_SCRIPT_NEW_AI = (1 << 0xA)