addr e: addr j: desc

74 29 02 02: E4 28 02 02: gBattle_BG0_X
76 29 02 02: E6 28 02 02: gBattle_BG0_Y
B8 2A 02 02: 28 2A 02 02: gBattleTextBuff1
C8 2A 02 02: 38 2A 02 02: gBattleTextBuff2
4C 2B 02 02: AC 2A 02 02: gBattleTypeFlags
C4 33 02 02: 24 33 02 02: gBattleBufferB
C4 3B 02 02: 24 3B 02 02: gActiveBattler
C8 3B 02 02: 28 3B 02 02: gBattleControllerExecFlags
CC 3B 02 02: 2C 3B 02 02: gBattlersCount
CE 3B 02 02: 2E 3B 02 02: gBattlerPartyIndexes
DE 3B 02 02: 3E 3B 02 02: gBattlerByTurnOrder
E2 3B 02 02: 42 3B 02 02: gCurrentTurnActionNumber
E3 3B 02 02: 43 3B 02 02: gCurrentActionFuncId
E4 3B 02 02: 44 3B 02 02: gBattleMons
FC 3B 02 02: 5C 3B 02 02: gBattleMons.statStages
04 3C 02 02: 64 3B 02 02: gBattleMons.ability
0C 3C 02 02: 6C 3B 02 02: gBattleMons.hp
30 3C 02 02: 90 3B 02 02: gBattleMons.status1
48 3D 02 02: A8 3C 02 02: gCurrMovePos
49 3D 02 02: A9 3C 02 02: gChosenMovePos
4A 3D 02 02: AA 3C 02 02: gCurrentMove
4C 3D 02 02: AC 3C 02 02: gChosenMove
50 3D 02 02: B0 3C 02 02: gBattleMoveDamage
54 3D 02 02: B4 3C 02 02: gHpDealt
58 3D 02 02: B8 3C 02 02: gTakenDmg
68 3D 02 02: C8 3C 02 02: gLastUsedItem
6A 3D 02 02: CA 3C 02 02: gLastUsedAbility
6B 3D 02 02: CB 3C 02 02: gBattlerAttacker
6C 3D 02 02: CC 3C 02 02: gBattlerTarget
6E 3D 02 02: CE 3C 02 02: gEffectBattler
6F 3D 02 02: CF 3C 02 02: gPotentialItemEffectBattler
70 3D 02 02: D0 3C 02 02: gAbsentBattlerFlags
71 3D 02 02: D1 3C 02 02: gCritMultiplier
72 3D 02 02: D2 3C 02 02: gMultiHitCounter
74 3D 02 02: D4 3C 02 02: gBattleScriptCurrInstr
7C 3D 02 02: DC 3C 02 02: gChosenActionByBattler (FR) / ?????? (PD)
80 3D 02 02: E0 3C 02 02: gSelectionBattleScripts
98 3D 02 02: F8 3C 02 02: gLastMoves
A0 3D 02 02: 00 3D 02 02: gLastLandedMoves
A8 3D 02 02: 08 3D 02 02: gLastHitByType
B8 3D 02 02: 18 3D 02 02: gLockedMoves
C4 3D 02 02: 24 3D 02 02: gChosenMoveByBattler
CC 3D 02 02: 2C 3D 02 02: gMoveResultFlags
D0 3D 02 02: 30 3D 02 02: gHitMarker
D8 3D 02 02: 38 3D 02 02: gTakenDmgByBattler
DE 3D 02 02: 3E 3D 02 02: gSideStatuses
E4 3D 02 02: 44 3D 02 02: gSideTimers
FC 3D 02 02: 5C 3D 02 02: gStatuses3
0C 3E 02 02: 6C 3D 02 02: gDisableStructs
80 3E 02 02: E0 3D 02 02: gRandomTurnNumber
82 3E 02 02: E2 3D 02 02: gBattleCommunication
85 3E 02 02: E5 3D 02 02: cEFFECT_CHOOSER
87 3E 02 02: E7 3D 02 02: cMULTISTRING_CHOOSER
8A 3E 02 02: EA 3D 02 02: gBattleOutcome
8C 3E 02 02: EC 3D 02 02: gProtectStructs
CC 3E 02 02: 2C 3E 02 02: gSpecialStatuses
1C 3F 02 02: 7C 3E 02 02: gBattleWeather
1E 3F 02 02: 7E 3E 02 02: gTrickRoomTurns (PD)
20 3F 02 02: 80 3E 02 02: gWishFutureKnock
50 3F 02 02: B0 3E 02 02: gDynamicBasePower
54 3F 02 02: B4 3E 02 02: gEnigmaBerries
C4 3F 02 02: 24 3F 02 02: gBattleScripting
D4 3F 02 02: 2E 3F 02 02: sB_ANIM_ARG1
DE 3F 02 02: 3E 3F 02 02: sSTATCHANGER
DF 3F 02 02: 3F 3F 02 02: sSTAT_ANIM_PLAYED (FRPD) / sSECOND_STATCHANGER (PD)
E8 3F 02 02: 48 3F 02 02: gBattleStruct
F4 3F 02 02: 54 3F 02 02: gBattleResources
29 40 02 02: 89 3F 02 02: ?????? (within parameters, viable) (HandleEndTurn_FinishBattle: used as index to gPlayerParty in loop)
2C 40 02 02: 8C 3F 02 02: gEnemyParty
84 42 02 02: E4 41 02 02: gPlayerParty
		   : E2 85 03 02: ?????? (CreateNPCTrainerParty: checked if less than 2E6, then used as index to copy from table data_09400000_J into gEnemyParty)
           : 00 B9 03 02: ?????? (sub_8032768: zeroed starting from here to 0203BB00)
		   : 50 B9 03 02: ?????? (ItemBattleEffects: zeroed at start of cases 0 (first entry) and 1 (end of turn))
								 (ItemBattleEffects: checked if set to this battler before executing case 3 (after move?))
								 (atk01_accuracycheck: set to only the target if the move doesn't miss (only if accuracy was checked at all))
								 (atk0C_datahpupdate: add the active battler if damage was dealt; set to all battlers if pkmn with Unnerve faints)
		   : 70 B9 03 02: ?????? (appears to be an array of unknown objects; first field is a 4-entry array of 2 bytes each, second field is a 4-entry array of 1 byte each)
								 (atk02_attackstring: when player attacks: insert [gCurrentMove, 0] into the first empty slot for the mon, or increment the field2 of the first entry where field1 = gCurrentMove and field2 != 0xFF, whichever comes first)
								 (atk02_attackstring: when player attacks: if neither of the above is available, insert [gCurrentMove, 0] into the last slot where field2 != 0xFF; if even that fails, insert it into the first slot)
		   : 0D C0 03 02: ?????? (sub_8032768: zeroed)
           : 00 D5 03 02: ?????? (sub_8032768: zeroed starting from here to 0203D600)
		   : 00 FE 03 02: ?????? (HandleAction_UseItem: set to gItemData[gLastUsedItem].type)
		   
84 4F 00 03: C4 4F 00 03: gBattleMainFunc
90 4F 00 03: D0 4F 00 03: gBattleResults
7C 53 00 03: CC 53 00 03: gCB2_AfterEvolution
		   
		   
funcs e,j,desc:
008D84 = 008900 = StringCopy
00DFF0 = 00D9E4 = BtlController_EmitSetMonData
00E5EC = 00DFA0 = BtlController_EmitHealthBarUpdate
011100 = BattleMainCB2
015A30 = FreeResetData_ReturnToOvOrDoEvolutions
016E24 = 016634 = GetBattlerForBattleScript
016EC8 = 0166D8 = PressurePPLose
017248 = 016A58 = MarkBattlerForControllerExec
0172E8 = 016AF8 = CancelMultiTurnMoves
0173AC = 016BBC = PrepareStringBattle
017520 = 016D30 = BattleScriptPush
017544 = 016D54 = BattleScriptPushCursor
01756C = 016D7C = BattleScriptPop
017A64 = GetImprisonedMovesCount
0192D4 = 018AE4 = AtkCanceller_UnableToUseMove
019DAC = CastformDataTypeChange (FR) / TerubimDataTypeChange (PD)
019F18 = 019728 = AbilityBattleEffects
01BBE4 = 01B3F4 = BattleScriptExecute
01BC24 = 01B434 = BattleScriptPushCursorAndCallback
01BC68 = 01B478 = ItemBattleEffects
01D05C = GetMoveTarget
01D438 = 01CC48 = isMonDisobedient
01DB10 = 01D320 = JumpIfMoveFailed
01DC10 = 01D420 = JumpIfMoveAffectedByProtect
01E770 = 01DF80 = ModulateDmgByType
01EAB8 = 01E2C8 = CheckWonderGuardAndLevitate
01ED3C = 01E54C = ModulateDmgByType2
01FEE8 = 01F6F8 = GetBattlerTurnOrderNum
01FF20 = 01F730 = SetMoveEffect
02A1C0 = 029998 = IsTwoTurnsMove
02A224 = 0299FC = AttacksThisTurn
03E47C = CalculateMonStats
03ECEC = 03E458 = CalculateBaseDamage
03F78C = 03EEF8 = GetGenderFromSpeciesAndPersonality
03FBE8 = 03F354 = GetMonData
04037C = 03FA70 = SetMonData
04101C = 04070C = CalculatePPWithBonus
043A70 = CheckPartyPokerus
043AD8 = CheckPartyHasHadPokerus
044234 = 04387C = GetFlavorRelationByPersonality
044EC8 = 04448C = Random
06E6D0 = FlagGet
070E44 = BeginFastPaletteFade
071AB4 = FadeOutMapMusic
0751C4 = 074968 = GetBattlerSide
0751D8 = 07497C = GetBattlerPosition
0751E8 = 07498C = GetBattlerAtPosition
07AF98 = 07A6F8 = weather_get_current
09A924 = 09A330 = GetHoldEffect
09A948 = 09A354 = GetHoldEffectParam
0C71D0 = 0C83AC = RecordAbilityBattle
0C7208 = 0C83E4 = RecordItemEffectBattle
1E3BA8 = call r0
1E4018 = 1C7F38 = division
1E4684 = 1C85A4 = modulus

014D4A = 01456A = GetSpeedStat
014E98 = 0146B8 = GetPriority
014F14 = 014734 = GetAbilityValues
019E68 = 019678 = unknown_uncalled_func (disasm if needed)
019EC4 = 0196D4 = GetAbilityUserOnSameSide
01CD00 = 01C510 = CheckUnnerve
01CD98 = 01C5A8 = IsAffectedBySheerForce
01CDC6 = 01C5D6 = GetPinchThreshholdFromParam
01CE30 = 01C640 = GetMoveWithNoPP
01CEEC = 01C6FC = GetPartyIndex
01F310 = 01EB20 = HasItemWithTypeEffect (unimplemented)
01F358 = 01EB68 = GetWeatherTurns (unimplemented)
01FCCC = 01F4DC = ConsumeItem (unimplemented)
027E3A = 027612 = CheckLeafGuardAndFlowerVeil (unimplemented)
?????? = 168C88 = ????? (unimplemented)
?????? = 168C9C = ????? (unimplemented)
?????? = 207370 = ????? (unimplemented)
?????? = 207450 = GetPinchThreshhold (unimplemented)
?????? = 207470 = PushScriptInstr (unimplemented)
?????? = 2076B0 = RunTypeEffectivenessBasedAbilities (unimplemented)
?????? = 251DA0 = IsMoveBlockedByAbility (unimplemented)

data:
21A8D4 = sHoldEffectToType
250104 = sSoundMovesTable
2504FC = 25CF04 = sAccuracyStageRatios
25053C = sStatusFlagsForMoveEffects
25062C = sMoveEffectBS_Ptrs
254784 = gBaseStats
25DEAD = gStatStageRatios
25E45C = gBitTable

old weather: 8765 4321
1 = WEATHER_RAIN_TEMPORARY
2 = WEATHER_RAIN_DOWNPOUR_UNUSED
3 = WEATHER_RAIN_PERMANENT
4 = WEATHER_SANDSTORM_TEMPORARY
5 = WEATHER_SANDSTORM_PERMANENT
6 = WEATHER_SUN_TEMPORARY
7 = WEATHER_SUN_PERMANENT
8 = WEATHER_HAIL

new weather: 8765 4321
1 = WEATHER_RAIN_TEMPORARY
2 = WEATHER_RAIN_PERMANENT
3 = WEATHER_SANDSTORM_TEMPORARY
4 = WEATHER_SANDSTORM_PERMANENT
5 = WEATHER_SUN_TEMPORARY
6 = WEATHER_SUN_PERMANENT
7 = WEATHER_HAIL_TEMPORARY
8 = WEATHER_HAIL_PERMANENT

SideTimer:
0xB = tailwindTimer

DisableStruct:
0x18 = unburden / slowStartTimer

BattleMove:
0x9 = [NEW] typeFlags1
0xA = [NEW] typeFlags2
0xB = [NEW] typeFlags3

BattleMove.typeFlags1: 4321
1 = FLAG_SOUND_MOVE
2 = FLAG_BALLISTIC_MOVE
3 = FLAG_POWDER_MOVE
4 = FLAG_MENTAL_MOVE

BattleMove.typeFlags2: 4321
1 = (checked by hustle, p/s split?)
2 = (checked by weak armor)
3 = (checked by prankster/(ability93))
4 = 

BattleMove.typeFlags3: 4321
1 = FLAG_SECONDARY_EFFECT
2 = 
3 = 
4 = 

POCKET_POKE_BALLS = 3 in FR