	r8 = 0;
	...
	for(i = 0; i <= 5; i++)
	{
		if(GetMonData(&gEnemyParty[i], 0x39) == 0)
			continue;
		if(GetMonData(&gEnemyParty[i], 0x41) == 0)
			continue;
		if(GetMonData(&gEnemyParty[i], 0x41) == 0x19C)
			continue;
		if(i == gBattlerPartyIndexes[gActiveBattler])
			continue;
		if(i == gBattlerPartyIndexes[gActiveBattler])
			continue;
		if(i == gBattleStruct->0x5C[gActiveBattler])
			continue;
		if(i == gBattleStruct->0x5C[gActiveBattler])
			continue;
		
		r8++;
	}
	
	if(r8 == 0)
		return TRUE;
	if(fn_39188())
		return TRUE;
	if(fn_391EC())
		return TRUE;
	if(fn_3937C())
		return TRUE;
	if(fn_39598())
		return TRUE;
	if(HasSuperEffectiveMoveAgainstOpponents(FALSE))
		return FALSE;
	if(fn_397E0())
		return FALSE;
	if(fn_39828(8, 2))
		return TRUE;
	if(fn_39828(4, 3))
		return TRUE;
		
	return FALSE;
}








fn_251E40_J()
{
	data_0203B965 = 1

	if(!CanUseNewAI())
		return FALSE;
	if(fn_251E8C_J())
		return TRUE;
	if(fn_251FD0_J())
		return TRUE;
	if(fn_205F48_J())
		return TRUE;
	if(fn_205FDE_J())
		return TRUE;
	if(fn_252058_J())
		return TRUE;
	if(fn_2064C6_J())
		return TRUE;
		
	return FALSE;
}








fn_251E8C_J()
{
	if(gBattleMons[gActiveBattler].0x20 != 0x90)
	{
		if(gBattleStruct->0xC8[gActiveBattler] != 0)
			r0 = gBattleStruct->0xC8[gActiveBattler]
		elseif(gDisableStructs[gActiveBattler].6 != 0)
			r0 = gDisableStructs[gActiveBattler].6
		else
			return FALSE;
		
		if(gBattleMoves[r0].1 != 0)
		{
			r1 = gBattleMons[gActiveBattler].0xC
			
			for(r7 = 0; r7 != 8; r7 += 2)
			{
				if(r0 == *(r1 + r7))
				{
					if(*(r1 + 0x18 + (r7 / 2)) != 0 && (!(AI_TypeCalc(r7, gBattleMons[0].0, gBattleMons[0].0x20) & 0xC) || gBattleMons[0].0x28 == 0))
					{	
						if(gBattleMons[2].0x28 == 0)
							return FALSE;
						if(!(AI_TypeCalc(r7, gBattleMons[2].0, gBattleMons[0].0x20) & 0xC))
							return FALSE;
					}
					
					break;
				}
			}
		}
		
		if(Random() & 0xF == 0)
			return FALSE;
	}
	else
	{
		if(gBattleMons[gActiveBattler].0x28 > (gBattleMons[gActiveBattler].0x2C / 2))
			return FALSE;
		if(Random() & 1 == 0)
			return FALSE;
	}
	
	r6 = fn_205C80_J(fn_2060C0_J(), gActiveBattler)
	
	if(r6 == 6)
	{
		r6 = fn_20621C_J(r6)
		
		if(r6 == 6)
		{
			{r0, r6} = GetBestMatchupScore(gBattleMons[0].0, gBattleMons[2].0, 1)
			
			if(r0 >= 0xF)
				return FALSE;
		}
	}
	
	gBattleStruct->0x92[gActiveBattler] = r6
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








fn_251FD0_J()
{
	if(!(gBattleMons[gActiveBattler].0x50 & 0x10000000) && !(gStatuses3[gActiveBattler] & 0x1800))
		return FALSE;
	if(Random() & 3 == 0)
		return FALSE;

	r6 = fn_205C80_J(fn_2060C0_J(), gActiveBattler)
	
	if(r6 == 6)
		r6 = fn_20621C_J(r6)
	
	gBattleStruct->0x92[gActiveBattler] = r6
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








fn_205F48_J()
{
	if(!gTrickRoomActive)
		return FALSE;

	{r0, NULL} = fn_205E14_J(gActiveBattler, fn_2060C0_J(), 1)
	
	if(r0 == 1)
		return FALSE;

	r1 = gBattleMons[gActiveBattler].2
	r2 = gBattleMons[gActiveBattler].8
	
	if(r1 < r2)
		r1 = r2
	
	if(r1 >= 0x8C)
		return FALSE;

	{r0, r4} = GetBestTrickRoomAttacker()
	
	if(r0 < 0x8C)
		return FALSE;
	if(Random() & 7 == 0)
		return FALSE;

	if(fn_206418_J(r4, gLastMoves[fn_2060C0_J()]) && (Random() & 7) != 0)
		return FALSE;
	
	gBattleStruct->0x92[gActiveBattler] = r4
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








fn_205FDE_J()
{
	r0 = GetAvailableWeatherSetter()
	
	if(r0 != 6)
	{
		r4 = r0
		
		if(Random() & 7 != 0)
		{
			{r0, r1} = fn_205E14_J(gActiveBattler, 0, 0)
			
			if(r0 == 1)
				return FALSE;

			{r0, r1} = fn_205E14_J(gActiveBattler, 1, 0)
			
			if(r0 == 1)
				return FALSE;
		}
		
		if(!(gBattleWeather & 0xFF) && (Random() & 3) == 0)
			return FALSE;
	}
	else
	{
		r0 = gBattleMons[gActiveBattler].0x20
		
		if(r0 == 2)
			r0 = 3
		elseif(r0 == 0x2D)
			r0 = 0xC
		elseif(r0 == 0x46)
			r0 = 0x30
		elseif(r0 == 0x75)
			r0 = 0xC0
		else
			return FALSE;
		
		if(gBattleWeather & r0)
			return FALSE;
		
		{, r4} = GetBestMatchupScore(gBattleMons[0].0, gBattleMons[2].0, 1)
	}
	
	if(Random() % 6 == 0)
		return FALSE;

	gBattleStruct->0x92[gActiveBattler] = r4
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








fn_252058_J()
{
	r5 = 0
	r6 = 0
	s0 = 0
	
	if((0x64 * ((gBattleMons[gActiveBattler].6 - 5) / gBattleMons[gActiveBattler].0x2A)) < 0x122 && gBattleMons[gActiveBattler].0x28 <= (gBattleMons[gActiveBattler].0x2C / 2))
		return FALSE;

	for(r4 = 0; r4 != 4; r4 += 2)
	{
		if(gBattleMons[r4].0x28 == 0)
			continue;

		r5++
		
		if(!fn_205EE8_J(gActiveBattler, r4))
		{
			{r0, r1} = fn_205E14_J(gActiveBattler, r4, 0)
			
			if(r0 != 1)
			{
				{r0, r1} = fn_205E14_J(r4, gActiveBattler, 1)
				
				if(r0 == 0)
					continue;

				s1 = r1
				
				{r0, r1} = fn_205E14_J(gActiveBattler, r4, 0)
				
				if(r0 == 1)
					continue;

				r1 = s1
			}
		}
		else
		{
			{r0, r1} = fn_205E14_J(gActiveBattler, r4, 0)
			
			if(r0 == 1)
				continue;

			{r0, r1} = fn_205E14_J(r4, gActiveBattler, 0)
			
			if(r0 != 1)
			{
				{r0, r1} = fn_205E14_J(gActiveBattler, r4, 1)
				
				if(r0 == 1)
					continue;
				
				{r0, r1} = fn_205E14_J(r4, gActiveBattler, 1)
				
				if(r0 != 1)
					continue;
			}
		}
		
		*(&s0 + r4) = r1
		r6++
	}
	
	if((Random() % (r5 + 1)) + 1 > r6)
		return FALSE;
	
	if(*(&s0 + 0) != 0)
		r4 = *(&s0 + 0)
	elseif(*(&s0 + 2) == 0)
		r4 = *(&s0 + 2)
	else
		return FALSE;

	for(r7 = 0; r7 < 6; r7++)
	{
		r7 = GetFirstAllowableSwitchin(r7, 1)
		
		if(r7 == 6)
			break;

		r5 = gEnemyParty[r7]
		
		if(AI_TypeCalc(r4, GetMonData(r5, 0xB), GetMonAbility(r5)) & 8)
			goto lbl12
	}
	
	for(r7 = 0; r7 < 6; r7++)
	{
		r7 = GetFirstAllowableSwitchin(r7, 1)
		
		if(r7 == 6)
			return FALSE;

		r5 = gEnemyParty[r7]
		s0 = GetMonData(r5, 0x39)
		
		if(s0 > (s0 / 4) && (GetMonData(r5, 0x3A) != s0 || GetHoldEffectParam(GetMonData(r5, 0xC)) != 0x43))
		{
			if(AI_TypeCalc(r4, GetMonData(r5, 0xB), GetMonAbility(r5)) & 4)
				goto lbl12
		}
	}
	
	return FALSE;

	lbl12:
	if((Random() % 0x10) <= data_0203B960_J)
		return FALSE;

	gBattleStruct->0x92[gActiveBattler] = r7
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








fn_2064C6_J()
{
	r5 = 0
	r6 = 0
	
	if((0x64 * ((gBattleMons[gActiveBattler].6 - 5) / gBattleMons[gActiveBattler].0x2A)) < 0x122 && gBattleMons[gActiveBattler].0x28 > (gBattleMons[gActiveBattler].0x2C / 2))
		return FALSE;

	for(r4 = 0; r4 != 4; r4 += 2)
	{
		if(fn_2065CC_J(gActiveBattler))
			continue;
			
		if(!fn_2065CC_J(r4))
		{
			{r0, r1} = fn_205E14_J(r4, gActiveBattler, 1)
			
			if(r0 == 1)
				continue;

			s0 = r0
			
			{r0, r1} = fn_205E14_J(gActiveBattler, r4, 1)
			
			if(r0 == 1)
				continue;
			if(r1 > s0)
				continue;
		}
		else
		{
			{r0, r1} = fn_205E14_J(gActiveBattler, r4, 1)
			
			if(r0 == 1)
				continue;
		}
		
		r6++
	}
	
	if((Random() % (r5 + 1)) + 1 > r6)
		return FALSE;

	r7 = fn_205CF6_J(gActiveBattler, fn_2060C0_J())
	
	if(r7 == 6)
		return FALSE;

	r4 = gEnemyParty[r7]
	
	if(GetMonData(r4, 0x39) <= (GetMonData(r4, 0x3A) / 4))
		return FALSE;
	if((Random() % 0x10) <= data_0203B960_J)
		return FALSE;

	gBattleStruct->0x92[gActiveBattler] = r7
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








fn_2060C0_J()
{
	r4 = 0
	
	if(gBattleMons[0].0x28 != 0)
		r4 |= 1
	
	if(gBattleMons[2].0x28 != 0)
		r4 |= 2
	
	if(r4 == 3)
		r0 = Random() & 1
	elseif(r4 == 1)
		r4--
	
	return r4
}








fn_205C80_J(arg0, arg1)
{
	r5 = GetSideParty(arg1 & 1)
	r1 = gBattleMons[arg1]
	r0 = data_0203D480_J
	r2 = 0x58
	fn_1E5E78()
	
	for(r7 = 0; r7 < 6; r7++)
	{
		r7 = GetFirstAllowableSwitchin(r7, 1)
		
		if(r7 == 6)
			break;
		
		fn_205B0C_J(&gBattleMons[arg1], &r5[r7])
		{r0, } = fn_205E14_J(arg0, arg1, 1)
		
		if(r0 == 0)
			break;
	}
	
	r1 = (arg1 * 0x58) + gBattleMons
	r0 = data_0203D480_J
	r2 = 0x58
	fn_1E5E78()
	return r7
}








fn_20621C_J(arg0)
{
	for(r7 = arg0; r7 < 6; r7++)
	{
		r7 = GetFirstAllowableSwitchin(r7, 1)
		
		if(r7 == 6)
			break;

		r5 = gEnemyParty[r7]
		
		if(gBattleMons[0].0 != 0 && GetMonData(r5, 0x3D) > data_21118C_J[gBattleMons[0].0].3 + 0x20)
			continue;
		if(gBattleMons[2].0 != 0 && GetMonData(r5, 0x3D) > data_21118C_J[gBattleMons[2].0].3 + 0x20)
			continue;
		if(GetMonData(r5, 0x39) <= (GetMonData(r5, 0x3A) / 2))
			break;
	}
	
	return r7
}








fn_205E14_J(arg0, arg1, arg2)
{
	s2 = 0
	gBattlerAttacker = arg0
	gBattlerTarget = arg1

	for(r7 = 0; r7 != 4; r7++)
	{
		s3 = gBattleMons[gBattlerAttacker].0x2C
		s0 = gBattleMons[gBattlerAttacker].0xC[r7]
		s1 = &gBattleMoves[gBattleMons[gBattlerAttacker].0xC[r7]]
		
		if(gBattleMoves[gBattleMons[gBattlerAttacker].0xC[r7]].1 <= 1)
			continue;

		gDynamicBasePower = 0
		gBattleStruct->0x13 = 0
		gBattleScripting.0xE = 1
		gMoveResultFlags = 0
		gCritMultiplier = 1
		gCurrentMove = s0
		r0 = AI_CalcDmg(gBattlerAttacker, gBattlerTarget, TRUE)
		r0 = TypeCalc(gCurrentMove, gBattlerAttacker, gBattlerTarget)
		
		if(*s1 == 0x29)
			gBattleMoveDamage *= 4
		elseif(*s1 == 0x2C)
			gBattleMoveDamage *= 2
		
		if(gBattleMoveDamage > s2)
			s2 = gBattleMoveDamage
		
		if(gBattleMoveDamage == 0)
			gBattleMoveDamage = 1
		
		if(arg2 == 1)
			r1 = gBattleMons[gBattlerTarget].0x2C / 2
		else
			r1 = gBattleMons[gBattlerTarget].0x28
		
		if(r1 <= gBattleMoveDamage)
			return {s0, 1}
	}
	
	return {0, 0x64 * (s2 / s3)}
}








fn_206418_J(arg0, arg1)
{
	r5 = gPlayerParty[arg0]
	
	if(AI_TypeCalc(arg1, GetMonData(r5, 0xB), GetMonAbility(r5)) & 2)
		return TRUE;
	else
		return FALSE;
}








fn_205EE8_J(arg0, arg1)
{
	if(GetSpeedStat(arg1) < GetSpeedStat(arg0))
		return TRUE;
	else
		return FALSE;
}








fn_2065CC_J(arg0)
{
	for(r5 = 0; r5 < 8; r5 += 2)
	{
		r1 = gBattleMoves[gBattleMons[arg0].0xC[r5]].0

		if(r1 == 0x20)
			return TRUE;
		if(r1 == 0x84)
			return TRUE;
		if(r1 == 0x9D)
			return TRUE;
	}

	return FALSE:
}








fn_205CF6_J(arg0, arg1)
{
	r5 = GetSideParty(arg0 & 1)
	r1 = &gBattleMons[arg0]
	r6 = r1
	r0 = &data_0203D480_J
	r2 = 0x58
	fn_1E5E78()

	for(r7 = 0; r7 < 6; r7++)
	{
		r7 = GetFirstAllowableSwitchin(r7, 1)
		
		if(r7 == 6)
			break;
		
		fn_205B0C_J(&gBattleMons[arg0], &r5[r7])
		{r0, r1} = fn_205E14_J(arg0, arg1, 1)
		
		if(r0 == 1)
			continue;
		if(!fn_2065CC_J(arg0))
			continue;
		if(!fn_206600_J(arg0, arg1))
			continue;

		{r0, r1} = fn_205E14_J(arg0, arg1, 1)
		
		if(r0 == 0)
			break;
	}
	
	r0 = gBattleMons[arg0]
	r1 = &data_0203D480_J
	r2 = 0x58
	fn_1E5E78()
	return r7
}








fn_205B0C_J(arg0, arg1)
{
	r0 = arg0
	r1 = 0
	r2 = 0x58
	fn_1E5ED8()
	
	*(arg0 + 0) = GetMonData(arg1, 0xB)
	*(arg0 + 2) = GetMonData(arg1, 0x3B)
	*(arg0 + 4)  = GetMonData(arg1, 0x3C)
	*(arg0 + 6) = GetMonData(arg1, 0x3D)
	*(arg0 + 8)  = GetMonData(arg1, 0x3E)
	*(arg0 + 0xA) = GetMonData(arg1, 0x3F)
	*(arg0 + 0xC) = GetMonData(arg1, 0xD)
	*(arg0 + 0xE) = GetMonData(arg1, 0xE)
	*(arg0 + 0x10) = GetMonData(arg1, 0xF)
	*(arg0 + 0x12) = GetMonData(arg1, 0x10)
	*(arg0 + 0x14) = GetMonData(arg1, 0x27) | (GetMonData(arg1, 0x28) << 5) | (GetMonData(arg1, 0x29) << 0xA) | (GetMonData(arg1, 0x2A) << 0xF) | (GetMonData(arg1, 0x2B) << 0x14) | (GetMonData(arg1, 0x2C) << 0x19)
	*(arg0 + 0x18) = 0x6060606
	*(arg0 + 0x1C) = 0x6060606
	*(arg0 + 0x20) = GetMonAbility(arg1)
	*(arg0 + 0x21) = *((GetMonData(arg1, 0xB) * 0x1C) + data_21118C_J + 6)
	*(arg0 + 0x22) = *((GetMonData(arg1, 0xB) * 0x1C) + data_21118C_J + 7)
	*(arg0 + 0x24) = GetMonData(arg1, 0x11)
	*(arg0 + 0x25) = GetMonData(arg1, 0x12)
	*(arg0 + 0x26) = GetMonData(arg1, 0x13)
	*(arg0 + 0x27) = GetMonData(arg1, 0x14)
	*(arg0 + 0x28) = GetMonData(arg1, 0x39)
	*(arg0 + 0x2A) = GetMonData(arg1, 0x38)
	*(arg0 + 0x2B) = GetMonData(arg1, 0x20)
	*(arg0 + 0x2C) = GetMonData(arg1, 0x3A)
	*(arg0 + 0x2D) = GetMonData(arg1, 0xC)
	*(arg0 + 0x30) = 0xFF
	*(arg0 + 0x3C) = 0xFF
	*(arg0 + 0x48) = GetMonData(arg1, 0)
	*(arg0 + 0x54) = GetMonData(arg1, 1)
	return
}








fn_206600_J(arg0, arg1)
{
	if(gBattleMons[arg1].0x4C & 0xFF)
		return FALSE;

	for(r6 = 0; r6 < 8; r6 += 2)
	{
		if(gBattleMons[arg0].0x24[r6] == 0)
			continue;

		r0 = gBattleMons[arg0].0xC[r6] * 0xC
		r1 = gBattleMoves[gBattleMons[arg0].0xC[r6]].0
		
		if(r0 == 0x21 || r0 == 0x42)
		{
			r0 = gBattleMons[arg1].0x20
			
			if(r0 == 0x11)
				continue;
			if(r0 == 0x5A)
				continue;
			if(r0 == 0x62)
				continue;

			r0 = gBattleMons[arg1].0x21
			
			if(r0 == 8)
				continue;
			if(r0 == 3)
				continue;

			r0 = gBattleMons[arg1].0x22
			
			if(r0 == 8)
				continue;
			if(r0 == 3)
				continue;
			
			return TRUE;
		}
		elseif(r0 == 0xA7)
		{
			if(gBattleMons[arg1].0x20 == 0x29)
				continue;
			if(gBattleMons[arg1].0x21 == 0xA)
				continue;
			if(gBattleMons[arg1].0x22 == 0xA)
				continue;
			
			return TRUE;
		}
		else
			continue;
	}

	return FALSE;
}