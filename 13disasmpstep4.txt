(carryover: move, gLastUsedAbility, effect, battler, caseID, speciesAtk, speciesDef, pidAtk, pidDef)
...
if(gBattleTypeFlags & 0xA000 != 0x8000 && (gLastUsedAbility != ABILITY_INTIMIDATE? || gLastUsedAbility != ABILITY_TRACE))
{
	GET_MOVE_TYPE(move, moveType);

	switch(caseID)
	{
	case ABILITYEFFECT_ON_SWITCHIN:
		if(gBattlerAttacker >= gBattlersCount)
			gBattlerAttacker = battler;
		
		switch(gLastUsedAbility)
		{
		case ABILITYEFFECT_SWITCH_IN_WEATHER:
			switch(weather_get_current())
			{
			case 3:
			case 5:
			case 0xD:
				weather = WEATHER_RAIN_ANY;
				weatherAnim = B_ANIM_RAIN_CONTINUES;
				break;
			case 8:
				weather = WEATHER_SANDSTORM_ANY;
				weatherAnim = B_ANIM_SANDSTORM_CONTINUES;
				break;
			case 0xC:
				weather = WEATHER_SUN_ANY;
				weatherAnim = B_ANIM_SUN_CONTINUES;
				break;
			case 4:
			case 7:
				weather = WEATHER_HAIL_ANY;
				weatherAnim = B_ANIM_HAIL_CONTINUES;
			}
			
			if(!(gBattleWeather & weather))
			{
				gBattleWeather = weather;
				gBattleScripting.animArg1 = weatherAnim;
				gBattleScripting.battler = battler;
				effect++;
			}
			
			if(effect)
			{
				gBattleCommunication[MULTISTRING_CHOOSER] = weather;
				BattleScriptPushCursorAndCallback(BattleScript_OverworldWeatherStarts);
			}
			
			break;
		case ABILITY_DRIZZLE:
			weatherToCheck = WEATHER_RAIN_ANY
			newWeather = WEATHER_RAIN_TEMPORARY
			weatherScript = BattleScript_DrizzleActivates
			goto lbl45
		case ABILITY_SAND_STREAM:
			weatherToCheck = WEATHER_SANDSTORM_ANY
			newWeather = WEATHER_SANDSTORM_TEMPORARY
			weatherScript = BattleScript_SandstreamActivates
			goto lbl45
		case ABILITY_DROUGHT:
			weatherToCheck = WEATHER_SUN_ANY
			newWeather = WEATHER_SUN_TEMPORARY
			weatherScript = BattleScript_DroughtActivates
			goto lbl45
		case 0x75:
			weatherToCheck = WEATHER_HAIL_ANY
			newWeather = WEATHER_HAIL_TEMPORARY
			weatherScript = BattleScript_SnowWarningActivates
			goto lbl45
			
			lbl45:
			if(!(gBattleWeather & weatherToCheck))
			{
				gBattleWeather = newWeather;
				*(&gBattleWeather + 0x2C) = fn_1EB68_J(battler, newWeather);
				BattleScriptPushCursorAndCallback(weatherScript);
				gBattleScripting.battler = battler;
				effect++;
			}
			
			break;
		case ABILITY_CLOUD_NINE?:
			statusID = STATUS3_INTIMIDATE_POKES >> 0x10;
			goto lbl30
		case ABILITY_TRACE:
			statusID = STATUS3_TRACE >> 0x10;
			goto lbl30

			lbl30:
			if(!(gSpecialStatuses[battler] & statusID))
			{
				gStatuses3[battler] |= (statusID << 0x10);
				gSpecialStatuses[battler] |= statusID;
			}
			
			break;
		case ABILITY_FORECAST:
			effect = TerubimDataTypeChange(battler);
			
			if(effect)
			{
				BattleScriptPushCursorAndCallback(BattleScript_TerubimChange);
				gBattleScripting.battler = battler;
				*(&gBattleStruct->formToChangeInto) = effect - 1;
			}
			
			break;
		case ABILITY_AIR_LOCK:
			for(target1 = 0; target1 < gBattlersCount; target1++)
			{
				effect = TerubimDataTypeChange(target1);
				
				if(effect)
				{
					BattleScriptPushCursorAndCallback(BattleScript_TerubimChange);
					gBattleScripting.battler = target1;
					*(&gBattleStruct->formToChangeInto) = effect - 1;
					break;
				}
			}
			
			break;
		case ABILITY_UNBURDEN:
			if(gBattleMons[battler].item != 0)
				gDisableStructs[battler].unburden = UNBURDEN_ACTIVATED;
				
			break;
		case ABILITY_SLOW_START:
			gDisableStructs[battler].slowStartTimer = 5;
			stringID = 2;
			goto lbl19
		case ABILITY_MOLD_BREAKER:
			stringID = 0;
			goto lbl19
		case 0x2E:
			stringID = 1;
			goto lbl19
		case 0x7F:
			gBattlerTarget = battler ^ 1;
			stringID = 7;
			goto lbl19
		case ABILITY_IMPOSTER:
			gBattlerAttacker = battler;
			gBattlerTarget = battler ^ 1;
			gCurrentMove = MOVE_TRANSFORM;
			battleScript = BattleScript_ImposterActivates;
			goto lbl20
		case 0x6C:
			stringID = 4;
			goto lbl17
		case 0x6B:
			stringID = 5;
			goto lbl17
		case 0x77:
			stringID = 6;
			goto lbl17

			lbl17:
			r0 = fn_14734_J(battler, gLastUsedAbility)
			
			if(r0 != 0)
			{
				if(gLastUsedAbility == 0x58)
				{
					gCurrentMove = r0
					gLastUsedItem = r0
					goto lbl19

					lbl19:
					gBattleCommunication[MULTISTRING_CHOOSER] = stringID;
					battleScript = script_1A5C0_J
				}
				else
				{
					sSTATCHANGER = r0
					gBattlerTarget = battler
					battleScript = BattleScript_AbilityStatBoostActivates;
				}
				
				lbl20:
				if(!(gSpecialStatuses[battler].intimidatedMon????))
				{
					gSpecialStatuses[battler].intimidatedMon = 1;
					gBattleScripting.battler = battler;
					BattleScriptPushCursorAndCallback(battleScript);
					effect++
				}
			}
			
			break
		case 0x58:
			goto lbl17
		}

		break;
	case ABILITYEFFECT_ENDTURN:
		if(gBattleMons[battler].hp != 0)
		{
			gBattlerAttacker = battler;
			
			switch(gLastUsedAbility)
			{
			case ABILITY_RAIN_DISH:
			case 0x57:
			case ABILITY_HYDRATION:
			case ABILITY_ICE_BODY:
				if(WEATHER_HAS_EFFECT)
				{
					if(gLastUsedAbility == ABILITY_ICE_BODY)
						weatherToCheck = WEATHER_HAIL_ANY;
					else
						weatherToCheck = WEATHER_RAIN_ANY;
					
					if(gBattleWeather & weatherToCheck)
					{
						if(gLastUsedAbility == ABILITY_HYDRATION && (gBattleMons[battler].status1 & STATUS1_ANY))
							goto lbl61
						
						if(gBattleMons[battler].maxHP > gBattleMons[battler].hp)
						{
							BattleScriptPushCursorAndCallback(BattleScript_RainDishActivates);
							damage = gBattleMons[battler].maxHP;
							
							if(gLastUsedAbility != 0x57)
								damage /= 2;
								
							damage /= 8;
							
							if(damage == 0)
								damage = 1;
							
							gBattleMoveDamage = -damage;
							effect++;
						}
					}
				}
				
				break
			case ABILITY_SHED_SKIN:
				if((gBattleMons[battler].status1 & STATUS1_ANY) && (Random() % 3) == 0)
				{
					// IMPORTANT: comment lines differ from jpn
				
					lbl61:
					if(gBattleMons[battler].status1 == STATUS1_TOXIC_POISON || gBattleMons[battler].status1 == STATUS1_POISON)
						// offset = 4;
						offset = 0;
					elseif(gBattleMons[battler].status1 < STATUS1_POISON) // STATUS1_SLEEP
						// offset = 0;
						offset = 8;
					elseif(gBattleMons[battler].status1 == STATUS1_PARALYSIS)
						// offset = 0xB;
						offset = 0x10;
					elseif(gBattleMons[battler].status1 == STATUS1_BURN)
						// offset = 7;
						offset = 0x18;
					elseif(gBattleMons[battler].status1 == STATUS1_FREEZE)
						// offset = 0xE;
						offset = 0x20;
					else
						goto lbl70
					
					
					// StringCopy(gBattleTextBuff1, *(&gStatusConditionString_SleepJpn + offset));
					StringCopy(gBattleTextBuff1, *(&gStatusConditionString_PoisonJpn + offset));
					
					goto lbl70

					lbl70:
					gBattleMons[battler].status1 = 0;
					gBattleMons[battler].status2 &= ~(STATUS2_NIGHTMARE);
					gBattleScripting.battler = gActiveBattler = battler;
					BattleScriptPushCursorAndCallback(BattleScript_ShedSkinActivates);
					EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, &gBattleMons[battler].status1);
					MarkBattlerForControllerExec(gActiveBattler);
					effect++;
				}
				
				break
			case ABILITY_SPEED_BOOST:
				firstBoost = 0x13; // +1 speed
				secondBoost = NULL;
				goto lbl74
			case ABILITY_MOODY:
				lbl71:
				firstBoost = Random() % 7
				
				if(secondBoost >= 7)
				{
					secondBoost = firstBoost
					goto lbl71
				}
				
				if(secondBoost == firstBoost)
					goto lbl71

				firstBoost += 0x21 // +2 (firstBoost + 1) stat
				secondBoost += 0x91; // -1 (secondBoost + 1) stat
				
				lbl74:
				sSTATCHANGER = firstBoost;
				sSECOND_STATCHANGER = secondBoost;
				
				if(gDisableStructs[battler].isFirstTurn != 2)
				{
					gBattlerTarget = battler;
					
					if(gLastUsedAbility == ABILITY_SPEED_BOOST)
						battleScript = BattleScript_AbilityStatBoostActivates;
					else
						battleScript = BattleScript_AbilityTwoStatBoostsActivate;

					BattleScriptPushCursorAndCallback(battleScript);
					effect++
				}
				
				break;
			case ABILITY_TRUANT:
				gDisableStructs[battler].truantCounter ^= 1;
				effect++;
				
				break;
			case ABILITY_SLOW_START:
				if(gDisableStructs[battler].slowStartTimer != 0 && --gDisableStructs[battler].slowStartTimer == 0)
				{
					gBattleCommunication[MULTISTRING_CHOOSER] = 3;
					BattleScriptPushCursorAndCallback(script_1A5C0_J)
				}

				effect++;
				
				break;
			default:
				if(fn_196D4_J(battler, 0x83) != 0)
					goto lbl61
			}
		}
		
		break
	case ABILITYEFFECT_MOVES_BLOCK:
		r6 = 0
		
		if(gBattleMons[gBattlerAttacker].ability == 0x9E && (gBattleMoves[move].0xA & 4) && !(gBattleMoves[move].6 & 0x50) && IS_BATTLER_OF_TYPE(arg1, TYPE_DARK))
			goto lbl93
		
		if(gBattleMons[gBattlerTarget].ability == 0xD6 || gBattleMons[gBattlerTarget].ability == 0xDB)
		{
			if(GetPriority(gBattlerAttacker) > 0)
			{
				battleScript = script_1AA20_J
				goto lbl94
			}
		}
		elseif(IS_BATTLER_OF_TYPE(arg1, TYPE_GRASS))
			r6 = 4

		gLastUsedItem = gBattleMons[gBattlerTarget].item
		
		if(gBattleMons[gBattlerTarget].ability != ABILITY_KLUTZ && gBattleMons[gBattlerTarget].item != 0x46)
			r6 = 4
		
		if(gBattleMons[gBattlerAttacker].ability != ABILITY_MOLD_BREAKER && gBattleMons[gBattlerAttacker].ability - 0xA3 >= 1)
		{
			if(gBattleMons[gBattlerTarget].ability == 0x8E)
				r6 = 4
			elseif(gBattleMons[gBattlerTarget].ability == ABILITY_SOUNDPROOF)
				r6++
			elseif(gBattleMons[gBattlerTarget].ability == 0xB9)
				r6 += 2
			elseif(gBattleMons[gBattlerTarget].ability == 0xA5 || fn_196D4_J(gBattlerTarget, 0xA5) != 0)
				r6 += 8
		}
		
		r6 &= gBattleMoves[move].9
		
		if(r6 != 0)
		{
			if(gBattleMons[gBattlerAttacker].status2 & STATUS2_MULTIPLETURNS)
				gHitMarker |= HITMARKER_NO_PPDEDUCT;
			
			if(r6 == 8)
				battleScript = script_1AA30_J
			elseif(r6 == 4)
			{
				if(GetHoldEffect(gBattleMons[gBattlerTarget].item) == ITEM_EFFECT_SAFETY_GOGGLES)
					battleScript = BattleScript_GogglesDoSomething;
				
				if(gBattleMons[gBattlerTarget].ability != 0x8E)
				{
					lbl93:
					gMoveResultFlags = MOVE_RESULT_DOESNT_AFFECT_FOE;
					battleScript = BattleScript_PrintMoveMissed;
				}
			}
			else
				battleScript = BattleScript_SoundproofProtected;

			lbl94:
			gBattleScriptCurrInstr = battleScript;
			effect = 1;
		}
		
		break
	case ABILITYEFFECT_ABSORBING:
		if(move)
		{
			if(gBattleMons[gBattlerAttacker].ability != ABILITY_MOLD_BREAKER && gBattleMons[gBattlerAttacker].ability - 0xA3 >= 1)
			{
				r3 = r8
				effect = 1;
				
				switch(gLastUsedAbility)
				{
				case ABILITY_VOLT_ABSORB:
				case 0x57:
					lbl97:
					if(moveType == TYPE_ELECTRIC)
						goto lbl102
						
					break
				case ABILITY_WATER_ABSORB:
					if(moveType == TYPE_WATER)
						goto lbl102
						
					break
				case ABILITY_FLASH_FIRE:
					if(moveType == TYPE_FIRE && !(gBattleMons[battler].status1 & STATUS1_FREEZE))
					{
						effect = gBattleResources;
						alreadyFlashFired = r3 & UNKNOWN_FLAG_FLASH_FIRE
						
						if(!alreadyFlashFired)
							gBattleCommunication[MULTISTRING_CHOOSER] = 0;
						else
							gBattleCommunication[MULTISTRING_CHOOSER] = 1;

						lbl102:				
						if(gProtectStructs[gBattlerAttacker].notFirstStrike)
							ppLoss = 0;
						else
							ppLoss = 1;
						
						if(effect == 1)
							battleScript = BattleScript_MoveHPDrain;
						elseif(effect <= 0x14)
						{
							sSTATCHANGER = effect;
							effect = 2;
							battleScript = BattleScript_ImmunityBoostAbilityActivate;
						}
						else
							battleScript = BattleScript_FlashFireBoost;
						
						gBattleScriptCurrInstr = battleScript - ppLoss;
						
						if(effect >= 2 && !alreadyFlashFired)
						{
							effect->flags->flags[battler] |= UNKNOWN_FLAG_FLASH_FIRE;
							effect = 2;
						}
					}
					
					break
				default:
					effect = 0x14; // +1 Sp. Atk
					
					if(gLastUsedAbility == ABILITY_LIGHTNING_ROD)
					{
						lbl99:
						if(moveType == TYPE_ELECTRIC)
							goto lbl102
					}
					else
					{
						if(gLastUsedAbility == ABILITY_STORM_DRAIN)
							goto lbl97

						effect = 0x13; // +1 Speed
						
						if(gLastUsedAbility == ABILITY_MOTOR_DRIVE)
							goto lbl99

						effect = 0x11; // +1 Attack
						
						if(gLastUsedAbility == ABILITY_SAP_SIPPER && moveType == TYPE_GRASS)
							goto lbl102
					}
				}
			}
			
			if(effect == 1)
			{
				if(gBattleMons[battler].maxHP == gBattleMons[battler].hp)
				{
					if(gProtectStructs[gBattlerAttacker].notFirstStrike)
						ppLoss = 0;
					else
						ppLoss = 1;
					
					gBattleScriptCurrInstr = BattleScript_MonMadeMoveUseless - ppLoss;
				}
				else
				{
					damage = gBattleMons[battler].maxHP / 4;
					
					if(damage == 0)
						damage = 1;
					
					gBattleMoveDamage = -damage;
				}
			}
		}
		
		break
	case ABILITYEFFECT_CONTACT:
		if(!(gMoveResultFlags & RESULT_NO_EFFECT) && (gBattleMons[gBattlerAttacker].ability == 0x97 || (gBattleMons[move].9 & 1) || !(gBattleMons[gBattlerTarget].status2 & STATUS2_SUBSTITUTE)) && TARGET_TURN_DAMAGED)
		{
			switch(gLastUsedAbility)
			{
			case ABILITY_COLOR_CHANGE:
				if(gBattleMons[gBattlerTarget].hp != 0)
				{
					if(move != MOVE_STRUGGLE && !IS_BATTLER_OF_TYPE(battler, moveType))
					{
						SET_BATTLER_TYPE(battler, moveType);
						PREPARE_TYPE_BUFFER(gBattleTextBuff1, moveType);
						gBattleScripting.battler = gBattlerTarget;
						battleScript = BattleScript_ColorChangeActivates;
						goto lbl144
					}
					
					goto lbl145
				}
				
				break
			case ABILITY_ANGER_POINT:
				if(gBattleMons[gBattlerTarget].hp != 0)
				{
					if(gCritMultiplier == 2 && gBattleMons[gBattlerTarget].statStages[STAT_ATK] != 0xC)
					{
						gBattleMons[gBattlerTarget].statStages[STAT_ATK] = 0xC;
						sSTATCHANGER = 0x61; // +6 Attack
						battleScript = BattleScript_AngerPointActivates;
						goto lbl144
					}
					
					goto lbl145
				}
				
				break
			case 0x85:
				if(gBattleMoves[move].0xA & 2)
				{
					firstBoost = 0x92; // -1 Defense
					secondBoost = 0x93; // -1 Speed
					battleScript = BattleScript_AbilityTwoStatBoosts;
					goto lbl137
				}
				
				break
			case 0xC0:
				firstBoost = 0x12; // +1 Defense
				goto lbl136
			case 0xC3:
				if(moveType == TYPE_ELECTRIC)
				{
					firstBoost = 0x22; // +2 Defense
					goto lbl136
				}
				
				break
			case ABILITY_JUSTIFIED:
				if(moveType == TYPE_DARK)
				{
					firstBoost = 0x11; // +1 Attack
					goto lbl136
				}
				
				break
			case ABILITY_RATTLED:
				if(moveType == TYPE_BUG || moveType == TYPE_GHOST || moveType == TYPE_DARK)
				{
					firstBoost = 0x13; // +1 Speed
					goto lbl136

					lbl136:
					secondBoost = 0;
					battleScript = BattleScript_AbilityStatBoost;
					goto lbl137

					lbl137:
					if(gBattleMons[gBattlerTarget].hp != 0)
					{
						sSTATCHANGER = firstBoost;
						sSECOND_STATCHANGER = secondBoost;
						goto lbl144
					}
				}
				
				break
			case ABILITY_CURSED_BODY:
				if(gBattleMons[gBattlerAttacker].hp != 0 && (Random() % 3) == 0)
				{
					move = 0;
					
					while(gBattleMons[gBattlerAttacker].0xC[move] != gChosenMove)
					{
						move++;
						if(move > 3)
							goto lblend
					}
					
					if(gDisableStructs[gBattlerAttacker].disabledMove == 0 && gBattleMons[gBattlerAttacker].pp[move] != 0)
					{
						gBattleTextBuff1[0] = 0xFD
						gBattleTextBuff1[1] = 2
						gBattleTextBuff1[2] = gBattleMoves[move].type
						gBattleTextBuff1[4] = 0xFF
						gDisableStructs[gBattlerAttacker].disabledMove = move;
						gDisableStructs[gBattlerAttacker].disableTimer = 0x44;
						gBattleCommunication[MULTISTRING_CHOOSER] = 8;
						battleScript = script_1A5C9_J
						goto lbl144
						
						lbl144:
						BattleScriptPushCursor();
						gBattleScriptCurrInstr = battleScript;
						effect++;
					}
				}
				
				break;
			default:
				lbl145:
				if((gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && gBattleMons[gBattlerAttacker].ability != 0xCB && gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg)
				{
					switch(gLastUsedAbility)
					{
					case ABILITY_ROUGH_SKIN:
					case ABILITY_IRON_BARBS:
						if(gBattleMons[gBattlerAttacker].ability != ABILITY_MAGIC_GUARD)
						{
							damage = gBattleMons[gBattlerAttacker].maxHP / 8;
							
							if(damage == 0)
								damage = 1;
							
							gBattleMoveDamage = damage;
							battleScript = BattleScript_RoughSkinActivates;
							goto lbl160
						}
						
						break
					case ABILITY_MUMMY:
						if(gBattleMons[gBattlerAttacker].ability != ABILITY_MUMMY)
						{
							gBattleMons[gBattlerAttacker].ability = ABILITY_MUMMY;
							gBattleCommunication[MULTISTRING_CHOOSER] = 9;
							battleScript = script_1A5C9_J
							goto lbl160
						}
						
						break
					case 0xB0:
					case 0xDD:
						if(gBattleMons[gBattlerAttacker].ability != ABILITY_CLEAR_BODY && gBattleMons[gBattlerAttacker].ability != ABILITY_WHITE_SMOKE && gSideTimers[gBattlerAttacker & 1].mistTimer == 0 && fn_27612_J(gBattlerAttacker) != 0xB6)
						{
							sSTATCHANGER = 0x93; // -1 Speed
							battleScript = script_19E68_J
							goto lbl160
						}
						
						break
					case ABILITY_AFTERMATH:
						if(gBattleMons[gBattlerTarget].hp == 0 && !AbilityBattleEffects(0x13, 0, ABILITY_DAMP, 0, 0) && gBattleMons[gBattlerAttacker].ability != ABILITY_MAGIC_GUARD)
						{
							damage = gBattleMons[gBattlerAttacker].maxHP / 4;
							
							if(damage == 0)
								damage = 1;
							
							gBattleMoveDamage = damage;
							battleScript = script_19E88_J
							goto lbl160

							lbl160:
							BattleScriptPushCursor();
							gBattleScriptCurrInstr = battleScript;
							effect++;
						}
						
						break;
					case ABILITY_EFFECT_SPORE:
						if(gBattleMons[gBattlerAttacker].ability != 0x8E && !IS_BATTLER_OF_TYPE(gBattlerAttacker, TYPE_GRASS) && (gBattleMons[gBattlerAttacker].ability == ABILITY_KLUTZ || GetHoldEffect(gBattleMons[gBattlerAttacker].item) != ITEM_EFFECT_SAFETY_GOGGLES) && (Random() % 10) == 0)
						{
							moveEffect = Random() % 3;
							
							if(moveEffect == 0)
								moveEffect = MOVE_EFFECT_PARALYSIS;
							
							moveEffect += MOVE_AFFECTS_USER;
							goto lbl171
						}
						
						break
					case ABILITY_POISON_POINT:
						moveEffect = MOVE_AFFECTS_USER | MOVE_EFFECT_POISON;
						goto lbl170
					case ABILITY_STATIC:
						moveEffect = MOVE_AFFECTS_USER | MOVE_EFFECT_PARALYSIS;
						goto lbl170
					case ABILITY_FLAME_BODY:
						moveEffect = 0x43; MOVE_AFFECTS_USER | MOVE_EFFECT_BURN;
						goto lbl170
						
						lbl170:
						if((Random() % 3) == 0)
						{
							lbl171:
							gBattleCommunication[MOVE_EFFECT_BYTE] = moveEffect;
							BattleScriptPushCursor();
							gBattleScriptCurrInstr = BattleScript_ApplySecondaryEffect;
							gHitMarker |= HITMARKER_IGNORE_SAFEGUARD;
							effect++;
						}
						
						break
					case ABILITY_CUTE_CHARM:
						if(gBattleMons[gBattlerTarget].hp != 0 && (Random() % 3) == 0 && gBattleMons[gBattlerAttacker].ability != ABILITY_OBLIVIOUS)
						{
							atkGender = GetGenderFromSpeciesAndPersonality(speciesAtk, pidAtk)
							
							if(atkGender != 0xFF)
							{
								defGender = GetGenderFromSpeciesAndPersonality(speciesDef, pidDef)
								
								if(defGender != 0xFF && atkGender != defGender && !(gBattleMons[gBattlerAttacker].status2 & STATUS2_INFATUATION))
								{
									gBattleMons[gBattlerAttacker].status2 |= STATUS2_INFATUATED_WITH(gBattlerTarget);
									BattleScriptPushCursor();
									gBattleScriptCurrInstr = BattleScript_CuteCharmActivates;
									effect++;
								}
							}
						}
					}
				}
			}
		}

		break
	case ABILITYEFFECT_IMMUNITY:
		for(battler = 0; battler < gBattlersCount; battler++)
		{
			switch(gBattleMons[battler].ability)
			{
			case ABILITY_IMMUNITY:
				statusToCheck = (STATUS1_POISON | STATUS1_TOXIC_POISON);
				conditionString = gStatusConditionString_PoisonJpn;
				goto lbl188
			case ABILITY_OWN_TEMPO:
				if(gBattleMons[battler].status2 & STATUS2_CONFUSION)
				{
					conditionString = gStatusConditionString_ConfusionJpn;
					statusToRemove = STATUS2_CONFUSION;
					goto lbl192
				}
				
				break
			case ABILITY_LIMBER:
				statusToCheck = STATUS1_PARALYSIS;
				conditionString = gStatusConditionString_ParalysisJpn;
				goto lbl188
			case ABILITY_INSOMNIA:
			case ABILITY_VITAL_SPIRIT:
			case 0xAD:
				lbl183:
				conditionString = gStatusConditionString_SleepJpn;
				
				if(gBattleMons[battler].status1 & STATUS1_SLEEP)
				{
					gBattleMons[battler].status2 &= ~(STATUS2_NIGHTMARE);
					gBattleMons[battler].status1 = 0;
					goto lbl193
				}
				
				break
			case ABILITY_WATER_VEIL:
				statusToCheck = STATUS1_BURN;
				conditionString = gStatusConditionString_BurnJpn;
				goto lbl188
			case ABILITY_MAGMA_ARMOR:
				statusToCheck = STATUS1_FREEZE;
				conditionString = gStatusConditionString_IceJpn;
				goto lbl188
				
				lbl188:
				if(gBattleMons[battler].status1 & statusToCheck)
				{
					gBattleMons[battler].status1 = 0;
					goto lbl193
				}
				
				break
			case ABILITY_OBLIVIOUS:
				if(gBattleMons[battler].status2 & STATUS2_INFATUATION) 
				{
					conditionString = gStatusConditionString_LoveJpn;
					statusToRemove = STATUS2_INFATUATION;
					goto lbl192

					lbl192:
					gBattleMons[battler].status2 &= ~(statusToRemove);
					goto lbl193
					
					lbl193:
					StringCopy(gBattleTextBuff1, conditionString);
					effect = 1;
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_AbilityCuredStatus;
					gBattleScripting.battler = battler;
					gActiveBattler = battler;
					EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, &gBattleMons[battler].status1);
					MarkBattlerForControllerExec(battler);
					return effect;
				}
				
				break
			default:
				if(fn_196D4_J(battler, 0xAD) != 0)
					goto lbl183
		}

		break;
	...
	case ABILITYEFFECT_ADDED_EFFECT_CHANCE:	
		if(!(gMoveResultFlags & RESULT_NO_EFFECT) && !(gBattleMons[gBattlerTarget].status2 & STATUS2_SUBSTITUTE) && TARGET_TURN_DAMAGED && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && gBattleMons[gBattlerTarget].hp != 0)
		{
			chanceNumerator = 1; // 10% chance
			
			if(gLastUsedAbility == 0x8F)
			{
				moveEffect = MOVE_EFFECT_POISON;
				chanceNumerator = 3; // 30% chance
			}
			elseif(gLastUsedAbility == 1)
			{
				moveEffect = MOVE_EFFECT_FLINCH;
				chanceNumerator = 1; // 10% chance
			}
			
			if((Random() % 10) < chanceNumerator)
			{
				gBattleCommunication[MOVE_EFFECT_BYTE] = moveEffect;
				BattleScriptPushCursor();
				gBattleScriptCurrInstr = BattleScript_AbilityCuredStatus;
				gHitMarker |= HITMARKER_IGNORE_SAFEGUARD;
				effect++;
			}
		}
	}

	lblend:
	if(effect && caseID <= ABILITYEFFECT_CHECK_OTHER_SIDE && gLastUsedAbility != 0xFF)
		RecordAbilityBattle(battler, gLastUsedAbility);
}

return effect;

fn_14734_J(arg1, arg2)
{
	s2 = 0
	r10 = 0
	r7 = 0
	goto lbl2

	lbl2:
	if((arg1 & 1) != (r7 & 1))
	{
		if(arg2 == 0x58)
		{
			if(gBattleMons[r7].4 == 0)
				goto lbl13

			r0 = 0x11
			
			if(gBattleMons[r7].4 > gBattleMons[r7].0xA)
				r0 = 0x14
			
			return r0
		}
		elseif(arg2 == 0x77)
		{
			r0 = gBattleMons[r7].item
			
			if(r0 != 0)
				return r0

			goto lbl13
		}

		r6 = 0xC
		goto lbl3

		lbl3:
		r0 = gBattleMons[r7].(r6)
		r2 = &gBattleMoves[r0]
		r1 = gBattleMoves[r0]
		
		if(r1 == 0x26)
			return r0
		
		if(arg2 == 0x6C)
		{
			if(r10 <= gBattleMoves[r0].power)
			{
				r10 = gBattleMoves[r0].power
				goto lbl9

				lbl9:
				s2 = gBattleMons[r7].(r6)
			}

			lbl10:
			r6 += 2
			
			if(r6 < 12)
				goto lbl3

			goto lbl13
		}
		
		if(gBattleMoves[r0] == 7)
			return r0
		
		r10 = 0

		for(r5 = 0; data_0824F050[r5] != 0xFF; r5 += 3)
		{
			if(r0 == gBattleMoves[r0].type && !IS_BATTLER_OF_TYPE(arg1, data_0824F050[r5].1))
			{
				if(data_0824F050[r5].2 < 0xA)
					goto lbl10
				
				r10 = 1
			}
		}
		
		if(r10 == 0)
			goto lbl10

		goto lbl9
	}

	lbl13:
	r7++
	
	if(r7 < gBattlersCount)
		goto lbl2
	
	return s2
}

fn_196D4_J(arg1, arg2)
{
	for(r4 = 0; r4 < *gBattlersCount; r4++)
	{
		if(r4 != 0 && GetBattlerSide(r4) == GetBattlerSide(arg1) && gBattleMons[r4].ability == arg2)
		{
			gLastUsedAbility = arg2
			return r4 + 1
		}
	}
	
	return 0
}

fn_1EB68_J(arg1, arg2)
{
	if(gCurrentMove[arg1].ability != ABILITY_KLUTZ && GetHoldEffect(gBattleMons[arg1].item) == 0x4B && GetHoldEffectParam(gBattleMons[arg1].item) & arg2)
		return 8
	else
		return 5
}

fn_27612_J(arg1)
{
	if(gBattleMons[gBattlerAttacker].ability != ABILITY_MOLD_BREAKER && gBattleMons[gBattlerAttacker].ability - 0xA3 >= 1)
	{
		if(IS_BATTLER_OF_TYPE(arg1, 0xC) && (gBattleMons[arg1].ability == 0xB6 || fn_196D4_J(arg1, 0xB6) != 0))
			return 0xB6
		elseif(gBattleMons[arg1].ability == 0x66 && (gBattleWeather & 0x30)
			return 0x66
	}
	
	return 0
}


BattleScript_SnowWarningActivates: @19AA4_J
(39 20 00 10 EB 00 3A 45 07 0D 00 00 00 00 41 98 D2 1B 08 3F) = 
(39 20 00 10 EB 00 3A 45 07 0D 00 00 00 00 41 DC 92 1D 08 3F)
pause 0x20
printstring 0xEB // STRINGID_DOWNPOURCONTINUES -> STRINGID_PKMNMADEITHAIL
waitstate
playanimation BS_BATTLER_0, B_ANIM_HAIL_CONTINUES, NULL
call BattleScript_WeatherFormChanges
end3

BattleScript_ImposterActivates: @19AB8_J
(9B 29 00 E7 3D 02 02 01 CE 9A 01 08 09 0A 13 80 45 3C 08 12 40 00 3F) = 
(9B 29 00 87 3E 02 02 01 XX XX XX 08 09 0A 13 B4 E5 3F 08 12 40 00 3F)
transformdataexecution
jumpifbyte CMP_EQUAL, cMULTISTRING_CHOOSER, 1, BattleScript_ImposterEnd
attackanimation
waitanimation
printfromtable gTransformUsedStringIds
waitmessage 0x40

BattleScriptImposterEnd:
end3

BattleScript_AbilityTwoStatBoostsActivate: @19AD0_J
(41 10 9E 01 08 3F) = 
(41 XX XX XX 08 3F)
call BattleScript_AbilityTwoStatBoosts
end3

BattleScript_AbilityStatBoostActivates: @19AD6_J
(41 39 9E 01 08 3F) = 
(41 XX XX XX 08 3F)
call BattleScript_AbilityStatBoost
end3

BattleScript_AbilityTwoStatBoosts: @19E10_J
(89 01 2F 9E 01 08 29 00 E7 3D 02 02 02 2F 9E 01 08 47 45 00 01 34 3F 02 02 10 C2 00 12 40 00 31 3E 3F 02 02 3F 3F 02 02 01) = 
(89 01 XX XX XX 08 29 00 87 3E 02 02 02 XX XX XX 08 47 45 00 01 D4 3F 02 02 10 C2 00 12 40 00 31 DE 3F 02 02 DF 3F 02 02 01)
statbuffchange 0x1, BattleScript_AbilityTwoStatBoosts_SecondBoost
jumpifbyte CMP_EQUAL, cMULTISTRING_CHOOSER, 2, BattleScript_AbilityTwoStatBoosts_SecondBoost
setgraphicalstatchangevalues
playanimation BS_ATTACKER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printstring STRINGID_PKMNRAISEDSPEED???
waitmessage 0x40

BattleScript_AbilityTwoStatBoosts_SecondBoost:
copybyte sSTATCHANGER, sSECOND_STATCHANGER
goto BattleScript_AbilityStatBoost

BattleScript_AbilityStatBoost: @19E39_J
(89 01 58 9E 01 08 29 00 E7 3D 02 02 02 58 9E 01 08 47 45 00 01 34 3F 02 02 10 C2 00 12 40 00 3C) = 
(89 01 XX XX XX 08 29 00 87 3E 02 02 02 XX XX XX 08 47 45 00 01 D4 3F 02 02 10 C2 00 12 40 00 3C)
statbuffchange 0x1, BattleScript_AbilityStatBoostEnd
jumpifbyte CMP_EQUAL, cMULTISTRING_CHOOSER, 2, BattleScript_AbilityStatBoostEnd
setgraphicalstatchangevalues
playanimation BS_ATTACKER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printstring STRINGID_PKMNRAISEDSPEED???
waitmessage 0x40

BattleScript_AbilityStatBoostEnd:
return

BattleScript_AngerPointActivates: @19E59_J
(47 45 00 01 34 3F 02 02 10 92 01 12 40 00 3C) = 
(47 45 00 01 D4 3F 02 02 10 92 01 12 40 00 3C)
setgraphicalstatchangevalues
playanimation BS_ATTACKER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printstring STRINGID_ANGERPOINTMAXIMIZED
waitmessage 0x40
return

script_19E68_J:
(89 41 87 9E 01 08 29 00 E7 3D 02 02 02 87 9E 01 08 47 45 01 01 34 3F 02 02 10 96 01 12 40 00 3C) = 
(89 41 XX XX XX 08 29 00 87 3E 02 02 02 XX XX XX 08 47 45 01 01 D4 3F 02 02 10 96 01 12 40 00 3C)
statbuffchange MOVE_EFFECT_AFFECTS_USER | 0x1, BattleScript_???End
jumpifbyte CMP_EQUAL, cMULTISTRING_CHOOSER, 2, BattleScript_???End
setgraphicalstatchangevalues
playanimation BS_TARGET, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printstring 0x196
waitmessage 0x40

BattleScript_???End:
return

script_19E88_J:
(35 30 3D 02 02 00 01 10 00 0B 01 0C 01 10 95 01 12 40 00 19 01 00 00 00 00 00 3C) = 
(35 D0 3D 02 02 00 01 10 00 0B 01 0C 01 10 95 01 12 40 00 19 01 00 00 00 00 00 3C)
orword gHitMarker, HITMARKER_IGNORE_SUBSTITUTE | HITMARKER_x100000
healthbarupdate BS_TARGET
datahpupdate BS_TARGET
printstring 0x195
waitmessage 0x40
tryfaintmon BS_TARGET, FALSE, NULL
return

BattleScript_ImmunityBoostAbilityActivate: @1A005_J
(02 89 01 0A A9 1B 08 29 01 E7 3D 02 02 02 25 A0 01 08 39 20 00 10 47 01 12 40 00 28 0A A9 1B 08 47 45 00 01 34 3F 02 02 10 C2 00 12 40 00 28 0A A9 1B 08) = 
(02 89 01 ?? ?? ?? 08 29 01 87 3E 02 02 02 XX XX XX 08 39 20 00 10 47 01 12 40 00 28 0A A9 1B 08 47 45 00 01 D4 3F 02 02 10 C2 00 12 40 00 28 ?? ?? ?? 08)
attackstring
statbuffchange 0x1, BattleScript_MoveEnd
jumpifbyte CMP_NOT_EQUAL, cMULTISTRING_CHOOSER, 2, BattleScript_ImmunityBoostAbilityRaiseStat
pause 0x20
printstring STRINGID_PKMNSXMADEYUSELESS
waitmessage 0x40
goto BattleScript_MoveEnd

BattleScript_ImmunityBoostAbilityRaiseStat:
setgraphicalstatchangevalues
playanimation BS_ATTACKER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printstring STRINGID_PKMNRAISEDSPEED???
waitmessage 0x40
goto BattleScript_MoveEnd

script_1A5C0_J:
(13 D2 A5 01 08 12 40 00 3F) = 
(13 XX XX XX 08 12 40 00 3F)
printfromtable datatable_1A5D2_J
waitmessage 0x40
end3

script_1A5C9_J:
(13 D2 A5 01 08 12 40 00 3C) = 
(13 XX XX XX 08 12 40 00 3C)
printfromtable datatable_1A5D2_J
waitmessage 0x40
return

datatable_1A5D2_J:
85 01 86 01 87 01 88 01 89 01 8A 01 8B 01 8D 01 93 01 94 01
0: STRINGID_PKMNBREAKSTHEMOLD
1: 186
2: STRINGID_PKMNCANTGETITGOING
3: STRINGID_PKMNGOTITSACTTOGETHER
4: 189
5: 18A
6: 18B
7: 18D
8: STRINGID_CURSEDBODYDISABLED
9: STRINGID_ABILITYBECAMEMUMMY

script_1AA20_J:
(02 03 39 20 00 10 9C 01 12 40 00 28 0A A9 1B 08) = 
(02 03 39 20 00 10 9C 01 12 40 00 28 ?? ?? ?? 08)
attackstring
ppreduce
pause 0x20
printstring 0x19C
waitmessage 0x40
goto BattleScript_MoveEnd

script_1AA30_J:
(02 03 39 20 00 10 8C 01 12 40 00 28 0A A9 1B 08) = 
(02 03 39 20 00 10 8C 01 12 40 00 28 ?? ?? ?? 08)
attackstring
ppreduce
pause 0x20
printstring 0x18C
waitmessage 0x40
goto BattleScript_MoveEnd

BattleScript_GogglesDoSomething: @1AA40_J
(02 03 39 20 00 10 84 01 12 40 00 28 0A A9 1B 08) = 
(02 03 39 20 00 10 84 01 12 40 00 28 ?? ?? ?? 08)
attackstring
ppreduce
pause 0x20
printstring STRINGID_GOGGLESBLOCKMOVE
waitmessage 0x40
goto BattleScript_MoveEnd