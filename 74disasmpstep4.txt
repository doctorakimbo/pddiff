if(availableToSwitch == 0)
	return FALSE;
if(ShouldSwitch_NewAI())
	return TRUE;
if(ShouldSwitchIfPerishSong())
	return TRUE;
if(ShouldSwitchIfWonderGuard())
	return TRUE;
if(FindMonThatAbsorbsOpponentsMove())
	return TRUE;
if(ShouldSwitchIfNaturalCure())
	return TRUE;
if(HasSuperEffectiveMoveAgainstOpponents(FALSE))
	return FALSE;
if(AreStatsRaised())
	return FALSE;
if(!CanUseNewAI())
	return FALSE;
if(FindMonWithFlagsAndSuperEffective(MOVE_RESULT_DOESNT_AFFECT_FOE, 2) || FindMonWithFlagsAndSuperEffective(MOVE_RESULT_NOT_VERY_EFFECTIVE, 3))
	return TRUE;
	
return FALSE;








ShouldSwitch_NewAI() @251E40_J
{
	data_0203B965 = 1

	if(!CanUseNewAI())
		return FALSE;
	if(ShouldSwitchIfLockedMoveOrRegenerator())
		return TRUE;
	if(ShouldSwitchIfCurseOrYawn())
		return TRUE;
	if(ShouldSwitchIfTrickRoom())
		return TRUE;
	if(ShouldSwitchIfWeatherTeam())
		return TRUE;
	if(ShouldSwitchIfMightBeDoubleTargeted())
		return TRUE;
	if(ShouldSwitchIfStallMon())
		return TRUE;
		
	return FALSE;
}








ShouldSwitchIfLockedMoveOrRegenerator() @251E8C_J
{
	if(gBattleMons[gActiveBattler].ability == ABILITY_REGENERATOR)
	{
		// 50% chance to switch if less than half HP and has Regenerator
		if(gBattleMons[gActiveBattler].hp > (gBattleMons[gActiveBattler].maxHP / 2))
			return FALSE;
		if(Random() & 1 == 0)
			return FALSE;
	}
	else
	{
		if(gBattleStruct->choicedMove[gActiveBattler])
			lockedMove = gBattleStruct->choicedMove[gActiveBattler];
		elseif(gDisableStructs[gActiveBattler].encoredMove)
			lockedMove = gDisableStructs[gActiveBattler].encoredMove;
		else
			return FALSE;
		
		if(gBattleMoves[lockedMove].power != 0)
		{
			for(i = 0; i < 4; i++)
			{
				if(lockedMove == gBattleMons[gActiveBattler].moves[i])
				{
					// 94% chance to switch if locked into move that opponents resist
					if(gBattleMons[gActiveBattler].pp[i] != 0 && (!(AI_TypeCalc(i, gBattleMons[B_POSITION_PLAYER_LEFT].species, gBattleMons[B_POSITION_PLAYER_LEFT].ability) & (MOVE_RESULT_NOT_VERY_EFFECTIVE | MOVE_RESULT_DOESNT_AFFECT_FOE)) || gBattleMons[B_POSITION_PLAYER_LEFT].hp == 0))
					{	
						if(gBattleMons[B_POSITION_PLAYER_RIGHT].hp == 0)
							return FALSE;
						if(!(AI_TypeCalc(i, gBattleMons[B_POSITION_PLAYER_RIGHT].species, gBattleMons[B_POSITION_PLAYER_LEFT].ability) & (MOVE_RESULT_NOT_VERY_EFFECTIVE | MOVE_RESULT_DOESNT_AFFECT_FOE)))
							return FALSE;
					}
					
					break;
				}
			}
		}
		
		if(Random() & 0xF == 0)
			return FALSE;
	}
	
	chosenMon = GetMonThatCanWithstandBiggestAttack(GetAITarget(), gActiveBattler)
	
	if(chosenMon == PARTY_SIZE)
	{
		chosenMon = GetSlowMonWithLowHP()
		
		if(chosenMon == PARTY_SIZE)
		{
			{score, chosenMon} = GetBestMatchupScore(gBattleMons[B_POSITION_PLAYER_LEFT].species, gBattleMons[B_POSITION_PLAYER_RIGHT].species, TRUE);
			
			if(score >= 15) // player mons' types are SE on AI's whole team - don't even bother
				return FALSE;
		}
	}
	
	gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMon;
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








ShouldSwitchIfCurseOrYawn() @251FD0_J
{
	// 75% chance to switch if affected by Curse or Yawn
	if(!(gBattleMons[gActiveBattler].status2 & STATUS2_CURSED) && !(gStatuses3[gActiveBattler] & STATUS3_YAWN))
		return FALSE;
	if(Random() & 3 == 0)
		return FALSE;

	chosenMon = GetMonThatCanWithstandBiggestAttack(GetAITarget(), gActiveBattler);
	
	if(chosenMon == PARTY_SIZE)
		chosenMon = GetSlowMonWithLowHP()
	
	gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMon;
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








ShouldSwitchIfTrickRoom() @205F48_J
{
	if(gTrickRoomActive)
	{
		// Don't switch if it can deal good damage
		if(CanDoSevereDamage(gActiveBattler, GetAITarget(), CHECK_HALF_MAX_HP))
			return FALSE;
		
		if(gBattleMons[gActiveBattler].attack < gBattleMons[gActiveBattler].spAttack)
			highestAttackingStat = gBattleMons[gActiveBattler].spAttack;
		else
			highestAttackingStat = gBattleMons[gActiveBattler].attack;
		
		// Don't switch if attacking stat is high
		if(highestAttackingStat >= 140)
			return FALSE;

		{otherMonsHighestAttackingStat, chosenMon} = GetBestTrickRoomAttacker();
		
		// Don't switch if there's no good Trick Room attackers on team
		if(otherMonsHighestAttackingStat < 140)
			return FALSE;
		
		// 12% chance to not switch
		if(Random() & 7 == 0)
			return FALSE;
		
		// 87% chance not to switch if last used move is SE on chosen mon
		if(IsMoveSuperEffective(chosenMon, gLastMoves[GetAITarget()]) && (Random() & 7) != 0)
			return FALSE;
		
		gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMon;
		BtlController_EmitTwoReturnValues(1, 2, 0)
		return TRUE;
	}
	else
		return FALSE;
}








ShouldSwitchIfWeatherTeam() @205FDE_J
{
	chosenMon = GetAvailableWeatherSetter();
	
	if(chosenMon == PARTY_SIZE)
	{
		ability = gBattleMons[gActiveBattler].ability;
		
		if(ability == ABILITY_DRIZZLE)
			weather = WEATHER_RAIN_ANY;
		elseif(ability == ABILITY_SAND_STREAM)
			weather = WEATHER_SAND_ANY;
		elseif(ability == ABILITY_DROUGHT)
			weather = WEATHER_SUN_ANY;
		elseif(ability == ABILITY_SNOW_WARNING)
			weather = WEATHER_HAIL_ANY;
		else
			return FALSE;
		
		if(gBattleWeather & weather)
			return FALSE;
		
		// Switch weather setter out if the weather ran out
		{NULL, chosenMon} = GetBestMatchupScore(gBattleMons[B_POSITION_PLAYER_LEFT].species, gBattleMons[B_POSITION_PLAYER_RIGHT].species, 1)
	}
	else
	{
		// 87% chance to not switch if the current mon can KO
		if(Random() & 7 != 0)
		{
			if(CanDoSevereDamage(gActiveBattler, B_POSITION_PLAYER_LEFT, CHECK_IF_KO))
				return FALSE;
			if(CanDoSevereDamage(gActiveBattler, B_POSITION_OPPONENT_LEFT, CHECK_IF_KO)) // should be B_POSITION_PLAYER_RIGHT
				return FALSE;
		}
		
		// 75% chance to switch to the weather setter if the weather ran out
		if(!(gBattleWeather & WEATHER_ANY) && (Random() & 3) == 0)
			return FALSE;
	}
	
	// 17% chance to not switch
	if(Random() % 6 == 0) 
		return FALSE;

	gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMon;
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








ShouldSwitchIfMightBeDoubleTargeted() @252058_J
{
	opposingMons = 0;
	goodMoves = 0;
	bestMoveOnAIActiveMon[B_POSITION_PLAYER_LEFT] = MOVE_NONE;
	bestMoveOnAIActiveMon[B_POSITION_PLAYER_RIGHT] = MOVE_NONE;
	
	// Don't bother switching if slow and weakened
	if((100 * ((gBattleMons[gActiveBattler].speed - 5) / gBattleMons[gActiveBattler].level)) < 290 && gBattleMons[gActiveBattler].hp <= (gBattleMons[gActiveBattler].maxHP / 2))
		return FALSE;

	for(i = B_POSITION_PLAYER_LEFT; i != 4; i += BIT_FLANK)
	{
		if(gBattleMons[i].hp == 0)
			continue;

		opposingMons++;
		chosenMove = MOVE_NONE;
		
		if(!IsMonFasterThan(gActiveBattler, i))
		{
			// If player is faster, player can't KO AI, and (player doesn't have severely damaging move on AI, or AI can KO player), disregard player mon
			if(!CanDoSevereDamage(i, gActiveBattler, CHECK_IF_KO))
			{
				{willSeverelyDamageThisMon, chosenMove} = CanDoSevereDamage(i, gActiveBattler, CHECK_HALF_MAX_HP)
				
				if(!willSeverelyDamageThisMon)
					continue;
				if(CanDoSevereDamage(gActiveBattler, i, CHECK_IF_KO))
					continue;
			}
		}
		else
		{
			// If AI is faster and can KO player mon, disregard player mon
			if(CanDoSevereDamage(gActiveBattler, i, CHECK_IF_KO))
				continue;

			// If AI is faster, player can't KO AI, and (AI has severely damaging move on player, or player doesn't have severely damaging move on AI), disregard player mon
			if(!CanDoSevereDamage(i, gActiveBattler, CHECK_IF_KO))
			{
				if(CanDoSevereDamage(gActiveBattler, i, CHECK_HALF_MAX_HP))
					continue;
				
				{willSeverelyDamageThisMon, chosenMove} = CanDoSevereDamage(i, gActiveBattler, CHECK_HALF_MAX_HP)
				
				if(!willSeverelyDamageThisMon)
					continue;
			}
		}
		
		bestMoveOnAIActiveMon[i] = chosenMove;
		goodMoves++;
	}
	
	// If two opponents that are both threatening, 33% chance to switch; otherwise never switch
	if((Random() % (opposingMons + 1)) + 1 > goodMoves)
		return FALSE;
	
	if(bestMoveOnAIActiveMon[B_POSITION_PLAYER_LEFT] != MOVE_NONE)
		bestMove = bestMoveOnAIActiveMon[B_POSITION_PLAYER_LEFT]
	elseif(bestMoveOnAIActiveMon[B_POSITION_PLAYER_RIGHT] != MOVE_NONE)
		bestMove = bestMoveOnAIActiveMon[B_POSITION_PLAYER_RIGHT]
	else
		return FALSE;

	for(i = 0; i < PARTY_SIZE; i++)
	{
		i = GetFirstAllowableSwitchin(i, TRUE);
		
		if(i == PARTY_SIZE)
			break;
		
		// switch to a mon that's immune to the threatening move
		if(AI_TypeCalc(bestMove, GetMonData(gEnemyParty[i], MON_DATA_SPECIES), GetMonAbility(gEnemyParty[i])) & MOVE_RESULT_DOESNT_AFFECT_FOE)
			goto lbl12
	}
	
	for(i = 0; i < PARTY_SIZE; i++)
	{
		i = GetFirstAllowableSwitchin(i, TRUE)
		
		if(i == PARTY_SIZE)
			return FALSE;

		hp = GetMonData(gEnemyParty[i], MON_DATA_HP)
		
		// don't switch to a mon with 1 HP or one that holds Focus Sash
		// Should have been GetHoldEffect, not GetHoldEffectParam
		if(hp > (hp / 4) && (hp != GetMonData(gEnemyParty[i], MON_DATA_MAX_HP) || GetHoldEffectParam(GetMonData(gEnemyParty[i], MON_DATA_HELD_ITEM)) != 0x43))
		{
			if(AI_TypeCalc(bestMove, GetMonData(gEnemyParty[i], MON_DATA_SPECIES), GetMonAbility(gEnemyParty[i])) & MOVE_RESULT_NOT_VERY_EFFECTIVE)
				goto lbl12
		}
	}
	
	return FALSE;

	// (100 - (data_0203B960_J * 6))% chance to switch
	lbl12:
	if((Random() % 16) <= data_0203B960_J)
		return FALSE;

	gBattleStruct->monToSwitchIntoId[gActiveBattler] = i;
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








ShouldSwitchIfStallMon() @2064C6_J
{
	stallableMons = 0;
	
	// Don't bother switching if slow and weakened
	if((100 * ((gBattleMons[gActiveBattler].speed - 5) / gBattleMons[gActiveBattler].level)) < 290 && gBattleMons[gActiveBattler].hp <= (gBattleMons[gActiveBattler].maxHP / 2))
		return FALSE;

	for(i = B_POSITION_PLAYER_LEFT; i != 4; i += BIT_FLANK)
	{
		// Don't switch if active mon has healing move
		if(HasHealingMove(gActiveBattler))
			continue;
		
		if(!HasHealingMove(i))
		{
			// If player can't heal and (player has severely damaging move on AI, AI has severely damaging move on player, or AI has damaging move at all), disregard player mon
			if(CanDoSevereDamage(i, gActiveBattler, CHECK_HALF_MAX_HP))
				continue;
			
			{doesGoodDamage, damage} = CanDoSevereDamage(gActiveBattler, i, CHECK_HALF_MAX_HP)
			
			if(doesGoodDamage)
				continue;
			if(damage > 0)
				continue;
		}
		// If player can heal and AI has severely damaging move on player, disregard this mon
		elseif(CanDoSevereDamage(gActiveBattler, i, CHECK_HALF_MAX_HP))
			continue;
		
		stallableMons++;
	}
	
	// Don't switch if no stallable mons
	if(stallableMons < 1)
		return FALSE;

	chosenMon = GetGoodStallMon(gActiveBattler, GetAITarget());
	
	// Don't switch if stallmon has low HP
	if(chosenMon == PARTY_SIZE)
		return FALSE;
	if(GetMonData(gEnemyParty[chosenMon], MON_DATA_HP) <= (GetMonData(gEnemyParty[chosenMon], MON_DATA_MAX_HP) / 4))
		return FALSE;
		
	// (100 - (data_0203B960_J * 6))% chance to switch to stallmon
	if((Random() % 16) <= data_0203B960_J)
		return FALSE;

	gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMon;
	BtlController_EmitTwoReturnValues(1, 2, 0)
	return TRUE;
}








GetAITarget() @2060C0_J
{
	r4 = 0
	
	if(gBattleMons[B_POSITION_PLAYER_LEFT].hp != 0)
		r4 |= 1
	
	if(gBattleMons[B_POSITION_PLAYER_RIGHT].hp != 0)
		r4 |= 2
	
	if(r4 == 3)
		r0 = Random() & 1 // INCORRECT VARIABLE
	elseif(r4 == 1)
		r4--
	
	return r4
	// returns:
		if r4 = 0, B_POSITION_PLAYER_LEFT
		if r4 = 1, B_POSITION_PLAYER_LEFT
		if r4 = 2, B_POSITION_PLAYER_RIGHT
		if r4 = 3, B_POSITION_OPPONENT_RIGHT // should be random B_POSITION_PLAYER_LEFT or B_POSITION_PLAYER_RIGHT
}








GetMonThatCanWithstandBiggestAttack(attacker, defender) @205C80_J
{
	party = GetSideParty(attacker & BIT_SIDE);
	CopyBytes(&gBackupMonData, &gBattleMons[defender], 0x58);
	
	for(i = 0; i < PARTY_SIZE; i++)
	{
		i = GetFirstAllowableSwitchin(i, TRUE)
		
		if(i == PARTY_SIZE)
			break;
		
		CopyMonToBattleMon(&gBattleMons[defender], &party[i])
		
		if(!CanDoSevereDamage(attacker, defender, CHECK_HALF_MAX_HP))
			break;
	}
	
	CopyBytes(&gBattleMons[defender], &gBackupMonData, 0x58);
	return i;
}








GetSlowMonWithLowHP() @20621C_J
{
	for(i = 0; i < PARTY_SIZE; i++)
	{
		i = GetFirstAllowableSwitchin(i, TRUE);
		
		if(i == PARTY_SIZE)
			break;
		
		// incorrectly compares stat speed to base speed?
		if(gBattleMons[B_POSITION_PLAYER_LEFT].species != 0 && GetMonData(gEnemyParty[i], MON_DATA_SPEED) > gBaseStats[gBattleMons[B_POSITION_PLAYER_LEFT].species].baseSpeed + 32)
			continue;
		if(gBattleMons[B_POSITION_PLAYER_RIGHT].species != 0 && GetMonData(gEnemyParty[i], MON_DATA_SPEED) > gBaseStats[gBattleMons[B_POSITION_PLAYER_RIGHT].species].baseSpeed + 32)
			continue;
		if(GetMonData(gEnemyParty[i], MON_DATA_HP) <= (GetMonData(gEnemyParty[i], MON_DATA_MAX_HP) / 2))
			break;
	}
	
	return i;
}








CanDoSevereDamage(attacker, target, threshold) @205E14_J
{
	maxDamage = 0;
	gBattlerAttacker = attacker;
	gBattlerTarget = target;

	for(i = 0; i < 4; i++)
	{
		if(gBattleMoves[gBattleMons[gBattlerAttacker].moves[i]].power <= 1)
			continue;

		gDynamicBasePower = 0;
		gBattleStruct->dynamicMoveType = 0;
		gBattleScripting.dmgMultiplier = 1;
		gMoveResultFlags = 0;
		gCritMultiplier = 1;
		gCurrentMove = gBattleMons[gBattlerAttacker].moves[i];
		AI_CalcDmg(gBattlerAttacker, gBattlerTarget, TRUE);
		TypeCalc(gCurrentMove, gBattlerAttacker, gBattlerTarget);
		
		effect = gBattleMoves[gBattleMons[gBattlerAttacker].moves[i]].effect;
		
		if(effect == EFFECT_MULTI_HIT)
			gBattleMoveDamage *= 4;
		elseif(effect == EFFECT_DOUBLE_HIT)
			gBattleMoveDamage *= 2;
		
		if(gBattleMoveDamage > maxDamage)
			maxDamage = gBattleMoveDamage;
		
		if(gBattleMoveDamage == 0)
			gBattleMoveDamage = 1;
		
		if(threshold = CHECK_HALF_MAX_HP)
			hpThreshold = gBattleMons[gBattlerTarget].maxHP / 2;
		else // CHECK_IF_KO
			hpThreshold = gBattleMons[gBattlerTarget].hp;
		
		if(gBattleMoveDamage > hpThreshold)
			return {TRUE, gBattleMons[gBattlerAttacker].moves[i]};
	}
	
	return {FALSE, 100 * (maxDamage / gBattleMons[gBattlerAttacker].maxHP)};
}








IsMoveSuperEffective(monIndex, move) @206418_J
{
	mon = gPlayerParty[monIndex];
	
	if(AI_TypeCalc(move, GetMonData(mon, MON_DATA_SPECIES), GetMonAbility(mon)) & MOVE_RESULT_SUPER_EFFECTIVE)
		return TRUE;
	else
		return FALSE;
}








IsMonFasterThan(mon1, mon2) @205EE8_J
{
	if(GetSpeedStat(mon2) < GetSpeedStat(mon1))
		return TRUE;
	else
		return FALSE;
}








HasHealingMove(mon) @2065CC_J
{
	for(i = 0; i < 4; i++)
	{
		effect = gBattleMoves[gBattleMons[mon].moves[i]].effect;

		if(effect == EFFECT_RESTORE_HP)
			return TRUE;
		if(effect == EFFECT_MORNING_SUN)
			return TRUE;
		if(effect == EFFECT_SOFTBOILED)
			return TRUE;
	}

	return FALSE:
}








GetGoodStallMon(AIMon, playerMon) @205CF6_J
{
	party = GetSideParty(AIMon & BIT_SIDE);
	CopyBytes(&gBackupMonData, &gBattleMons[AIMon], 0x58);

	for(i = 0; i < PARTY_SIZE; i++)
	{
		i = GetFirstAllowableSwitchin(i, TRUE);
		
		if(i == PARTY_SIZE)
			break;
		
		CopyMonToBattleMon(&gBattleMons[AIMon], &party[i])
		
		// return a mon that can't do good damage to the player, has a healing move and a damaging status move, and can't be 2HKO'd by the player
		if(CanDoSevereDamage(AIMon, playerMon, CHECK_HALF_MAX_HP))
			continue;
		if(!HasHealingMove(AIMon))
			continue;
		if(!HasDamagingStatusThatWorks(AIMon, playerMon))
			continue;
		if(!CanDoSevereDamage(playerMon, AIMon, CHECK_HALF_MAX_HP))
			break;
	}
	
	CopyBytes(&gBattleMons[AIMon], &gBackupMonData, 0x58);
	return i;
}








CopyMonToBattleMon(destMonID, sourceMon) @205B0C_J
{
	r0 = destMonID
	r1 = 0
	r2 = 0x58
	fn_1E5ED8() // possibly fillWithBytes()?
	
	destMon = *destMonID;
	
	destMon.species = GetMonData(sourceMon, MON_DATA_SPECIES);
	destMon.attack = GetMonData(sourceMon, MON_DATA_ATK);
	destMon.defense  = GetMonData(sourceMon, MON_DATA_DEF);
	destMon.speed = GetMonData(sourceMon, MON_DATA_SPEED);
	destMon.spAttack  = GetMonData(sourceMon, MON_DATA_SPATK);
	destMon.spDefense = GetMonData(sourceMon, MON_DATA_SPDEF);
	destMon.moves[0] = GetMonData(sourceMon, MON_DATA_MOVE1);
	destMon.moves[1] = GetMonData(sourceMon, MON_DATA_MOVE2);
	destMon.moves[2] = GetMonData(sourceMon, MON_DATA_MOVE3);
	destMon.moves[3] = GetMonData(sourceMon, MON_DATA_MOVE4);
	destMon.ivs = GetMonData(sourceMon, MON_DATA_HP_IV) | (GetMonData(sourceMon, MON_DATA_ATK_IV) << 5) | (GetMonData(sourceMon, MON_DATA_DEF_IV) << 0xA) | (GetMonData(sourceMon, MON_DATA_SPEED_IV) << 0xF) | (GetMonData(sourceMon, MON_DATA_SPATK_IV) << 0x14) | (GetMonData(sourceMon, MON_DATA_SPDEF_IV) << 0x19);
	destMon.statStages = 0x0606060606060606;
	destMon.ability = GetMonAbility(sourceMon);
	destMon.type1 = gBaseStats[(GetMonData(sourceMon, MON_DATA_SPECIES)].type1;
	destMon.type2 = gBaseStats[(GetMonData(sourceMon, MON_DATA_SPECIES)].type2;
	destMon.pp[0] = GetMonData(sourceMon, MON_DATA_PP1);
	destMon.pp[1] = GetMonData(sourceMon, MON_DATA_PP2);
	destMon.pp[2] = GetMonData(sourceMon, MON_DATA_PP3);
	destMon.pp[3] = GetMonData(sourceMon, MON_DATA_PP4);
	destMon.hp = GetMonData(sourceMon, MON_DATA_HP);
	destMon.level = GetMonData(sourceMon, MON_DATA_LEVEL);
	destMon.friendship = GetMonData(sourceMon, MON_DATA_FRIENDSHIP);
	destMon.maxHP = GetMonData(sourceMon, MON_DATA_MAX_HP);
	destMon.heldItem = GetMonData(sourceMon, MON_DATA_HELD_ITEM);
	destMon.nickname = 0xFF;
	destMon.otName = 0xFF;
	destMon.personality = GetMonData(sourceMon, MON_DATA_PERSONALITY);
	destMon.otId = GetMonData(sourceMon, MON_DATA_OT_ID);
	return;
}








HasDamagingStatusThatWorks(attacker, defender) @206600_J
{
	if(gBattleMons[defender].status1 & STATUS1_ANY)
		return FALSE;

	for(i = 0; i < 4; i++)
	{
		if(gBattleMons[attacker].pp[i] == 0)
			continue;

		effect = gBattleMoves[gBattleMons[attacker].moves[i]].effect
		
		if(effect == EFFECT_TOXIC || effect == EFFECT_POISON)
		{
			ability = gBattleMons[defender].ability;
			
			if(ability == ABILITY_IMMUNITY)
				continue;
			if(ability == ABILITY_POISON_HEAL)
				continue;
			if(ability == ABILITY_MAGIC_GUARD)
				continue;

			type1 = gBattleMons[defender].type1;
			
			if(type1 == TYPE_STEEL)
				continue;
			if(type1 == TYPE_POISON)
				continue;

			type2 = gBattleMons[defender].type2;
			
			if(type2 == TYPE_STEEL)
				continue;
			if(type2 == TYPE_POISON)
				continue;
			
			return TRUE;
		}
		elseif(effect == EFFECT_WILL_O_WISP)
		{
			if(gBattleMons[defender].ability == ABILITY_WATER_VEIL)
				continue;
			if(gBattleMons[defender].type1 == TYPE_FIRE)
				continue;
			if(gBattleMons[defender].type2 == TYPE_FIRE)
				continue;
			
			return TRUE;
		}
		else
			continue;
	}

	return FALSE;
}