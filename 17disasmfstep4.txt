atk01_accuracycheck()
{
	move = T2_READ_16(gBattleScriptCurrInstr + 5);

	if((gBattleTypeFlags & BATTLE_TYPE_FIRST_BATTLE) && !fn_EB2E0(1) && gBattleMoves[move].power != 0 && GetBattlerSide(gBattlerAttacker) == B_SIDE_PLAYER)
	{
		JumpIfMoveFailed(7, move);
		return;
	}
	
	if((gBattleTypeFlags & BATTLE_TYPE_FIRST_BATTLE) && !fn_EB2E0(2) && gBattleMoves[move].power == 0 && GetBattlerSide(gBattlerAttacker) == B_SIDE_PLAYER)
	{
		JumpIfMoveFailed(7, move);
		return;
	}

	if(gBattleTypeFlags & 0x10000)
	{
		JumpIfMoveFailed(7, move);
		return;
	}

	if(move == NO_ACC_CALC || move == NO_ACC_CALC_CHECK_LOCK_ON)
	{	
		if((gStatuses3[gBattlerTarget] & STATUS3_ALWAYS_HITS) && move == NO_ACC_CALC_CHECK_LOCK_ON && gDisableStructs[gBattlerTarget].battlerWithSureHit == gBattlerAttacker)
			gBattleScriptCurrInstr += 7;
		elseif(gStatuses3[gBattlerTarget] & (STATUS3_ON_AIR | STATUS3_UNDERGROUND | STATUS3_UNDERWATER))
			gBattlescriptCurrInstr = T1_READ_PTR(gBattlescriptCurrInstr + 1);
		elseif(!JumpIfMoveAffectedByProtect(0))
			gBattleScriptCurrInstr += 7;
	}
	else
	{
		if(move == 0)
			move = gCurrentMove;
		
		if(gBattleStruct->dynamicMoveType)
			type = gBattleStruct->dynamicMoveType & 0x3F;
		else
			type = gBattleMoves[move].type;
			
			
		if(JumpIfMoveAffectedByProtect(move))
            return;
        if(AccuracyCalcHelper(move))
            return;
			
		if(gBattleMons[gBattlerTarget].status2 & STATUS2_FORESIGHT)
			buff = gBattleMons[gBattlerAttacker].statStages[STAT_ACC];
		else
			buff = 6 + gBattleMons[gBattlerAttacker].statStages[STAT_ACC] - gBattleMons[gBattlerTarget].statStages[STAT_EVASION];
		
		if(buff < 0)
			buff = 0;
		
		if(buff > 0xC)
			buff = 0xC;
			
		moveAcc = gBattleMoves[move].accuracy;
		
		if(WEATHER_HAS_EFFECT && (gBattleWeather & WEATHER_SUN_ANY) && gBattleMoves[move].effect == EFFECT_THUNDER)
			moveAcc = 50;
		
		calc = moveAcc * (sAccuracyStageRatios[buff].dividend / sAccuracyStageRatios[buff].divisor);
		
		if(gBattleMons[gBattlerAttacker].ability == ABILITY_COMPOUND_EYES)
			calc *= (130 / 100);
		
		if(WEATHER_HAS_EFFECT && gBattleMons[gBattlerTarget].ability == ABILITY_SAND_VEIL && (gBattleWeather & WEATHER_SANDSTORM_ANY))
			calc *= (80 / 100);
		
		if(gBattleMons[gBattlerAttacker].ability == ABILITY_HUSTLE && IS_TYPE_PHYSICAL(type))
			calc *= (80 / 100);
		
		if(gBattleMons[gBattlerTarget].item == ITEM_ENIGMA_BERRY)
		{
			holdEffect = gEnigmaBerries[gBattlerTarget].holdEffect;
			param = gEnigmaBerries[gBattlerTarget].holdEffectParam;
		}
		else
		{
			holdEffect = GetHoldEffect(gBattleMons[gBattlerTarget].item);
			param = GetHoldEffectParam(gBattleMons[gBattlerTarget].item);
		}

		gPotentialItemEffectBattler = gBattlerTarget;
		
		if(holdEffect == HOLD_EFFECT_EVASION_UP)
			calc *= ((param - 100) / 100);
		
		if(((Random() % 100) + 1) > calc)
		{
			gMoveResultFlags |= MOVE_RESULT_MISSED;
			
			if(gBattleTypeFlags & 1 && (gBattleMoves[move].target == MOVE_TARGET_BOTH || gBattleMoves[move].target == MOVE_TARGET_FOES_AND_ALLY))
				gBattleCommunication[6] = 2;
			else
				gBattleCommunication[6] = 0;
			
			CheckWonderGuardAndLevitate();
		}
		
		JumpIfMoveFailed(7, move);
	}

	return;
}