AnimTask_BlizzardUnknown(arg0)
{
	r6 = arg0
	r5 = 0
	SetGpuReg(0x50, 0x3F42)
	SetGpuReg(0x52, 0x1000)
	fn_BD4B8_J(1, 4, 1)
	fn_BD4B8_J(1, 0, 0)
	
	if(fn_72F2C_J() == 0)
		fn_BD4B8_J(1, 3, 1)
	
	r0 = gBattle_BG1_X
	*r0 = r5
	r4 = gBattle_BG1_Y
	*r4 = r5
	SetGpuReg(0x14, 0)
	SetGpuReg(0x16, *r4)
	fn_74A44_J(&s0)
	r0 = &s0
	r0 = *(r0 + 9)
	fn_74BE0_J(r0, data_1231C10_J)
	r0 = &s0
	r0 = *(r0 + 9)
	r2 = &s0
	r2 = *(r2 + 0xA)
	fn_74B58_J(r0, data_12317A0_J, r2)
	r1 = &s0
	r1 = *(r1 + 8)
	r1 *= 0x10
	LoadCompressedPalette(data_1231BF0_J, r1, 0x20)
	
	if(fn_72F2C_J() != 0)
	{
		r0 = &s0
		r0 = *(r0 + 8)
		fn_72864_J(r0, s1, 0, 0)
	}
	
	r0 = gBattleAnimArgs
	r1 = 0
	r0 = *(r0 + r1)
	
	if(r0 != 0)
	{
		r4 = data_02037E4E_J
		r0 = *r0
		
		if(GetBattlerSide(r0) != 0)
			r5 = 1
	}
	
	r0 = gTasks
	r1 = 0x28
	r1 *= r6
	r1 += r0
	*(r1 + 8) = r5
	r0 = fn_B5BCC_J
	*r1 = r0
}







Callback_PsychoCutUnknown(arg0)
{
	r5 = arg0
	r4 = data_02037F1A
	r0 = *r4
	r1 = 2
	fn_73C24_J()
	*(r5 + 0x20) = r0
	r0 = *r4
	r1 = 1
	r0 &= r1
	
	if(r0 == 1)
		r0 = 0x28
	else
		r0 = 0x54
	
	*(r5 + 0x22) = r0
	r0 = 0
	*(r5 + 0x3A) = r0
	r1 = 4
	*(r5 + 0x3C) = r1
	r0 = fn_E53CC_J
	*(r5 + 0x1C) = r0
	SetGpuReg(0x52, 0x400)
}







AnimTask_Move204Unknown(arg0)
{
	SetGpuReg(0x52, 0)
	SetGpuReg(0x50, 0)
	DestroyAnimVisualTask(arg0)
}







Callback_Move209Unknown(arg0)
{
	r5 = arg0
	StartSpriteAfflineAnim(arg0, 1)
	r4 = data_02037E4E_J
	*(r5 + 0x20) = fn_73C24_J(*r4, 2)
	*(r5 + 0x22) = fn_73C24_J(*r4, 3)
	*(r5 + 0x3A) = fn_74178_J(0)
	r0 = 0x10
	*(r5 + 0x3C) = r0
	
	if(GetBattlerSide(*r4) == B_SIDE_OPPONENT)
	{
		r1 = 0x3C
		r0 = *(r5 + r1)
		r0 = -r0
		*(r5 + 0x3C) = r0
	}
	
	r0 = 1
	*(r5 + 0x2E) = r0
	r0 = fn_AFAFC_J
	*(r5 + 0x1C) = r0
}







AnimTask_Move217Unknown(arg0)
{
	r6 = arg0
	r5 = 0
	SetGpuReg(0x50, 0x3F42)
	SetGpuReg(0x52, 0x1000)
	SetAnimBgAttribute(1, 4, 1)
	SetAnimBgAttribute(1, 0, 0)
	
	if(fn_72F2C_J() == 0)
		SetAnimBgAttribute(1, 3, 1)
	
	r0 = data_020228E8_J
	*r0 = r5
	r4 = data_020228EA_J
	*r4 = r5
	SetGpuReg(0x14, 0)
	SetGpuReg(0x16, *r4)
	fn_74A44_J(&s0)
	r0 = &s0
	fn_74BE0_J(*(r0 + 9), data_09233010_J)
	r0 = &s0
	r2 = &s0
	fn_74B58_J(*(r0 + 9), data_09232A50_J, *(r2 + 0xA))
	r1 = &s0
	r1 = *(r1 + 8)
	r1 *= 0x10
	LoadCompressedPalette(data_09232FF0_J, r1, 0x20)
	
	if(fn_72F2C_J() != 0)
	{
		r0 = &s0
		fn_72864_J(*(r0 + 8), &s1, 0, 0)
	}
	
	r0 = data_02037E36_J
	r1 = 0
	r0 = 
	if(*(r0 + r1) != 0)
	{
		r4 = data_02037E4E_J
		
		if(GetBattlerSide(*r0) == B_SIDE_PLAYER)
			r5 = 1
	}
	
	r0 = data_030050D0_J
	r1 = 0x28
	r1 *= r6
	r1 += r0
	*(r1 + 8) = r5
	r0 = fn_B5BCC_J
	*r1 = r0
}







Callback_Move251Unknown(arg0)
{
	r5 = arg0
	r6 = gBattleAnimArgs
	r1 = 0
	r0 = *(r6 + r1)
	
	if(r0 == 0)
	{
		r4 = gBattleAnimAttacker
		*(r5 + 0x20) = fn_16929C_J(*r4, 2)
		*(r5 + 0x22) = fn_16929C_J(*r4, 3)
	}
	
	r0 = *(r6 + 2)
	*(r5 + 0x2E) = r0
	r0 = fn_B4A64_J
	*(r5 + 0x1C) = r0
}







fn_16929C_J(arg0, arg1)
{
	r5 = arg0
	r4 = arg1

	switch(r4)
	{
	case 0:
	case 2:
		r4 = data_169204_J
		r0 = GetBattlerPosition(r5)
		r0 *= 4
		r1 = gBattleTypeFlags
		r1 = *r1
		r2 = 1
		r1 &= r2
		r1 *= 0x10
		r0 += r1
		r0 += r4
		r0 = *r0
		break;
	case 1:
		r4 = data_169204_J
		r0 = GetBattlerPosition(r5)
		r0 *= 4
		r1 = gBattleTypeFlags
		r1 = *r1
		r2 = 1
		r1 &= r2
		r1 *= 0x10
		r0 += r1
		r0 += r4
		r0 = *(r0 + 1)
		break;
	case 3:
		if(GetBattlerPosition(r5) != 0)
		{
			r0 = gBattleSpritesDataPtr
			r0 = *r0
			r1 = *r0
			r0 = r5 * 4
			r1 += r0
			r0 = *(r1 + 2)
			if(r0 != 0) goto lbl7

			r1 = gBattlerPartyIndexes
			r0 = r5 * 2
			r0 += r1
			r1 = *r0
			r0 = 0x64
			r0 *= r1
			r1 = gEnemyParty
			goto lbl6
		}
		else
		{
			r0 = gBattleSpritesDataPtr
			r0 = *r0
			r1 = *r0
			r0 = r5 * 4
			r1 += r0
			r0 = *(r1 + 2)
			if(r0 != 0) goto lbl7

			r1 = gBattlerPartyIndexes
			r0 = r5 * 2
			r0 += r1
			r1 = *r0
			r0 = 0x64
			r0 *= r1
			r1 = gPlayerParty
			goto lbl6
		}

		lbl6:
		r0 += r1
		r1 = GetMonData(r0, 0xB)
		goto lbl8

		lbl7:
		r1 = *(r1 + 2)
		goto lbl8

		lbl8:
		r0 = r5
		
		if(r4 != r3)
			r2 = 0
		else
			r2 = 1
		
		fn_168B70_J()
		break;
	case 4:
		gamecrash()
	}
	
	return r0
}







fn_168B70_J(arg0, arg1, arg2)
{
	r6 = arg0
	r4 = arg1
	r7 = arg2
	
	if(GetBattlerSide(r6) != 0)
		r5 = fn_73D34_J(r6, r4)
	else
	{
		r5 = fn_73D34_J(r6, r4)
		r0 = fn_73EF0_J(r6, r4)
		r0 = r5 - r0
	}
	
	r0 = GetBattlerPosition(r6)
	r3 = data_169204_J
	r0 *= 4
	r1 = gBattleTypeFlags
	r1 = *r1
	r2 = 1
	r1 &= r2
	r1 *= 0x10
	r0 += r1
	r0 += r3
	r0 = *(r0 + 1)
	r0 += r5
	r4 = r0
	
	if(r7 != 0)
	{
		if(GetBattlerSide(r6) == 0)
		{
			r0 = r4
			r0 += 8
			r4 = r0
		}
		
		if(r4 > 0x68)
			r4 = 0x68
	}
	
	r0 = r4
	return r0
}







data_169204_J:
48 48 00 00 B0 20 00 00 30 20 00 00 70 48 00 00 20 48 00 00 C8 20 00 00 5A 50 00 00 98 18 00 00







AnimTask_Move268Unknown(arg0)
{
	r6 = arg0
	r4 = gBattleAnimTarget
	r0 = fn_74480(*r4, 2)
	r0 = LOWEST_BYTE(r0)
	r0 <<= 0x10
	r1 = 0xFFE00000
	r0 += r1
	r5 = r0 >> 0x10
	r0 = fn_74480(*r4, 3)
	r0 = LOWEST_BYTE(r0)
	r0 <<= 0x10
	r1 = 0xFFDC0000
	r0 += r1
	r4 = r0 >> 0x10
	
	if(fn_73788() != 0)
	{
		r0 = r5 << 0x10
		r1 = 0xFFFA0000
		r0 += r1
		r5 = r0 >> 0x10
	}
	
	SetGpuReg(0x50, 0x3F40)
	SetGpuReg(0x52, 0x1000)
	r4 = CreateSprite(gUnknownMove268SpriteTemplate, LAST_TWO_BYTES(r5), LAST_TWO_BYTES(r4), 4)
	r0 = GetSpriteTileStartByTag(0x28BD)
	r0 <<= 0x10
	r1 = 0xFFFF0000
	
	if(r0 == r1)
	{
		r0 = 0x44
		r0 *= r4
		r0 += r1
		r0 += 0x3E
		r1 = *r0
		r2 = 4
		r1 |= r2
		*r0 = r1
	}
	
	r0 = 0x44
	r0 *= r4
	r1 = gSprites
	r0 += r1
	SetSubspriteTables(r0, data_3BF554)
	r1 = gTasks
	r0 = 0x28
	r0 *= r6
	r0 += r1
	*(r0 + 0x26) = r4
	r1 = fn_183630
	*r0 = r1
}







fn_183630(arg0)
{
	r2 = gTasks
	r1 = arg0 * 5
	r1 *= 8
	r1 += r2
	r0 = *(r1 + 0xA)
	r0++
	r2 = r0
	*(r1 + 0xA) = r0
	
	if(r0 == 0xA)
	{
		r0 = fn_18367C
		*r1 = r0
		r0 = 0
		*(r1 + 0xA) = r0
	}
	else
	{
		r0 = r2
		r1 = 0x10
		r1 -= r0
		r1 <<= 8
		r1 |= r0
		SetGpuReg(0x52, r1)
	}
}







fn_18367C(arg0)
{
	r4 = arg0
	r2 = IndexOfSpritePaletteTag(0x28BD)
	r1 = gTasks
	r0 = r4 * 4
	r0 += r4
	r0 *= 8
	r5 = r0 + r1
	r0 = *(r5 + 0xA)
	r1 = r0 + 1
	*(r5 + 0xA) = r1
	
	if(r0 > 0xD)
	{
		r0 = *(r5 + 0xC)
		r0++
		r6 = 0
		*(r5 + 0xC) = r0
		
		if(r0 == 3)
		{
			r3 = gPlttBufferFaded
			r2 *= 0x10
			r12 = r2
			r1 = 0x10D
			r1 += r12
			r1 *= 2
			r1 += r3
			r4 = *r1
			r2 = 0x10E
			r2 += r12
			r2 *= 2
			r2 += r3
			r0 = *r2
			*r1 = r0
			r0 = 0x10F
			r0 += r12
			r0 *= 2
			r0 += r3
			r1 = *r0
			*r2 = r1
			*r0 = r4
			*(r5 + 0xC) = r6
			r0 = *(r5 + 0xE)
			r0++
			*(r5 + 0xE) = r0
			
			if(r0 == 3)
			{
				*(r5 + 0xE) = r6
				*(r5 + 0xA) = r6
				r0 = *(r5 + 0x10)
				r0++
				*(r5 + 0x10) = r0
				
				if(r0 == 2)
				{
					r0 = 9
					*(r5 + 0xA) = r0
					r0 = fn_785D8
					*r5 = r0
				}
			}
		}
	}
}







AnimTask_Move2A0Unknown(arg0)
{
	r4 = arg0
	r0 = r4 * 4
	r0 += r4
	r0 *= 8
	r1 = gTasks
	r5 = r0 + r1
	r1 = 8
	r0 = *(r5 + r1)
	
	switch(r0)
	{
	case 0:
		r4 = gBattleAnimAttacker
		r0 = GetBattlerSide(*r4)
		r2 = -1
		r1 = r2
		
		if(r0 == 0)
			r1 = 1
		
		r6 = 0
		*(r5 + 0xA) = r1
		r0 = gBattleAnimArgs
		r1 = 0
		r2 = *(r0 + r1)
		r3 = r0
		
		if(r2 == 0)
		{
			*(r5 + 0xE) = fn_74480(*r4, 2)
			*(r5 + 0x12) = fn_74480(*r4, 3)
			r2 = 0xA
			r0 = *(r5 + r2)
			r0 *= 0x80
			r0 += 0x78
			*(r5 + 0x10) = r0
		}
		elseif(r2 == 4)
		{
			r0 = 0xA
			r1 = *(r5 + r0)
			r1 *= 0x80
			r0 = 0x78
			r0 -= r1
			*(r5 + 0xE) = r0
			r4 = gBattleAnimTarget
			*(r5 + 0x12) = fn_74480(*r4, 3)
			r0 = fn_74480(*r4, 2)
			r2 = 0xA
			r1 = *(r5 + r2)
			r1 *= 0x20
			r0 -= r1
			*(r5 + 0x10) = r0
		}
		else
		{
			r1 = *r3
			r0 = 1
			r0 &= r1
			
			if(r0 == 0)
			{
				r0 = 0xFFF0
				*(r5 + 0xE) = r0
				r0 = 0x100
			}
			else
			{
				r0 = 0x100
				*(r5 + 0xE) = r0
				r0 = 0xFFF0
			}
			
			*(r5 + 0x10) = r0
			r1 = 0xA
			r0 = *(r5 + r1)
			
			if(r0 == 1)
			{
				r2 = 0
				r0 = *(r3 + r2)
				r1 = r0 * 4
				r1 += r0
				r1 *= 2
				r0 = 0x50
				r0 -= r1
				*(r5 + 0x12) = r0
			}
			else
			{
				r0 = 0
				r1 = *(r3 + r0)
				r0 = r1 * 4
				r0 += r1
				r0 *= 2
				r0 += 0x28
				*(r5 + 0x12) = r0
				r1 = *(r5 + 0xE)
				r0 = *(r5 + 0x10)
				*(r5 + 0xE) = r0
				*(r5 + 0x10) = r1
			}
		}
		
		r2 = 0xE
		r1 = *(r5 + r2)
		r2 = 0x10
		r0 = *(r5 + r2)
		
		if(r1 < r0)
		{
			r1 = 0
			r0 = 1
			*(r5 + 0xA) = r0
			*(r5 + 0x14) = r1
		}
		else
		{
			r0 = 0xFFFF
			*(r5 + 0xA) = r0
			r0 = 3
			*(r5 + 0x14) = r0
		}
		
		r0 = *(r5 + 8)
		r0++
		*(r5 + 8) = r0
		
		break;
	case 1:
		r0 = *(r5 + 0xC)
		r0++
		*(r5 + 0xC) = r0
		r0 <<= 0x10
		
		while(r0 <= 0) {}
		
		r0 = 0
		*(r5 + 0xC) = r0
		
		if(fn_1838B0(r5, r4) != 0)
		{
			r0 = *(r5 + 8)
			r0++
			*(r5 + 8) = r0
		}
		
		break;
	case 2:
		r1 = 0x16
		r0 = *(r5 + r1)
		
		if(r0 == 0)
			DestroyAnimVisualTask(r4)
			
		break;
	}
}







fn_1838B0(arg0, arg1)
{
	r4 = arg0
	r5 = arg1
	r2 = 0xE
	r3 = 0x12
	r2 = CreateSprite(data_12F1738, *(r4 + r2), *(r4 + r3), 0x23)
	
	if(r2 != 0x40)
	{
		r1 = gSprites
		r0 = r2 * 0x10
		r0 += r2
		r0 *= 4
		r0 += r1
		*(r0 + 0x3A) = r5
		r1 = 7
		*(r0 + 0x3C) = r1
		r0 = *(r4 + 0x16)
		r0++
		*(r4 + 0x16) = r0
	}
	
	r1 = *(r4 + 0xA)
	r5 = *(r4 + 0x14)
	r0 = r1 + r5
	*(r4 + 0x14) = r0
	r0 <<= 0x10
	
	if(r0 < 0)
	{
		r0 = 3
		*(r4 + 0x14) = r0
	}
	
	r2 = 0x14
	r0 = *(r4 + r2)
	
	if(r0 > 3)
	{
		r0 = 0
		*(r4 + 0x14) = r0
	}
	
	r3 = 0xA
	r0 = *(r4 + r3)
	r0 *= 0x10
	r5 = *(r4 + 0xE)
	r2 = r0 + r5
	*(r4 + 0xE) = r2
	r3 = r1
	
	if(r3 == 1)
	{
		r0 = r2
		r5 = 0x10
		r1 = *(r4 + r5)
		
		if(r0 >= r1)
			return 1

	}
	
	r0 = -1
	
	if(r3 != r0)
		return 0

	r0 = r2
	r2 = 0x10
	r1 = *(r4 + r2)
	
	if(r0 > r1)
		return 0
	else
		return 1
}