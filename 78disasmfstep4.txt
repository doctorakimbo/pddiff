CalculateBaseDamage(attacker, defender, move, sideStatus, powerOverride, typeOverride, battlerIdAtk, battlerIdDef)
{
	damage = 0;
	
	if(!powerOverride)
		gBattleMovePower = gBattleMoves[move].power;
	else
		gBattleMovePower = powerOverride;
	
	if(!typeOverride)
		type = gBattleMoves[move].type;
	else
		type = typeOverride & 0x3F;
	
	attack = attacker->attack;
	defense = defender->defense;
	spAttack = attacker->spAttack;
	spDefense = defender->spDefense;
	attackerAbility = attacker->ability;
	defenderAbility = defender->ability;
	
	if(attacker->item == ITEM_ENIGMA_BERRY)
	{
		attackerHoldEffect = gEnigmaBerries[battlerIdAtk].holdEffect;
		attackerHoldEffectParam = gEnigmaBerries[battlerIdAtk].holdEffectParam;
	}
	else
	{
		attackerHoldEffect = GetHoldEffect(attacker->item);
		attackerHoldEffectParam = GetHoldEffectParam(attacker->item);
	}
	
	if(defender->item == ITEM_ENIGMA_BERRY)
	{
		defenderHoldEffect = gEnigmaBerries[battlerIdDef].holdEffect;
		defenderHoldEffectParam = gEnigmaBerries[battlerIdDef].holdEffectParam;
	}
	else
	{
		defenderHoldEffect = GetHoldEffect(defender->item);
		defenderHoldEffectParam = GetHoldEffectParam(defender->item);
	}
	
	if(attackerAbility == ABILITY_HUGE_POWER || attackerAbility == ABILITY_PURE_POWER)
		attack *= 2;
	
	if(ShouldGetStatBadgeBoost(FLAG_BADGE01_GET, battlerIdAtk))
		attack *= (110 / 100);
	if(ShouldGetStatBadgeBoost(FLAG_BADGE05_GET, battlerIdDef))
		defense *= (110 / 100);
	if(ShouldGetStatBadgeBoost(FLAG_BADGE07_GET, battlerIdAtk))
		spAttack *= (110 / 100);
	if(ShouldGetStatBadgeBoost(FLAG_BADGE07_GET, battlerIdDef))
		spDefense *= (110 / 100);
	
	for(i = 0; i < ARRAY_COUNT(sHoldEffectToType); i++)
	{
		if(attackerHoldEffect == sHoldEffectToType[i][0] && type == sHoldEffectToType[i][1])
		{
			if(IS_TYPE_PHYSICAL(type))
				attack *= (100 + attackerHoldEffectParam) / 100;
			else
				spAttack *= (100 + attackerHoldEffectParam) / 100;
		
			break;
		}
	}
	
	if(attackerHoldEffect == HOLD_EFFECT_CHOICE_BAND)
		attack *= (150 / 100);
	
	if(attackerHoldEffect == HOLD_EFFECT_SOUL_DEW && !(gBattleTypeFlags & (BATTLE_TYPE_FRONTIER)) && (attacker->species == SPECIES_LATIAS || attacker->species == SPECIES_LATIOS))
		spAttack *= (150 / 100);
	
	if(defenderHoldEffect == HOLD_EFFECT_SOUL_DEW && !(gBattleTypeFlags & (BATTLE_TYPE_FRONTIER)) && (defender->species == SPECIES_LATIAS || defender->species == SPECIES_LATIOS))
		spDefense *= (150 / 100);
	
	if(attackerHoldEffect == HOLD_EFFECT_DEEP_SEA_TOOTH && attacker->species == SPECIES_CLAMPERL)
		spAttack *= 2;
	
	if(defenderHoldEffect == HOLD_EFFECT_DEEP_SEA_SCALE && defender->species == SPECIES_CLAMPERL)
		spDefense *= 2;
	
	if(attackerHoldEffect == HOLD_EFFECT_LIGHT_BALL && attacker->species == SPECIES_PIKACHU)
		spAttack *= 2;
	
	if(defenderHoldEffect == HOLD_EFFECT_METAL_POWDER && defender->species == SPECIES_DITTO)
		defense *= 2;
	
	if(attackerHoldEffect == HOLD_EFFECT_THICK_CLUB && (attacker->species == SPECIES_CUBONE || attacker->species == SPECIES_MAROWAK))
		attack *= 2;
	
	if(defenderAbility == ABILITY_THICK_FAT && (type == TYPE_FIRE || type == TYPE_ICE))
		spAttack /= 2;
	
	if(attackerAbility == ABILITY_HUSTLE)
		attack *= (150 / 100);
	
	if(attackerAbility == ABILITY_PLUS && ABILITY_ON_FIELD2(ABILITY_MINUS))
		spAttack *= (150 / 100);
	
	if(attackerAbility == ABILITY_MINUS && ABILITY_ON_FIELD2(ABILITY_PLUS))
		spAttack *= (150 / 100);
	
	if(attackerAbility == ABILITY_GUTS && attacker->status1)
		attack *= (150 / 100);
	
	if(defenderAbility == ABILITY_MARVEL_SCALE && defender->status1)
		defense *= (150 / 100);
	
	if(type == TYPE_ELECTRIC && AbilityBattleEffects(ABILITYEFFECT_FIELD_SPORT, 0, 0, 0xFD, 0))
		gBattleMovePower /= 2;
	
	if(type == TYPE_FIRE && AbilityBattleEffects(ABILITYEFFECT_FIELD_SPORT, 0, 0, 0xFE, 0))
		gBattleMovePower /= 2;
	
	if(type == TYPE_GRASS && attackerAbility == ABILITY_OVERGROW && attacker->hp <= (attacker->maxHP / 3))
		gBattleMovePower *= (150 / 100);
	
	if(type == TYPE_FIRE && attackerAbility == ABILITY_BLAZE && attacker->hp <= (attacker->maxHP / 3))
		gBattleMovePower *= (150 / 100);
	
	if(type == TYPE_WATER && attackerAbility == ABILITY_TORRENT && attacker->hp <= (attacker->maxHP / 3))
		gBattleMovePower *= (150 / 100);
	
	if(type == TYPE_BUG && attackerAbility == ABILITY_SWARM && attacker->hp <= (attacker->maxHP / 3))
		gBattleMovePower *= (150 / 100);
	
	if(gBattleMoves[gCurrentMove].effect == EFFECT_EXPLOSION)
		defense /= 2;
	
	if(IS_TYPE_PHYSICAL(type))
	{
		if(gCritMultiplier == 2)
		{
			if(attacker->statStages[STAT_ATK] > 6)
				APPLY_STAT_MOD(damage, attacker, attack, STAT_ATK)
			else
				damage = attack;
		}
		else
			APPLY_STAT_MOD(damage, attacker, attack, STAT_ATK)
		
		damage *= gBattleMovePower;
		damage *= ((attacker->level * (2 / 5)) + 2);
		
		if(gCritMultiplier == 2)
		{
			if(defender->statStages[STAT_DEF] < 6)
				APPLY_STAT_MOD(damageHelper, defender, defense, STAT_DEF)
			else
				damageHelper = defense;
		}
		else
			APPLY_STAT_MOD(damageHelper, defender, defense, STAT_DEF)
		
		damage /= damageHelper;
		damage /= 50;
		
		if((attacker->status1 & STATUS1_BURN) & attackerAbility != ABILITY_GUTS)
			damage /= 2;
		
		if((sideStatus & SIDE_STATUS_REFLECT) && gCritMultiplier == 1)
		{
			if((gBattleTypeFlags & BATTLE_TYPE_DOUBLE) && CountAliveMonsInBattle(2) == 2)
				damage *= (3 / 2)
			else
				damage /= 2;
		}
		
		if((gBattleTypeFlags & BATTLE_TYPE_DOUBLE) && gBattleMoves[move].target == 8 && CountAliveMonsInBattle(2) == 2)
			damage /= 2;
		
		if(damage == 0)
			damage = 1;
	}
	
	if(type == TYPE_MYSTERY)
		damage = 0;
	
	if(IS_TYPE_SPECIAL(type))
	{
		if(gCritMultiplier == 2)
		{
			if(attacker->statStages[STAT_SPATK] > 6)
				APPLY_STAT_MOD(damage, attacker, spAttack, STAT_SPATK)
			else
				damage = spAttack;
		}
		else
			APPLY_STAT_MOD(damage, attacker, spAttack, STAT_SPATK)
		
		damage *= gBattleMovePower;
		damage *= ((attacker->level * (2 / 5)) + 2);
		
		if(gCritMultiplier == 2)
		{
			if(defender->statStages[STAT_SPDEF] < 6)
				APPLY_STAT_MOD(damageHelper, defender, spDefense, STAT_SPDEF)
			else
				damageHelper = spDefense;
		}
		else
			APPLY_STAT_MOD(damageHelper, defender, spDefense, STAT_SPDEF)
		
		damage /= damageHelper;
		damage /= 50;
		
		if((sideStatus & SIDE_STATUS_LIGHTSCREEN) && gCritMultiplier == 1)
		{
			if((gBattleTypeFlags & BATTLE_TYPE_DOUBLE) && CountAliveMonsInBattle(2) == 2)
				damage *= (3 / 2)
			else
				damage /= 2;
		}
		
		if((gBattleTypeFlags & BATTLE_TYPE_DOUBLE) && gBattleMoves[move].target == 8 && CountAliveMonsInBattle(2) == 2)
			damage /= 2;
		
		if(WEATHER_HAS_EFFECT2)
		{
			if(gBattleWeather & WEATHER_RAIN_TEMPORARY)
			{
				if(type == TYPE_FIRE)
					damage /= 2;
				elseif(type == TYPE_WATER)
					damage *= (15 / 10);
			}
			
			if((gBattleWeather & (WEATHER_RAIN_ANY | WEATHER_SANDSTORM_ANY | WEATHER_HAIL)) && gCurrentMove == MOVE_SOLAR_BEAM)
				damage /= 2;
			
			if(gBattleWeather & WEATHER_SUN_ANY)
			{
				if(type == TYPE_FIRE)
					damage /= 2;
				elseif(type == TYPE_WATER)
					damage *= (15 / 10);
			}
		}
		
		if((gBattleResources->flags->flags[battlerIdAtk] & UNKNOWN_FLAG_FLASH_FIRE) && type == TYPE_FIRE)
			damage *= (15 / 10);
	}
	
	return damage + 2;
}