FindMonThatAbsorbsOpponentsMove()
{
	if(HasSuperEffectiveMoveAgainstOpponents(TRUE) && (Random() % 3) != 0)
		return FALSE;
	if(gLastLandedMoves[gActiveBattler] == 0)
		return FALSE;
	if(gLastLandedMoves[gActiveBattler] == 0xFFFF)
		return FALSE;
	if(gBattleMoves[gLastLandedMoves[gActiveBattler]].power == 0)
		return FALSE;
	
	if(gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
	{
		battlerIn1 = gActiveBattler;
	
		if(gAbsentBattlerFlags & gBitTable[GetBattlerAtPosition(BATTLE_PARTNER(GetBattlerPosition(gActiveBattler)))])
			battlerIn2 = gActiveBattler
		else
			battlerIn2 = GetBattlerAtPosition(BATTLE_PARTNER(GetBattlerPosition(gActiveBattler)))
	}
	else
	{
		battlerIn1 = gActiveBattler;
		battlerIn2 = gActiveBattler;
	}
	
	if(gBattleMoves[gLastLandedMoves[gActiveBattler]].type == TYPE_FIRE)
		absorbingTypeAbility = ABILITY_FLASH_FIRE;
	elseif(gBattleMoves[gLastLandedMoves[gActiveBattler]].type == TYPE_WATER)
		absorbingTypeAbility = ABILITY_WATER_ABSORB;
	elseif(gBattleMoves[gLastLandedMoves[gActiveBattler]].type == TYPE_ELECTRIC)
		absorbingTypeAbility = ABILITY_VOLT_ABSORB;
	else
		return FALSE;
	
	if(gBattleMons[gActiveBattler].ability == absorbingTypeAbility)
		return FALSE;
	
	for(i = 0; i <= 5; i++)
	{
		if(GetMonData(&gEnemyParty[i], MON_DATA_HP) == 0)
			continue;
		if(GetMonData(&party[i], MON_DATA_SPECIES2) == SPECIES_NONE)
			continue;
		if(GetMonData(&party[i], MON_DATA_SPECIES2) == SPECIES_EGG)
			continue;
		if(i == gBattlerPartyIndexes[battlerIn1])
			continue;
		if(i == gBattlerPartyIndexes[battlerIn2])
			continue;
		if(i == gBattleStruct->monToSwitchIntoId[battlerIn1])
			continue;
		if(i == gBattleStruct->monToSwitchIntoId[battlerIn2])
			continue;
			
		species = GetMonData(&gEnemyParty[i], MON_DATA_SPECIES);
			
		if(GetMonData(&gEnemyParty[i], MON_DATA_ALT_ABILITY) != 0)
			monAbility = gBaseStats[species].ability2;
		else
			monAbility = gBaseStats[species].ability1;
		
		if(monAbility == absorbingTypeAbility)
		{
			if(Random() & 1)
			{
				gBattleStruct->AI_monToSwitchIntoId[gActiveBattler] = i;
				BtlController_EmitTwoReturnValues(1, B_ACTION_SWITCH, 0);
				return TRUE;
			}
		}
	}
	
	return FALSE;
}