ItemBattleEffects(caseID, battlerId, moveTurn)
{
	i = 0;
	effect = ITEM_NO_EFFECT;
	changedPP = 0;
	
	gLastUsedItem = gBattleMons[battlerId].item;

	if(gLastUsedItem == ITEM_ENIGMA_BERRY)
	{
		battlerHoldEffect = gEnigmaBerries[battlerId].holdEffect;
		battlerHoldEffectParam = gEnigmaBerries[battlerId].holdEffectParam;
	}
	else
	{
		battlerHoldEffect = GetHoldEffect(gLastUsedItem);
		battlerHoldEffectParam = GetHoldEffectParam(gLastUsedItem);
	}
	
	atkItem = gBattleMons[gBattlerAttacker].item;

	if(atkItem == ITEM_ENIGMA_BERRY)
	{
		atkHoldEffect = gEnigmaBerries[gBattlerAttacker].holdEffect;
		atkHoldEffectParam = gEnigmaBerries[gBattlerAttacker].holdEffectParam;
	}
	else
	{
		atkHoldEffect = GetHoldEffect(atkItem);
		atkHoldEffectParam = GetHoldEffectParam(atkItem);
	}
	
	defItem = gBattleMons[gBattlerTarget].item;

	if(defItem != ITEM_ENIGMA_BERRY)
	{
		GetHoldEffect(defItem);
		GetHoldEffectParam(defItem);
	}
	
	switch(caseID)
	{
	case ITEMEFFECT_ON_SWITCH_IN:
		switch(battlerHoldEffect)
		{
		case HOLD_EFFECT_DOUBLE_PRIZE:
			gBattleStruct->moneyMultiplier = 2;
			break;
		case HOLD_EFFECT_RESTORE_STATS:
			for(i = 0; i < BATTLE_STATS_NO; i++)
			{
				if(gBattleMons[battlerId].statStages[i] < 6)
                {
					gBattleMons[battlerId].statStages[i] = 6;
					effect = ITEM_STATS_CHANGE;
				}
			}
			
			if(effect)
			{
				gBattleScripting.battler = battlerId;
				gPotentialItemEffectBattler = battlerId;
				gActiveBattler = gBattlerAttacker = battlerId;
				BattleScriptExecute(BattleScript_WhiteHerbEnd2);
			}
			
			break;
		}
		
		break;
	case 1:
		if(gBattleMons[battlerId].hp)
		{
			switch(battlerHoldEffect)
			{
			case HOLD_EFFECT_RESTORE_HP:
				if(gBattleMons[battlerId].hp < (gBattleMons[battlerId].maxHP / 2) && !moveTurn)
				{
					gBattleMoveDamage = battlerHoldEffectParam;
					
					if(gBattleMons[battlerId].hp + battlerHoldEffectParam > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;
					
					gBattleMoveDamage = -gBattleMoveDamage;
					BattleScriptExecute(BattleScript_ItemHealHP_RemoveItem);
					effect = ITEM_HP_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_RESTORE_PP:
				if(!moveTurn)
				{
					if(GetBattlerSide(battlerId) == B_SIDE_PLAYER)
						mon = gPlayerParty[gBattlerPartyIndexes[battlerId]];
					else
						mon = gEnemyParty[gBattlerPartyIndexes[battlerId]];
					
					for(i = 0; i < 4; i++)
					{
						move = GetMonData(mon, MON_DATA_MOVE1 + i);
						changedPP = GetMonData(mon, MON_DATA_PP1 + i);
						ppBonuses = GetMonData(mon, MON_DATA_PP_BONUSES);
						
						if(move && changedPP == 0)
							break;
					}
					
					if(i != 4)
					{
						maxPP = CalculatePPWithBonus(move, ppBonuses, i);
						
						if(changedPP + battlerHoldEffectParam > maxPP)
							changedPP = maxPP;
						else
							changedPP = changedPP + battlerHoldEffectParam;
						
						PREPARE_MOVE_BUFFER(gBattleTextBuff1, move);
						
						BattleScriptExecute(BattleScript_BerryPPHealEnd2);
						BtlController_EmitSetMonData(0, i + REQUEST_PPMOVE1_BATTLE, 0, 1, &changedPP);
						MarkBattlerForControllerExec(gActiveBattler);
						effect = ITEM_PP_CHANGE;
					}
				}
				
				break;
			case HOLD_EFFECT_RESTORE_STATS:
				for(i = 0; i < BATTLE_STATS_NO; i++)
				{
					if(gBattleMons[battlerId].statStages[i] < 6)
					{
						gBattleMons[battlerId].statStages[i] = 6;
						effect = ITEM_STATS_CHANGE;
					}
				}
				
				if(effect)
				{
					gBattleScripting.battler = battlerId;
					gPotentialItemEffectBattler = battlerId;
					gActiveBattler = gBattlerAttacker = battlerId;
					BattleScriptExecute(BattleScript_WhiteHerbEnd2);
				}
				
				break;
			case HOLD_EFFECT_LEFTOVERS:
				if(gBattleMons[battlerId].hp < gBattleMons[battlerId].maxHP && !moveTurn)
				{
					gBattleMoveDamage = gBattleMons[battlerId].maxHP / 16;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					if(gBattleMons[battlerId].hp + gBattleMoveDamage > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;
					
					gBattleMoveDamage = -gBattleMoveDamage;
					BattleScriptExecute(BattleScript_ItemHealHP_End2);
					effect = ITEM_HP_CHANGE;
					RecordItemEffectBattle(battlerId, battlerHoldEffect);
				}
				
				break;
			case HOLD_EFFECT_CONFUSE_SPICY:
				if(gBattleMons[battlerId].hp <= gBattleMons[battlerId].maxHP / 2 && !moveTurn)
				{
					PREPARE_FLAVOR_BUFFER(gBattleTextBuff1, FLAVOR_SPICY);
					
					gBattleMoveDamage = gBattleMons[battlerId].maxHP / battlerHoldEffectParam;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					if(gBattleMons[battlerId].hp + gBattleMoveDamage > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;
					
					gBattleMoveDamage = -gBattleMoveDamage;
					
					if(GetFlavorRelationByPersonality(gBattleMons[battlerId].personality, FLAVOR_SPICY) < 0)
						BattleScriptExecute(BattleScript_BerryConfuseHealEnd2);
					else
						BattleScriptExecute(BattleScript_ItemHealHP_RemoveItem);
					
					effect = ITEM_HP_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CONFUSE_DRY:
				if(gBattleMons[battlerId].hp < gBattleMons[battlerId].maxHP / 2 && !moveTurn)
				{
					PREPARE_FLAVOR_BUFFER(gBattleTextBuff1, FLAVOR_DRY);
					
					gBattleMoveDamage = gBattleMons[battlerId].maxHP / battlerHoldEffectParam;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					if(gBattleMons[battlerId].hp + gBattleMoveDamage > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;
						
					gBattleMoveDamage = -gBattleMoveDamage;

					if(GetFlavorRelationByPersonality(gBattleMons[battlerId].personality, FLAVOR_DRY) < 0)
						BattleScriptExecute(BattleScript_BerryConfuseHealEnd2)
					else
						BattleScriptExecute(BattleScript_ItemHealHP_RemoveItem)
					
					effect = ITEM_HP_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CONFUSE_SWEET:
				if(gBattleMons[battlerId].hp < gBattleMons[battlerId].maxHP / 2 && !moveTurn)
				{
					PREPARE_FLAVOR_BUFFER(gBattleTextBuff1, FLAVOR_SWEET);
					
					gBattleMoveDamage = gBattleMons[battlerId].maxHP / battlerHoldEffectParam;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					if(gBattleMons[battlerId].hp + gBattleMoveDamage > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;
					
					gBattleMoveDamage = -gBattleMoveDamage;
					
					if(GetFlavorRelationByPersonality(gBattleMons[battlerId].personality, FLAVOR_SWEET) < 0)
						BattleScriptExecute(BattleScript_BerryConfuseHealEnd2);
					else
						BattleScriptExecute(BattleScript_ItemHealHP_RemoveItem);
					
					effect = ITEM_HP_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CONFUSE_BITTER:
				if(gBattleMons[battlerId].hp < gBattleMons[battlerId].maxHP / 2 && !moveTurn)
				{
					PREPARE_FLAVOR_BUFFER(gBattleTextBuff1, FLAVOR_BITTER);
					
					gBattleMoveDamage = gBattleMons[battlerId].maxHP / battlerHoldEffectParam;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;

					if(gBattleMons[battlerId].hp + gBattleMoveDamage > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;

					gBattleMoveDamage = -gBattleMoveDamage;
					
					if(GetFlavorRelationByPersonality(gBattleMons[battlerId].personality, FLAVOR_BITTER) < 0)
						BattleScriptExecute(BattleScript_BerryConfuseHealEnd2);
					else
						BattleScriptExecute(BattleScript_ItemHealHP_RemoveItem);
					
					effect = ITEM_HP_CHANGE;
				}
					
				break;
			case HOLD_EFFECT_CONFUSE_SOUR:
				if(gBattleMons[battlerId].hp < gBattleMons[battlerId].maxHP / 2 && !moveTurn)
				{
					PREPARE_FLAVOR_BUFFER(gBattleTextBuff1, FLAVOR_SOUR);
					
					gBattleMoveDamage = gBattleMons[battlerId].maxHP / battlerHoldEffectParam;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					if(gBattleMons[battlerId].hp + gBattleMoveDamage > gBattleMons[battlerId].maxHP)
						gBattleMoveDamage = gBattleMons[battlerId].maxHP - gBattleMons[battlerId].hp;
					
					gBattleMoveDamage = -gBattleMoveDamage;
					
					if(GetFlavorRelationByPersonality(gBattleMons[battlerId].personality, FLAVOR_SOUR) < 0)
						BattleScriptExecute(BattleScript_BerryConfuseHealEnd2);
					else
						BattleScriptExecute(BattleScript_ItemHealHP_RemoveItem);
					
					effect = ITEM_HP_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_ATTACK_UP:
				if(gBattleMons[battlerId].hp <= gBattleMons[battlerId].maxHP / battlerHoldEffectParam && !moveTurn && gBattleMons[battlerId].statStages[STAT_ATK] < 0xC)
				{
					PREPARE_STAT_BUFFER(gBattleTextBuff1, STAT_ATK);
					PREPARE_STRING_BUFFER(gBattleTextBuff2, STRINGID_STATROSE);
					gEffectBattler = battlerId;
					SET_STATCHANGER(STAT_ATK, 1, FALSE);
					gBattleScripting.animArg1 = 0xE + STAT_ATK;
					gBattleScripting.animArg2 = 0;
					BattleScriptExecute(BattleScript_BerryStatRaiseEnd2);
					effect = ITEM_STATS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_DEFENSE_UP:
				if(gBattleMons[battlerId].hp <= gBattleMons[battlerId].maxHP / battlerHoldEffectParam && !moveTurn && gBattleMons[battlerId].statStages[STAT_DEF] < 0xC)
				{
					PREPARE_STAT_BUFFER(gBattleTextBuff1, STAT_DEF);
					gEffectBattler = battlerId;
					SET_STATCHANGER(STAT_DEF, 1, FALSE);
					gBattleScripting.animArg1 = 0xE + STAT_DEF;
					gBattleScripting.animArg2 = 0;
					BattleScriptExecute(BattleScript_BerryStatRaiseEnd2);
					effect = ITEM_STATS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_SPEED_UP:
				if(gBattleMons[battlerId].hp <= gBattleMons[battlerId].maxHP / battlerHoldEffectParam && !moveTurn && gBattleMons[battlerId].statStages[STAT_SPEED] < 0xC)
				{
					PREPARE_STAT_BUFFER(gBattleTextBuff1, STAT_SPEED);
					gEffectBattler = battlerId;
					SET_STATCHANGER(STAT_SPEED, 1, FALSE);
					gBattleScripting.animArg1 = 0xE + STAT_SPEED;
					gBattleScripting.animArg2 = 0;
					BattleScriptExecute(BattleScript_BerryStatRaiseEnd2);
					effect = ITEM_STATS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_SP_ATTACK_UP:
				if(gBattleMons[battlerId].hp <= gBattleMons[battlerId].maxHP / battlerHoldEffectParam && !moveTurn && gBattleMons[battlerId].statStages[STAT_SPATK] < 0xC)
				{
					PREPARE_STAT_BUFFER(gBattleTextBuff1, STAT_SPATK);
					gEffectBattler = battlerId;
					SET_STATCHANGER(STAT_SPATK, 1, FALSE);
					gBattleScripting.animArg1 = 0xE + STAT_SPATK;
					gBattleScripting.animArg2 = 0;
					BattleScriptExecute(BattleScript_BerryStatRaiseEnd2);
					effect = ITEM_STATS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_SP_DEFENSE_UP:
				if(gBattleMons[battlerId].hp <= gBattleMons[battlerId].maxHP / battlerHoldEffectParam && !moveTurn && gBattleMons[battlerId].statStages[STAT_SPDEF] < 0xC)
				{
					PREPARE_STAT_BUFFER(gBattleTextBuff1, STAT_SPDEF);
					gEffectBattler = battlerId;
					SET_STATCHANGER(STAT_SPDEF, 1, FALSE);
					gBattleScripting.animArg1 = 0xE + STAT_SPDEF;
					gBattleScripting.animArg2 = 0;
					BattleScriptExecute(BattleScript_BerryStatRaiseEnd2);
					effect = ITEM_STATS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CRITICAL_UP:
				if(gBattleMons[battlerId].hp <= (gBattleMons[battlerId].maxHP / battlerHoldEffectParam) && !moveTurn && !(gBattleMons[battlerId].status2 & STATUS2_FOCUS_ENERGY))
				{
					gBattleMons[battlerId].status2 |= STATUS2_FOCUS_ENERGY;
					BattleScriptExecute(BattleScript_BerryFocusEnergyEnd2);
					effect = ITEM_EFFECT_OTHER;
				}
				
				break;
			case HOLD_EFFECT_RANDOM_STAT_UP:
				if(!moveTurn && gBattleMons[battlerId].hp <= (gBattleMons[battlerId].maxHP / battlerHoldEffectParam))
				{
					for(i = 0; i < 5; i++)
                    {
                        if(gBattleMons[battlerId].statStages[STAT_ATK + i] < 0xC)
                            break;
					}
					
					if(i != 5)
					{
						do
						{
							i = Random() % 5;
						} while(gBattleMons[battlerId].statStages[STAT_ATK + i] == 0xC);

						PREPARE_STAT_BUFFER(gBattleTextBuff1, STAT_ATK + i);
						
						gBattleTextBuff2[0] = B_BUFF_PLACEHOLDER_BEGIN;
                        gBattleTextBuff2[1] = B_BUFF_STRING;
                        gBattleTextBuff2[2] = STRINGID_STATSHARPLY;
                        gBattleTextBuff2[3] = STRINGID_STATSHARPLY >> 8;
                        gBattleTextBuff2[4] = B_BUFF_STRING;
                        gBattleTextBuff2[5] = STRINGID_STATROSE;
                        gBattleTextBuff2[6] = STRINGID_STATROSE >> 8;
						gBattleTextBuff2[7] = EOS;
						
						gEffectBattler = battlerId;
						SET_STATCHANGER(STAT_ATK + i, 2, FALSE);
						gBattleScripting.animArg1 = 0x21 + i + 6;
						gBattleScripting.animArg2 = 0;
						BattleScriptExecute(BattleScript_BerryStatRaiseEnd2); // change it
						effect = ITEM_STATS_CHANGE;
					}
				}
				
				break;
			case HOLD_EFFECT_CURE_PAR:
				if(gBattleMons[battlerId].status1 & STATUS1_PARALYSIS)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_PARALYSIS);
					BattleScriptExecute(BattleScript_BerryCurePrlzEnd2);
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_PSN:
				if(gBattleMons[battlerId].status1 & STATUS1_PSN_ANY)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_PSN_ANY | STATUS1_TOXIC_COUNTER);
					BattleScriptExecute(BattleScript_BerryCurePsnEnd2);
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_BRN:
				if(gBattleMons[battlerId].status1 & STATUS1_BURN)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_BURN);
					BattleScriptExecute(BattleScript_BerryCureBrnEnd2);
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_FRZ:
				if(gBattleMons[battlerId].status1 & STATUS1_FREEZE)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_FREEZE);
					BattleScriptExecute(BattleScript_BerryCureFrzEnd2);
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_SLP:
				if(gBattleMons[battlerId].status1 & STATUS1_SLEEP)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_SLEEP);
					gBattleMons[battlerId].status2 &= ~(STATUS2_NIGHTMARE);
					BattleScriptExecute(BattleScript_BerryCureSlpEnd2);
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_CONFUSION:
				if(gBattleMons[battlerId].status2 & STATUS2_CONFUSION)
				{
					gBattleMons[battlerId].status2 &= ~(STATUS2_CONFUSION);
					BattleScriptExecute(BattleScript_BerryCureConfusionEnd2);
					effect = ITEM_EFFECT_OTHER;
				}
				
				break;
			case HOLD_EFFECT_CURE_STATUS:
				if(gBattleMons[battlerId].status1 & STATUS1_ANY || (gBattleMons[battlerId].status2 & STATUS2_CONFUSION))
				{
					i = 0;
				
					if(gBattleMons[battlerId].status1 & STATUS1_PSN_ANY)
					{
						StringCopy(gBattleTextBuff1, gStatusConditionString_PoisonJpn);
						i++;
					}
					
					if(gBattleMons[battlerId].status1 & STATUS1_SLEEP)
					{
						gBattleMons[battlerId].status2 &= ~(STATUS2_NIGHTMARE);
						StringCopy(gBattleTextBuff1, gStatusConditionString_SleepJpn);
						i++;
					}
					
					if(gBattleMons[battlerId].status1 & STATUS1_PARALYSIS)
					{
						StringCopy(gBattleTextBuff1, gStatusConditionString_ParalysisJpn);
						i++;
					}
					
					if(gBattleMons[battlerId].status1 & STATUS1_BURN)
					{
						StringCopy(gBattleTextBuff1, gStatusConditionString_BurnJpn);
						i++;
					}
					
					if(gBattleMons[battlerId].status1 & STATUS1_FREEZE)
					{
						StringCopy(gBattleTextBuff1, gStatusConditionString_IceJpn);
						i++;
					}
					
					if(gBattleMons[battlerId].status2 & STATUS2_CONFUSION)
					{
						StringCopy(gBattleTextBuff1, gStatusConditionString_ConfusionJpn);
						i++;
					}
					
					if(!(i > 1))
						gBattleCommunication[MULTISTRING_CHOOSER] = 0;
					else
						gBattleCommunication[MULTISTRING_CHOOSER] = 1;
					
					gBattleMons[battlerId].status1 = 0;
					gBattleMons[battlerId].status2 &= ~(STATUS2_CONFUSION);
					BattleScriptExecute(BattleScript_BerryCureChosenStatusEnd2);
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_ATTRACT:
				if(gBattleMons[battlerId].status2 & STATUS2_INFATUATION)
				{
					gBattleMons[battlerId].status2 &= ~(STATUS2_INFATUATION);
					StringCopy(gBattleTextBuff1, gStatusConditionString_LoveJpn);
					BattleScriptExecute(BattleScript_BerryCureChosenStatusEnd2);
					gBattleCommunication[MULTISTRING_CHOOSER] = 0;
					effect = ITEM_EFFECT_OTHER;
				}
				
				break;
			}
			
			if(effect)
			{
				gBattleScripting.battler = battlerId;
				gPotentialItemEffectBattler = battlerId;
				gActiveBattler = gBattlerAttacker = battlerId;
				
				switch(effect)
				{
				case ITEM_STATUS_CHANGE:
					BtlController_EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, &gBattleMons[battlerId].status1);
					MarkBattlerForControllerExec(gActiveBattler);
					
					break;
				case ITEM_PP_CHANGE:
					if(!(gBattleMons[battlerId].status2 & STATUS2_TRANSFORMED) && !(gDisableStructs[battlerId].unk18_b & gBitTable[i])
						gBattleMons[battlerId].pp[i] = changedPP;
					
					break;
				}
			}
		}
		
		break;
	case 2:
		break;
	case 3:
		for(battlerId = 0; battlerId < gBattlersCount; battlerId++)
		{
			gLastUsedItem = gBattleMons[battlerId].item;
			
			if(gBattleMons[battlerId].item == ITEM_ENIGMA_BERRY)
			{
				battlerHoldEffect = gEnigmaBerries[battlerId].holdEffect;
				battlerHoldEffectParam = gEnigmaBerries[battlerId].holdEffectParam;
			}
			else
			{
				battlerHoldEffect = GetHoldEffect(gLastUsedItem);
				battlerHoldEffectParam = GetHoldEffectParam(gLastUsedItem);
			}
			
			switch(battlerHoldEffect)
			{
			case HOLD_EFFECT_CURE_PAR:
				if(gBattleMons[battlerId].status1 & STATUS1_PARALYSIS)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_PARALYSIS);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_BerryCureParRet;
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_PSN:
				if(gBattleMons[battlerId].status1 & STATUS1_PSN_ANY)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_PSN_ANY | STATUS1_TOXIC_COUNTER);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_BerryCurePsnRet;
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_BRN:
				if(gBattleMons[battlerId].status1 & STATUS1_BURN)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_BURN);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_BerryCureBrnRet;
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_FRZ:
				if(gBattleMons[battlerId].status1 & STATUS1_FREEZE)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_FREEZE);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_BerryCureFrzRet;
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_SLP:
				if(gBattleMons[battlerId].status1 & STATUS1_SLEEP)
				{
					gBattleMons[battlerId].status1 &= ~(STATUS1_SLEEP);
					gBattleMons[battlerId].status2 &= ~(STATUS2_NIGHTMARE);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_BerryCureSlpRet;
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_CURE_CONFUSION:
				if(gBattleMons[battlerId].status2 & STATUS2_CONFUSION)
				{
					gBattleMons[battlerId].status2 &= ~(STATUS2_CONFUSION);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_BerryCureConfusionRet;
					effect = ITEM_EFFECT_OTHER;
				}
				
				break;
			case HOLD_EFFECT_CURE_ATTRACT:
				if(gBattleMons[battlerId].status2 & STATUS2_INFATUATION)
				{
					gBattleMons[battlerId].status2 &= ~(STATUS2_INFATUATION);
					StringCopy(gBattleTextBuff1, gStatusConditionString_LoveJpn);
					BattleScriptPushCursor();
					gBattleCommunication[MULTISTRING_CHOOSER] = 0;
					gBattleScriptCurrInstr = BattleScript_BerryCureChosenStatusRet;
					effect = ITEM_EFFECT_OTHER;
				}
				
				break;
			case HOLD_EFFECT_CURE_STATUS:
				if(gBattleMons[battlerId].status1 & STATUS1_ANY || (gBattleMons[battlerId].status2 & STATUS2_CONFUSION))
				{
					if(gBattleMons[battlerId].status1 & STATUS1_PSN_ANY)
						StringCopy(gBattleTextBuff1, gStatusConditionString_PoisonJpn);
					
					if(gBattleMons[battlerId].status1 & STATUS1_SLEEP)
					{
						gBattleMons[battlerId].status2 &= ~(STATUS2_NIGHTMARE);
						StringCopy(gBattleTextBuff1, gStatusConditionString_SleepJpn);
					}
					
					if(gBattleMons[battlerId].status1 & STATUS1_PARALYSIS)
						StringCopy(gBattleTextBuff1, gStatusConditionString_ParalysisJpn);
					
					if(gBattleMons[battlerId].status1 & STATUS1_BURN)
						StringCopy(gBattleTextBuff1, gStatusConditionString_BurnJpn);
					
					if(gBattleMons[battlerId].status1 & STATUS1_FREEZE)
						StringCopy(gBattleTextBuff1, gStatusConditionString_IceJpn);
					
					if(gBattleMons[battlerId].status2 & STATUS2_CONFUSION)
						StringCopy(gBattleTextBuff1, gStatusConditionString_ConfusionJpn);
					
					gBattleMons[battlerId].status1 = 0;
					gBattleMons[battlerId].status2 &= ~(STATUS2_CONFUSION);
					BattleScriptPushCursor();
					gBattleCommunication[MULTISTRING_CHOOSER] = 0;
					gBattleScriptCurrInstr = BattleScript_BerryCureChosenStatusRet;
					effect = ITEM_STATUS_CHANGE;
				}
				
				break;
			case HOLD_EFFECT_RESTORE_STATS:
				for(i = 0; i < BATTLE_STATS_NO; i++)
				{
					if(gBattleMons[battlerId].statStages[i] < 6)
					{
						gBattleMons[battlerId].statStages[i] = 6;
						effect = ITEM_STATS_CHANGE;
					}
				}
				
				if(effect)
				{
					gBattleScripting.battler = battlerId;
					gPotentialItemEffectBattler = battlerId;
					gActiveBattler = gBattlerAttacker = battlerId;
					BattleScriptPushCursor();
					gBattlescriptCurrInstr = BattleScript_WhiteHerbRet;
					return effect;
				}
				
				break;
			}

			if(effect)
			{
				gBattleScripting.battler = battlerId;
				gPotentialItemEffectBattler = battlerId;
				gActiveBattler = battlerId;
				BtlController_EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, &gBattleMons[gActiveBattler].status1);
				MarkBattlerForControllerExec(gActiveBattler);
				break;
			}
		}
		
		break;
	case 4:
		if(gBattleMoveDamage)
		{
			switch(atkHoldEffect)
			{
			case HOLD_EFFECT_FLINCH:
				if(!(gMoveResultFlags & MOVE_RESULT_NO_EFFECT) && TARGET_TURN_DAMAGED && (Random() % 100) < atkHoldEffectParam && (gBattleMoves[gCurrentMove].flags & FLAG_KINGSROCK_AFFECTED) && gBattleMons[gBattlerTarget].hp)
				{
					gBattleCommunication[MOVE_EFFECT_BYTE] = MOVE_EFFECT_FLINCH;
					BattleScriptPushCursor();
					SetMoveEffect(0, 0);
					BattleScriptPop();
				}
				
				break;
			case HOLD_EFFECT_SHELL_BELL:
				if(!(gMoveResultFlags & MOVE_RESULT_NO_EFFECT) && gSpecialStatuses[gBattlerTarget].dmg != 0 && gSpecialStatuses[gBattlerTarget].dmg != 0xFFFF && gBattlerAttacker != gBattlerTarget && gBattleMons[gBattlerAttacker].hp != gBattleMons[gBattlerAttacker].maxHP && gBattleMons[gBattlerAttacker].hp)
				{
					gLastUsedItem = atkItem;
					gPotentialItemEffectBattler = gBattlerAttacker;
					gBattleScripting.battler = gBattlerAttacker;
					gBattleMoveDamage = -gSpecialStatuses[gBattlerTarget].dmg / atkHoldEffectParam;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = -1;
					
					gSpecialStatuses[gBattlerTarget].dmg = 0;
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_ItemHealHP_Ret;
					effect++;
				}
				
				break;
			}
		}
		
		break;
	}
	
	return effect;
}