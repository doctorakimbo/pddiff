(carryover: move, gLastUsedAbility, effect, battler, caseID, speciesAtk, speciesDef, pidAtk, pidDef)
...
if(gBattleTypeFlags & 0xA000 != 0x8000 && (gLastUsedAbility != ABILITY_INTIMIDATE || gLastUsedAbility != ABILITY_RUN_AWAY?))
{
	GET_MOVE_TYPE(move, moveType);

	switch(caseID)
	{
	case ABILITYEFFECT_ON_SWITCHIN:
		if(gBattlerAttacker >= gBattlersCount)
			gBattlerAttacker = battler;
		
		switch(gLastUsedAbility)
		{
		case ABILITYEFFECT_SWITCH_IN_WEATHER:
			switch(weather_get_current())
			{
			case 3:
			case 5:
			case 0xD:
				if(!(gBattleWeather & WEATHER_RAIN_ANY))
				{
					gBattleWeather = (WEATHER_RAIN_TEMPORARY | WEATHER_RAIN_PERMANENT);
					gBattleScripting.animArg1 = B_ANIM_RAIN_CONTINUES;
					gBattleScripting.battler = battler;
					effect++;
				}
				
				break;
			case 8:
				if(!(gBattleWeather & WEATHER_SANDSTORM_ANY))
				{
					gBattleWeather = (WEATHER_SANDSTORM_PERMANENT | WEATHER_SANDSTORM_TEMPORARY);
					gBattleScripting.animArg1 = B_ANIM_SANDSTORM_CONTINUES;
					gBattleScripting.battler = battler;
					effect++;
				}
				
				break;
			case 0xC:
				if(!(gBattleWeather & WEATHER_SUN_ANY))
				{
					gBattleWeather = (WEATHER_SUN_PERMANENT | WEATHER_SUN_TEMPORARY);
					gBattleScripting.animArg1 = B_ANIM_SUN_CONTINUES;
					gBattleScripting.battler = battler;
					effect++;
				}
			}
			
			if(effect)
			{
				gBattleCommunication[MULTISTRING_CHOOSER] = weather_get_current();
				BattleScriptPushCursorAndCallback(BattleScript_OverworldWeatherStarts);
			}
			
			break;
		case ABILITY_DRIZZLE:
			if(!(gBattleWeather & WEATHER_RAIN_PERMANENT))
			{
				gBattleWeather = (WEATHER_RAIN_PERMANENT | WEATHER_RAIN_TEMPORARY);
				BattleScriptPushCursorAndCallback(BattleScript_DrizzleActivates);
				gBattleScripting.battler = battler;
				effect++;
			}
			
			break;
		case ABILITY_SAND_STREAM:
			if(!(gBattleWeather & WEATHER_SANDSTORM_PERMANENT))
			{
				gBattleWeather = (WEATHER_SANDSTORM_PERMANENT | WEATHER_SANDSTORM_TEMPORARY);
				BattleScriptPushCursorAndCallback(BattleScript_SandstreamActivates);
				gBattleScripting.battler = battler;
				effect++;
			}
			
			break;
		case ABILITY_DROUGHT:
			if(!(gBattleWeather & WEATHER_SUN_PERMANENT))
			{
				gBattleWeather = (WEATHER_SUN_PERMANENT | WEATHER_SUN_TEMPORARY);
				BattleScriptPushCursorAndCallback(BattleScript_DroughtActivates)
				gBattleScripting.battler = battler;
				effect++;
			}
			
			break;
		case ABILITY_INTIMIDATE:
			if(!(gSpecialStatuses[battler].intimidatedMon))
			{
				gStatuses3[battler] |= STATUS3_INTIMIDATE_POKES;
				gSpecialStatuses[battler].intimidatedMon = 1;
			}
			
			break;
		case ABILITY_FORECAST:
			effect = CastformDataTypeChange(battler);
			
			if(effect)
			{
				BattleScriptPushCursorAndCallback(BattleScript_CastformChange);
				gBattleScripting.battler = battler;
				*(&gBattleStruct->formToChangeInto) = effect - 1;
			}
			
			break;
		case ABILITY_TRACE:
			if(gSpecialStatuses[battler].traced)
			{
				gStatuses3[battler] |= STATUS3_TRACE;
				gSpecialStatuses[battler].traced = 1;
			}
			
			break;
		case ABILITY_CLOUD_NINE:
		case ABILITY_AIR_LOCK:
			for(target1 = 0; target1 < gBattlersCount; target1++)
			{
				effect = CastformDataTypeChange(target1);
				
				if(effect)
				{
					BattleScriptPushCursorAndCallback(BattleScript_CastformChange);
					gBattleScripting.battler = target1;
					*(&gBattleStruct->formToChangeInto) = effect - 1;
					break;
				}
			}
		}
		
		break;
	case ABILITYEFFECT_ENDTURN:
		if(gBattleMons[battler].hp != 0)
		{
			gBattlerAttacker = battler;
			
			switch(gLastUsedAbility)
			{
			case ABILITY_RAIN_DISH:
				if(WEATHER_HAS_EFFECT && (gBattleWeather & WEATHER_RAIN_ANY) && gBattleMons[battler].maxHP > gBattleMons[battler].hp)
				{
					BattleScriptPushCursorAndCallback(BattleScript_RainDishActivates);
					gBattleMoveDamage = gBattleMons[battler].maxHP / 16;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					gBattleMoveDamage = -gBattleMoveDamage;
					effect++;
				}
				
				break
			case ABILITY_SHED_SKIN:
				if((gBattleMons[battler].status1 & STATUS1_ANY) && (Random() % 3) == 0)
				{
					if(gBattleMons[battler].status1 & (STATUS1_POISON | STATUS1_TOXIC_POISON))
						StringCopy(gBattleTextBuff1, gStatusConditionString_PoisonJpn);
						
					if(gBattleMons[battler].status1 & STATUS1_SLEEP)
						StringCopy(gBattleTextBuff1, gStatusConditionString_SleepJpn);

					if(gBattleMons[battler].status1 & STATUS1_PARALYSIS)
						StringCopy(gBattleTextBuff1, gStatusConditionString_ParalysisJpn);
					
					if(gBattleMons[battler].status1 & STATUS1_BURN)
						StringCopy(gBattleTextBuff1, gStatusConditionString_BurnJpn);
					
					if(gBattleMons[battler].status1 & STATUS1_FREEZE)
						StringCopy(gBattleTextBuff1, gStatusConditionString_IceJpn);
					
					gBattleMons[battler].status1 = 0;
					gBattleMons[battler].status2 &= ~(STATUS2_NIGHTMARE);
					gBattleScripting.battler = gActiveBattler = battler;
					BattleScriptPushCursorAndCallback(BattleScript_ShedSkinActivates);
					EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, &gBattleMons[battler].status1);
					MarkBattlerForControllerExec(gActiveBattler);
					effect++;
				}
				
				break
			case ABILITY_SPEED_BOOST:
				if(gBattleMons[battler].statStages[STAT_SPEED] < 0xC && gDisableStructs[battler].isFirstTurn != 2)
				{
					gBattleMons[battler].statStages[STAT_SPEED]++;
					gBattleScripting.animArg1 = 0x11;
					gBattleScripting.animArg2 = 0x11;
					BattleScriptPushCursorAndCallback(BattleScript_SpeedBoostActivates);
					gBattleScripting.battler = battler;
					effect++
				}
				
				break;
			case ABILITY_TRUANT:
				gDisableStructs[gBattlerAttacker].truantCounter ^= 1;
			}
		}
		
		break
	case ABILITYEFFECT_MOVES_BLOCK:	
		if(gLastUsedAbility == ABILITY_SOUNDPROOF)
		{
			for(i = 0; sSoundMovesTable[i] != 0xFFFF; i++)
			{
				if(sSoundMovesTable[i] == move)
					break;
			}
			
			if(sSoundMovesTable[i] != 0xFFFF)
			{
				if(gBattleMons[gBattlerAttacker].status2 & STATUS2_MULTIPLETURNS)
					gHitMarker |= HITMARKER_NO_PPDEDUCT;
				
				gBattleScriptCurrInstr = BattleScript_SoundproofProtected;
				effect = 1;
			}
		}
		
		break;
	case ABILITYEFFECT_ABSORBING:
		if(move)
		{
			switch(gLastUsedAbility)
			{
			case ABILITY_VOLT_ABSORB:
				if(moveType == TYPE_ELECTRIC && gBattleMoves[move].power != 0)
				{
					if(gProtectStructs[gBattlerAttacker].notFirstStrike)
						gBattleScriptCurrInstr = BattleScript_MoveHPDrain;
					else
						gBattleScriptCurrInstr = BattleScript_MoveHPDrain_PPLoss;
					
					effect = 1;
				}
				
				break
			case ABILITY_WATER_ABSORB:
				if(moveType == TYPE_WATER && gBattleMoves[move].power != 0)
				{
					if(gProtectStructs[gBattlerAttacker].notFirstStrike)
						gBattleScriptCurrInstr = BattleScript_MoveHPDrain;
					else
						gBattleScriptCurrInstr = BattleScript_MoveHPDrain_PPLoss;
					
					effect = 1;
				}
				
				break
			case ABILITY_FLASH_FIRE:
				if(moveType == TYPE_FIRE && !(gBattleMons[battler].status1 & STATUS1_FREEZE))
				{
					if(!(gBattleResources->flags->flags[battler] & UNKNOWN_FLAG_FLASH_FIRE))
					{
						gBattleCommunication[MULTISTRING_CHOOSER] = 0;
						
						if(gProtectStructs[gBattlerAttacker].notFirstStrike)
							gBattlescriptCurrInstr = BattleScript_FlashFireBoost;
						else
							gBattlescriptCurrInstr = BattleScript_FlashFireBoostPPLoss;
						
						data_02023FF4 = gBattlescriptCurrInstr
						*((battler * 4) + *(*data_02023FF4 + 4)) |= UNKNOWN_FLAG_FLASH_FIRE;
						effect = 2;
					}
					else
					{
						gBattleCommunication[MULTISTRING_CHOOSER] = 1;
					
						if(gProtectStructs[gBattlerAttacker].notFirstStrike)
							gBattleScriptCurrInstr = BattleScript_FlashFireBoost;
						else
							gBattleScriptCurrInstr = BattleScript_FlashFireBoostPPLoss;
						
						effect = 2;
					}
				}
			}
			
			if(effect == 1)
			{
				if(gBattleMons[battler].maxHP == gBattleMons[battler].hp)
				{
					if(gProtectStructs[gBattlerAttacker].notFirstStrike)
						gBattleScriptCurrInstr = BattleScript_MonMadeMoveUseless;
					else
						gBattleScriptCurrInstr = BattleScript_MonMadeMoveUselessPPLoss;
				}
				else
				{
					gBattleMoveDamage = gBattleMons[battler].maxHP / 4;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;
					
					gBattleMoveDamage = -gBattleMoveDamage;
				}
			}
		}
		
		break;
	case ABILITYEFFECT_CONTACT:
		if(!(gMoveResultFlags & RESULT_NO_EFFECT) && TARGET_TURN_DAMAGED)
		{
			switch(gLastUsedAbility)
			{
			case ABILITY_COLOR_CHANGE:
				if(move != MOVE_STRUGGLE && gBattleMoves[move].power != 0 && !IS_BATTLER_OF_TYPE(battler, moveType) && gBattleMons[battler].hp != 0)
				{
					SET_BATTLER_TYPE(battler, moveType);
					PREPARE_TYPE_BUFFER(gBattleTextBuff1, moveType);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_ColorChangeActivates;
					effect++;
				}
				
				break;
			case ABILITY_ROUGH_SKIN:
				if(gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT))
				{
					gBattleMoveDamage = gBattleMons[gBattlerAttacker].maxHP / 16;
					
					if(gBattleMoveDamage == 0)
						gBattleMoveDamage = 1;

					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_RoughSkinActivates;
					effect++;
				}
				
				break
			case ABILITY_EFFECT_SPORE:
				if(gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && (Random() % 10) == 0)
				{
					do
					{
						gBattleCommunication[MOVE_EFFECT_BYTE] = Random() & 3;
					} while(gBattleCommunication[MOVE_EFFECT_BYTE] == 0);
					
					if(gBattleCommunication[MOVE_EFFECT_BYTE] == MOVE_EFFECT_BURN)
						gBattleCommunication[MOVE_EFFECT_BYTE] += 2; // MOVE_EFFECT_PARALYSIS
					
					gBattleCommunication[MOVE_EFFECT_BYTE] += MOVE_AFFECTS_USER;
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_ApplySecondaryEffect;
					gHitMarker |= HITMARKER_IGNORE_SAFEGUARD;
					effect++;
				}
				
				break
			case ABILITY_POISON_POINT:
				if(gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && (Random() % 10) == 0)
				{
					gBattleCommunication[MOVE_EFFECT_BYTE] = MOVE_AFFECTS_USER | MOVE_EFFECT_POISON;
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_ApplySecondaryEffect;
					gHitMarker |= HITMARKER_IGNORE_SAFEGUARD;
					effect++;
				}
				
				break
			case ABILITY_STATIC:
				if(gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && (Random() % 10) == 0)
				{
					gBattleCommunication[MOVE_EFFECT_BYTE] = MOVE_AFFECTS_USER | MOVE_EFFECT_PARALYSIS;
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_ApplySecondaryEffect;
					gHitMarker |= HITMARKER_IGNORE_SAFEGUARD;
					effect++;
				}
				
				break
			case ABILITY_FLAME_BODY:
				if(gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && (Random() % 10) == 0)
				{
					gBattleCommunication[MOVE_EFFECT_BYTE] = MOVE_AFFECTS_USER | MOVE_EFFECT_BURN;
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_ApplySecondaryEffect;
					gHitMarker |= HITMARKER_IGNORE_SAFEGUARD;
					effect++;
				}
				
				break
			case ABILITY_CUTE_CHARM:
				if(gBattleMons[gBattlerAttacker].hp != 0 && !gProtectStructs[gBattlerAttacker].confusionSelfDmg && (gBattleMoves[move].flags & FLAG_MAKES_CONTACT) && gBattleMons[gBattlerTarget].hp != 0 && (Random() % 3) == 0 && gBattleMons[gBattlerAttacker].ability != ABILITY_OBLIVIOUS && GetGenderFromSpeciesAndPersonality(speciesAtk, pidAtk) != GetGenderFromSpeciesAndPersonality(speciesDef, pidDef) && !(gBattleMons[gBattlerAttacker].status2 & STATUS2_INFATUATION) && GetGenderFromSpeciesAndPersonality(speciesAtk, pidAtk) != 0xFF && GetGenderFromSpeciesAndPersonality(speciesDef, pidDef) != 0xFF)
				{
					gBattleMons[gBattlerAttacker].status2 |= STATUS2_INFATUATED_WITH(gBattlerTarget);
					BattleScriptPushCursor();
					gBattleScriptCurrInstr = BattleScript_CuteCharmActivates;
					effect++;
				}
			}
		}
		
		break
	case ABILITYEFFECT_IMMUNITY:
		r4 = 0
		
		for(battler = 0; battler < gBattlersCount; battler++)
        {
			lbl181:
			switch(gBattleMons[battler].ability)
			{
			case ABILITY_IMMUNITY:
				if(gBattleMons[battler].status1 & (STATUS1_POISON | STATUS1_TOXIC_POISON | STATUS1_TOXIC_COUNTER))
				{
					StringCopy(gBattleTextBuff1, gStatusConditionString_PoisonJpn);
					effect = 1;
				}
				
				break
			case ABILITY_OWN_TEMPO:
				if(gBattleMons[battler].status2 & STATUS2_CONFUSION)
				{
					StringCopy(gBattleTextBuff1, gStatusConditionString_ConfusionJpn);
					effect = 2;
				}
				
				break
			case ABILITY_LIMBER:
				if(gBattleMons[battler].status1 & STATUS1_PARALYSIS)
				{
					StringCopy(gBattleTextBuff1, gStatusConditionString_ParalysisJpn);
					effect = 1;
				}
				
				break
			case ABILITY_INSOMNIA:
			case ABILITY_VITAL_SPIRIT:
				if(gBattleMons[battler].status1 & STATUS1_SLEEP)
				{
					gBattleMons[battler].status2 &= ~(STATUS2_NIGHTMARE);
					StringCopy(gBattleTextBuff1, gStatusConditionString_SleepJpn);
					effect = 1;
				}
				
				break
			case ABILITY_WATER_VEIL:
				if(gBattleMons[battler].status1 & STATUS1_BURN)
				{
					StringCopy(gBattleTextBuff1, gStatusConditionString_BurnJpn);
					effect = 1;
				}
				
				break
			case ABILITY_MAGMA_ARMOR:
				if(gBattleMons[battler].status1 & STATUS1_FREEZE)
				{
					StringCopy(gBattleTextBuff1, gStatusConditionString_IceJpn);
					effect = 1;
				}
			case ABILITY_OBLIVIOUS:
				if(gBattleMons[battler].status2 & STATUS2_INFATUATION)
				{
					StringCopy(gBattleTextBuff1, gStatusConditionString_LoveJpn);
					effect = 3;
				}
			}
			
			if(effect)
			{
				switch(effect)
				{
				case 1:
					gBattleMons[battler].status1 = 0;
					break
				case 2:
					gBattleMons[battler].status2 &= ~(STATUS2_CONFUSION);
					break
				case 3:
					gBattleMons[battler].status2 &= ~(STATUS2_INFATUATION);
				}
				
				BattleScriptPushCursor();
				gBattleScriptCurrInstr = BattleScript_AbilityCuredStatus;
				gBattleScripting.battler = battler;
				gActiveBattler = battler;
				EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, data_02023C30[gActiveBattler]);
				MarkBattlerForControllerExec(gActiveBattler);
				return effect;
			}
		}
		
		break;
	...
	}

	lblend:
	if(effect && caseID <= ABILITYEFFECT_CHECK_OTHER_SIDE && gLastUsedAbility != 0xFF)
		RecordAbilityBattle(battler, gLastUsedAbility);
}

return effect;




script_1D9293: // BattleScript_SpeedBoostActivates
45 01 01 D4 3F 02 02 10 C2 00 12 40 00 3F
playanimation BS_ATTACKER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printstring STRINGID_PKMNRAISEDSPEED
waitmessage 0x40
end3