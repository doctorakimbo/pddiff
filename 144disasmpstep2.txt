GetBoxMonDataFromAnyBox(arg0, arg1, arg2)
{
	if(arg0 > 0x16 || arg1 > 0x1D)
		return 0
	
	r4 = fn_3C5D20_J(fn_3C5F84_J(arg0, arg1))
	r5 = GetBoxMonData(r4, arg2)
	Free(r4)
	return r5
}





fn_3C5F84_J(via_r3 arg0, via_r4 arg1)
{
	return *gPokemonStoragePtr + (arg0 * 0x5A0) + 4 + (arg1 * 0x30)
}





fn_3C5D20_J(arg0)
{
	r5 = AllocZeroed(0x50)
	ZeroBoxMonData(r5)
	SetBoxMonData(r5, 0, arg0)
	SetBoxMonData(r5, 1, arg0 + 4)
	SetBoxMonData(r5, 9, &CalculateBoxMonChecksum(r5))
	EncryptBoxMon(r5)
	SetBoxMonData(r5, 2, arg0 + 0xC)
	SetBoxMonData(r5, 3, data_1CDE31_J)
	SetBoxMonData(r5, 7, arg0 + 0x1E)

	for(r6 = 0x22; r6 <= 0x2E; r6++)
		fn_3C5DC2_J(arg0, r5, r6)

	for(r6 = 0x19; r6 <= 0x20; r6++)
		fn_3C5DC2_J(arg0, r5, r6)

	fn_3C5DC2_J(arg0, r5, 8)
	fn_3C5DC2_J(arg0, r5, 0x20)
	fn_3C5DC2_J(arg0, r5, 0x15)

	for(r6 = 0xB; r6 <= 0x10; r6++)
		fn_3C5DC2_J(arg0, r5, r6)

	MonRestorePP(r5)
	return r5
}





fn_3C5DC2_J(via_r4 arg0, via_r5 arg1, via_r6 arg2)
{
	SetBoxMonData(arg1, arg2, &fn_3C5DDE_J(arg0, arg2))
}





fn_3C5DDE_J(arg0, arg1)
{
	switch(arg1)
	{
	case 2:
		return arg0 + 0xC
	case 3:
		return data_1CDE31_J
	case 7:
		return arg0 + 0x1E
	case 8:
		return *(arg0 + 0x26) >> 0xC
	case 0xB:
		return *(arg0 + 0x24)
	case 0xC:
		return LAST_22_BITS(*(arg0 + 0x26))
	case 0xD:
	case 0xE:
	case 0xF:
		return LOWER_TWO_BYTES(*(arg0 + 0x28) >> ((arg1 - 0xD) * 0xA))
	case 0x10:
		return (*(arg0 + 0x2B) >> 6) | (*(arg0 + 0x2C) << 2)
	case 0x15:
		return *(arg0 + 0x13)
	case 0x19:
		return *(arg0 + 0x2D) | (*(arg0 + 0x2E) << 8) | (LAST_5_BITS(*(arg0 + 0x2F)) << 0x10)
	case 0x1A:
	case 0x1B:
	case 0x1C:
	case 0x1D:
	case 0x1E:
	case 0x1F:
		return *(arg0 + 0x16 + (arg1 - 0x1A))
	case 0x20:
		return *(arg0 + 0x14)
	case 0x22:
		return LAST_TWO_BITS(*(arg0 + 0x2F) >> 5)
	case 0x23:
		return *(arg0 + 0x15)
	case 0x24:
		return *(arg0 + 0x16)
	case 0x25:
		return 4
	case 0x26:
		return *(arg0 + 0x17)
	case 0x27:
	case 0x28:
	case 0x29:
	case 0x2A:
	case 0x2B:
	case 0x2C:
		return LAST_FIVE_BITS(*(arg0 + 8) >> ((arg1 - 0x27) * 5))
	case 0x2D:
		return SECOND_HIGHEST_BIT(*(arg0 + 8))
	case 0x2E:
		if((*(arg0 + 0x2F) >> 7) != 0)
			return 2
		else
			return *(arg0 + 0xB) >> 7
	default:
		return arg0
	}
}