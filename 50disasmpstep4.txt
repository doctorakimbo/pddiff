ChangeStatBuffs(statValue, statId, flags, BS_ptr)
{
	certain = FALSE;
	notProtectAffected = FALSE;
	
	if(flags & MOVE_EFFECT_AFFECTS_USER)
		gActiveBattler = gBattlerAttacker;
	else
		gActiveBattler = gBattlerTarget;
	
	if(flags & MOVE_EFFECT_CERTAIN)
		certain++;
	
	if(flags & STAT_CHANGE_NOT_PROTECT_AFFECTED)
		notProtectAffected++;
	
	flags &= ~(MOVE_EFFECT_AFFECTS_USER & MOVE_EFFECT_CERTAIN & STAT_CHANGE_NOT_PROTECT_AFFECTED);
	
	if(gBattleMons[gActiveBattler].ability == ABILITY_CONTRARY)
		statValue ^= 0x80; // flips goesDown
	
	if(gBattleMons[gActiveBattler].ability == 0x56)
	{
		goesDown = statValue & 0x80;
		statValue = (statValue - goesDown) * 2;
		
		if(statValue > 0x60)
			statValue = 0x60;
		
		statValue |= goesDown;
	}
	
	gBattleScripting.statChanger = statId | statValue;
	PREPARE_STAT_BUFFER(gBattleTextBuff1, statId);
	
	if(statValue <= -1)
	{
		if(gBattlerAttacker != gBattlerTarget)
		{
			if(gBattleMons[gBattlerAttacker].ability != ABILITY_INFILTRATOR && gSideTimers[GET_BATTLER_SIDE(gActiveBattler)].mistTimer && !certain)
			{
				if(flags == STAT_CHANGE_BS_PTR) 
				{
					if(gSpecialStatuses[gActiveBattler].statLowered)
						gBattleScriptCurrInstr = BS_ptr;
					else
					{
						BattleScriptPush(BS_ptr);
						gBattleScripting.battler = gActiveBattler;
						gBattleScriptCurrInstr = BattleScript_MistProtected;
						gSpecialStatuses[gActiveBattler].statLowered = 1;
					}
				}
				
				return STAT_CHANGE_DIDNT_WORK;
			}
			elseif(notProtectAffected != TRUE && JumpIfMoveAffectedByProtect(0))
			{
				gBattleScriptCurrInstr = BattleScript_ButItFailed;
				return STAT_CHANGE_DIDNT_WORK;
			}
			elseif(!certain && gBattleMons[gBattlerAttacker].ability != 0x68 && gBattleMons[gBattlerAttacker].ability - 0xA3 > 1)
			{
				ability = gBattleMons[gActiveBattler].ability
				
				if(ability == ABILITY_SHIELD_DUST && flags == 0)
					return STAT_CHANGE_DIDNT_WORK;
				elseif((ability == ABILITY_KEEN_EYE && statId == STAT_ACC) || (ability == ABILITY_HYPER_CUTTER && statId == STAT_ATK) || (ability == ABILITY_BIG_PECKS && statId == STAT_DEF))
				{
					if(flags == STAT_CHANGE_BS_PTR)
					{
						BattleScriptPush(BS_ptr);
						
						if(ability == ABILITY_FLOWER_VEIL)
							gBattleScriptCurrInstr = BattleScript_FlowerVeilProtects;
						else
							gBattleScriptCurrInstr = BattleScript_AbilityNoSpecificStatLoss;
						
						gBattleScripting.battler = gActiveBattler;
						gLastUsedAbility = ability;
						RecordAbilityBattle(gActiveBattler, ability);
					}
					
					return STAT_CHANGE_DIDNT_WORK;
				}
				elseif(ability == ABILITY_CLEAR_BODY || ability == ABILITY_WHITE_SMOKE || CheckLeafGuardAndFlowerVeil(gActiveBattler) == ABILITY_FLOWER_VEIL)
				{
					if(CheckLeafGuardAndFlowerVeil(gActiveBattler) == ABILITY_FLOWER_VEIL)
						ability = ABILITY_FLOWER_VEIL;
						
					if(flags == STAT_CHANGE_BS_PTR)
					{
						if(gSpecialStatuses[gActiveBattler].statLowered)
							gBattleScriptCurrInstr = BS_ptr;
						else
						{
							BattleScriptPush(BS_ptr);
							gBattleScriptCurrInstr = BattleScript_AbilityNoStatLoss;
							gBattleScripting.battler = gActiveBattler;
							gLastUsedAbility = ability;
							RecordAbilityBattle(gActiveBattler, ability);
							gSpecialStatuses[gActiveBattler].statLowered = 1;
						}
					}
					
					return STAT_CHANGE_DIDNT_WORK;
				}
			}
		}
		
		gBattleTextBuff2[0] = B_BUFF_PLACEHOLDER_BEGIN;
		
		statValue = -GET_STAT_BUFF_VALUE(statValue);
		
		if(statValue <= -3)
		{
			gBattleTextBuff2[1] = B_BUFF_STRING;
			gBattleTextBuff2[2] = STRINGID_STATSEVERELY;
			gBattleTextBuff2[3] = STRINGID_STATSEVERELY >> 8;
			index = 4;
		}
		elseif(statValue == -2)
		{
			gBattleTextBuff2[1] = B_BUFF_STRING;
			gBattleTextBuff2[2] = STRINGID_STATHARSHLY;
			gBattleTextBuff2[3] = STRINGID_STATHARSHLY >> 8;
			index = 4;
		}
		else
			index = 1;
		
		gBattleTextBuff2[index] = B_BUFF_STRING;
		index++;
		gBattleTextBuff2[index] = STRINGID_STATFELL;
		index++;
		gBattleTextBuff2[index] = STRINGID_STATFELL >> 8;
		index++;
		gBattleTextBuff2[index] = B_BUFF_EOS;
		
		if(gBattleMons[gActiveBattler].statStages[statId] == 0)
			gBattleCommunication[MULTISTRING_CHOOSER] = 2;
		else	
			gBattleCommunication[MULTISTRING_CHOOSER] = (gBattlerTarget == gActiveBattler);
	}
	else
	{
		statValue = GET_STAT_BUFF_VALUE(statValue);
		gBattleTextBuff2[0] = B_BUFF_PLACEHOLDER_BEGIN;
		
		if(statValue >= 3)
		{
			gBattleTextBuff2[1] = B_BUFF_STRING;
			gBattleTextBuff2[2] = STRINGID_STATDRASTICALLY;
			gBattleTextBuff2[3] = STRINGID_STATDRASTICALLY >> 8;
			index = 4;
		}
		elseif(statValue == 2)
		{
			gBattleTextBuff2[1] = B_BUFF_STRING;
			gBattleTextBuff2[2] = STRINGID_STATSHARPLY;
			gBattleTextBuff2[3] = STRINGID_STATSHARPLY >> 8;
			index = 4;
		}
		else
			index = 1;
		
		gBattleTextBuff2[index] = B_BUFF_STRING;
		index++;
		gBattleTextBuff2[index] = STRINGID_STATROSE;
		index++;
		gBattleTextBuff2[index] = STRINGID_STATROSE >> 8;
		index++;
		gBattleTextBuff2[index] = B_BUFF_EOS;
		
		if(gBattleMons[gActiveBattler].statStages[statId] == 0xC)
            gBattleCommunication[MULTISTRING_CHOOSER] = 2;
        else
            gBattleCommunication[MULTISTRING_CHOOSER] = (gBattlerTarget == gActiveBattler);
	}
	
	gBattleMons[gActiveBattler].statStages[statId] += statValue;
	
	if(gBattleMons[gActiveBattler].statStages[statId] < 0)
		gBattleMons[gActiveBattler].statStages[statId] = 0;
	
	if(gBattleMons[gActiveBattler].statStages[statId] > 0xC)
		gBattleMons[gActiveBattler].statStages[statId] = 0xC;
	
	if(gBattleCommunication[MULTISTRING_CHOOSER] == 2 && (flags & STAT_CHANGE_BS_PTR))
		gMoveResultFlags |= MOVE_RESULT_MISSED;
	
	if(gBattleCommunication[MULTISTRING_CHOOSER] == 2 && !(flags & STAT_CHANGE_BS_PTR))
		return STAT_CHANGE_DIDNT_WORK;
	
	return STAT_CHANGE_WORKED;
}




BattleScript_FlowerVeilProtects: @22A00_J, 23200_E
(39 20 00 10 8C 01 12 40 00 2E E7 3D 02 02 03 3C) = 
(39 20 00 10 95 01 12 40 00 2E 87 3E 02 02 03 3C)
pause 0x20
printstring STRINGID_TEAMPROTECTEDBYABILITY
waitmessage 0x40
setbyte cMULTISTRING_CHOOSER, 3
return

compare to BattleScript_AbilityNoSpecificStatLoss:
pause 0x20
printstring STRINGID_PKMNSXPREVENTSYLOSS
waitmessage 0x40
setbyte cMULTISTRING_CHOOSER, 3
return