CreateNPCTrainerParty(*party, trainerNum)
{
	nameHash = 0;

	if(trainerNum == 0x400)
		return 0;
	
	if(gBattleTypeFlags & BATTLE_TYPE_TRAINER && !(gBattleTypeFlags & (BATTLE_TYPE_FRONTIER | BATTLE_TYPE_EREADER_TRAINER | BATTLE_TYPE_x4000000)))
	{
		ZeroEnemyPartyMons();

		for(i = 0; i < gTrainers[trainerNum].partySize; i++)
		{
			if(gTrainers[trainerNum].doubleBattle == TRUE)
				personalityValue = 0x80;
			else
				personalityValue = gTrainers[trainerNum].encounterMusic_gender + 0x80; // ???
			
			for(j = 0; gTrainers[trainerNum].trainerName[j] != EOS; j++)
			{
				nameHash += gTrainers[trainerNum].trainerName[j];
			}

			switch(gTrainers[trainerNum].partyFlags)
			{
			case 0:
				partyData = gTrainers[trainerNum].party.NoItemDefaultMoves;
				
				// partyData[i].species record size = 8
				for (j = 0; gSpeciesNames[partyData[i].species][j] != EOS; j++)
                    nameHash += gSpeciesNames[partyData[i].species][j];
				
				personalityValue += nameHash << 8;
				partyData[i].iv * 31 / 255;
				CreateMon(&party[i], partyData[i].species, partyData[i].lvl, fixedIV, TRUE, personalityValue, OT_ID_RANDOM_NO_SHINY, 0);
				break;
			case F_TRAINER_PARTY_CUSTOM_MOVESET:
				partyData = gTrainers[trainerNum].party.NoItemCustomMoves;
				
				// partyData[i].species record size = 8
				for (j = 0; gSpeciesNames[partyData[i].species][j] != EOS; j++)
                    nameHash += gSpeciesNames[partyData[i].species][j];
				
				personalityValue += nameHash << 8;
				partyData[i].iv * 31 / 255;
				CreateMon(&party[i], partyData[i].species, partyData[i].lvl, fixedIV, TRUE, personalityValue, OT_ID_RANDOM_NO_SHINY, 0);
				
				for (j = 0; j < 4; j++)
                {
                    SetMonData(&party[i], MON_DATA_MOVE1 + j, &partyData[i].moves[j]);
                    SetMonData(&party[i], MON_DATA_PP1 + j, &gBattleMoves[partyData[i].moves[j]].pp);
                }
				break;
			case F_TRAINER_PARTY_HELD_ITEM:
				partyData = gTrainers[trainerNum].party.ItemDefaultMoves;
				
				// partyData[i].species record size = 8
				for (j = 0; gSpeciesNames[partyData[i].species][j] != EOS; j++)
                    nameHash += gSpeciesNames[partyData[i].species][j];
				
				personalityValue += nameHash << 8;
				partyData[i].iv * 31 / 255;
				CreateMon(&party[i], partyData[i].species, partyData[i].lvl, fixedIV, TRUE, personalityValue, OT_ID_RANDOM_NO_SHINY, 0);
				
				SetMonData(&party[i], MON_DATA_HELD_ITEM, &partyData[i].heldItem);
				break;
			case F_TRAINER_PARTY_CUSTOM_MOVESET | F_TRAINER_PARTY_HELD_ITEM:
				partyData = gTrainers[trainerNum].party.ItemCustomMoves;
				
				// partyData[i].species record size = 8
				for (j = 0; gSpeciesNames[partyData[i].species][j] != EOS; j++)
                    nameHash += gSpeciesNames[partyData[i].species][j];
				
				personalityValue += nameHash << 8;
				partyData[i].iv * 31 / 255;
				CreateMon(&party[i], partyData[i].species, partyData[i].lvl, fixedIV, TRUE, personalityValue, OT_ID_RANDOM_NO_SHINY, 0);
				
				SetMonData(&party[i], MON_DATA_HELD_ITEM, &partyData[i].heldItem);
				
				for (j = 0; j < 4; j++)
                {
                    SetMonData(&party[i], MON_DATA_MOVE1 + j, &partyData[i].moves[j]);
                    SetMonData(&party[i], MON_DATA_PP1 + j, &gBattleMoves[partyData[i].moves[j]].pp);
                }
			}
		}
		
		if(*data_020385E2 <= 0x2E6)
		{
			src = data_09400000[*data_020385E2]; // record size 4
			
			if(src != 0)
			{
				for(dest = data_02023F8C; dest != data_020241E4; dest += 4)
				{ 
					*dest = *src;
					src += 4;
				}
			}
		}

		gBattleTypeFlags |= gTrainers[trainerNum].doubleBattle;
	}
	
	return gTrainers[trainerNum].partySize;
}