SetMoveEffect(primary, certain)
{
	statusChanged = FALSE;
	affectsUser = 0;
	noSunCanFreeze = TRUE;
	
	if(gBattleCommunication[MOVE_EFFECT_BYTE] & MOVE_EFFECT_AFFECTS_USER)
	{
		gEffectBattler = gBattlerAttacker;
		gBattleCommunication[MOVE_EFFECT_BYTE] &= ~(MOVE_EFFECT_AFFECTS_USER);
		affectsUser = MOVE_EFFECT_AFFECTS_USER;
		gBattleScripting.battler = gBattlerTarget;
	}
	else
	{
		gEffectBattler = gBattlerTarget;
		gBattleScripting.battler = gBattlerAttacker;
	}
	
	if((gBattleTypeFlags & 0x10000) && gBattleCommunication[MOVE_EFFECT_BYTE] != MOVE_EFFECT_SLEEP && GetBattlerSide(gEffectBattler) == B_SIDE_OPPONENT)
		INCREMENT_RESET_RETURN
		
	if(gBattleMons[gBattlerAttacker].ability != ABILITY_MOLD_BREAKER && (gBattleMons[gBattlerAttacker].ability - 0xA3) > 1 && gBattleMons[gEffectBattler].ability == ABILITY_SHIELD_DUST && !(gHitMarker & HITMARKER_IGNORE_SAFEGUARD) && !primary && gBattleCommunication[MOVE_EFFECT_BYTE] <= 9)
		INCREMENT_RESET_RETURN
		
	if(gBattleMons[gBattlerAttacker].ability != ABILITY_INFILTRATOR && !(gBattleMoves[gCurrentMove].typeFlags1 & FLAG_SOUND_MOVE) && (gBattleMons[gEffectBattler].status2 & STATUS2_SUBSTITUTE))
		INCREMENT_RESET_RETURN
		
	if((gSideStatuses[GET_BATTLER_SIDE(gEffectBattler)] & SIDE_STATUS_SAFEGUARD) && !(gHitMarker & HITMARKER_IGNORE_SAFEGUARD) && !primary && gBattleCommunication[MOVE_EFFECT_BYTE] <= 7)
		INCREMENT_RESET_RETURN
		
	if(gBattleMons[gEffectBattler].hp == 0 && gBattleCommunication[MOVE_EFFECT_BYTE] != MOVE_EFFECT_PAYDAY && gBattleCommunication[MOVE_EFFECT_BYTE] != MOVE_EFFECT_STEAL_ITEM)
		INCREMENT_RESET_RETURN
		
	if(gBattleCommunication[MOVE_EFFECT_BYTE] <= 6)
	{
		if(!CheckLeafGuardAndFlowerVeil(gEffectBattler))
		{
			switch(sStatusFlagsForMoveEffects[gBattleCommunication[MOVE_EFFECT_BYTE]])
			{
			case STATUS1_SLEEP:
				if(gBattleMons[gEffectBattler].ability != ABILITY_SWEET_VEIL && !GetAbilityUserOnSameSide(gEffectBattler, ABILITY_SWEET_VEIL))
				{
					if(gBattleMons[gEffectBattler].ability == ABILITY_SOUNDPROOF)
						goto lbl_+218
					
					for(gActiveBattler = 0; gActiveBattler < gBattlersCount; gActiveBattler++)
					{
						if(gBattleMons[gEffectBattler].status2 & STATUS2_UPROAR)
							break
					}

					goto lbl_+224
				}
				
				break;
			case STATUS1_POISON:
				goto lbl_+26C
			case STATUS1_BURN:
				goto lbl_+350
			case STATUS1_FREEZE:
				goto lbl_+426
			case STATUS1_PARALYSIS:
				if(!IS_BATTLER_OF_TYPE(gEffectBattler, TYPE_ELECTRIC))
				{
					if(gBattleMons[gEffectBattler].ability == ABILITY_LIMBER)
					{
						if(primary == TRUE || certain == MOVE_EFFECT_CERTAIN)
						{
							gLastUsedAbility = ABILITY_LIMBER;
							RecordAbilityBattle(gEffectBattler, ABILITY_LIMBER);
							BattleScriptPush(gBattleScriptCurrInstr + 1);
							gBattlescriptCurrInstr = BattleScript_PRLZPrevention;
							goto lbl_+2A0
						}
					}
					elseif(gBattleMons[gEffectBattler].status1 == 0)
						statusChanged = TRUE;
				}
				
				break;
			case STATUS1_TOXIC_POISON:
				goto lbl_+520
			}
		}
		
		if(!statusChanged)
			goto lbl_+774
			
		BattleScriptPush(gBattleScriptCurrInstr + 1);
		effect = sStatusFlagsForMoveEffects[gBattleCommunication[MOVE_EFFECT_BYTE]];
		
		if(effect == STATUS1_SLEEP)
			effect = (Random() % 3) + 2; // range 2-4
		
		gBattleMons[gEffectBattler].status1 |= effect;
		goto lbl_+6C0
	}
	
	if(gBattleMons[gEffectBattler].status2 & sStatusFlagsForMoveEffects[gBattleCommunication[MOVE_EFFECT_BYTE]])
		gBattleScriptCurrInstr++;
	else
	{
		switch(gBattleCommunication[MOVE_EFFECT_BYTE])
		{
		...
		case MOVE_EFFECT_FLINCH:
			if(gBattleMons[gBattlerAttacker].ability == ABILITY_MOLD_BREAKER || (gBattleMons[gBattlerAttacker].ability - 0xA3) <= 1)
			{
				gLastUsedAbility = ABILITY_INNER_FOCUS;
				RecordAbilityBattle(gEffectBattler, gBattleMons[gEffectBattler].ability)
				gBattleScriptCurrInstr = BattleScript_FlinchPrevention;
			}
			else
			{
				if(gBattleMons[gEffectBattler].ability == ABILITY_INNER_FOCUS)
				{
					if(primary == TRUE || certain == MOVE_EFFECT_CERTAIN)
					{
						gLastUsedAbility = ABILITY_INNER_FOCUS;
						RecordAbilityBattle(gEffectBattler, ABILITY_INNER_FOCUS);
						gBattleScriptCurrInstr = BattleScript_FlinchPrevention;
					}
					else
						gBattleScriptCurrInstr++;
				}
				else
				{
					if(GetBattlerTurnOrderNum(gEffectBattler) > gCurrentTurnActionNumber)
						gBattleMons[gEffectBattler].status2 |= STATUS2_FLINCHED;
					
					gBattleScriptCurrInstr++;
				}
			}
			
			break;
		case MOVE_EFFECT_UPROAR:
			if(!(gBattleMons[gBattlerAttacker].status2 & STATUS2_UPROAR))
			{
				gBattleMons[gBattlerAttacker].status2 |= STATUS2_MULTIPLETURNS;
				gLockedMoves[gBattlerAttacker] = gCurrentMove;
				gBattleMons[gBattlerAttacker].status2 |= ((Random() & 3) + 2) << 4;
				BattleScriptPush(gBattleScriptCurrInstr + 1);
				gBattleScriptCurrInstr = sMoveEffectBS_Ptrs[gBattleCommunication[MOVE_EFFECT_BYTE]];
			}
			else
				gBattleScriptCurrInstr++;
			break;
		...
		case MOVE_EFFECT_WRAP:
			if(gBattleMons[gEffectBattler].status2 & STATUS2_WRAPPED)
				gBattleScriptCurrInstr++;
			else
			{
				if(gBattleMons[gBattlerAttacker].ability != ABILITY_KLUTZ && GetHoldEffect(gBattleMons[gBattlerAttacker].item) == ITEM_EFFECT_GRIP_CLAW)
					turns = 7;
				else
					turns = (Random() & 1) + 5; // range 5-6
				
				gBattleMons[gEffectBattler].status2 |= (turns << 0xD);
				*(gBattleStruct->wrappedMove + gEffectBattler * 2 + 0) = gCurrentMove;
				*(gBattleStruct->wrappedBy + gEffectBattler) = gBattlerAttacker;
				BattleScriptPush(gBattleScriptCurrInstr + 1);
				gBattleScriptCurrInstr = BattleScript_MoveEffectWrap; // IMPORTANT - changed! specifically, table at 3FE5A0 repointed

				for(gBattleCommunication[MULTISTRING_CHOOSER] = 0; gBattleCommunication[MULTISTRING_CHOOSER] <= 6; gBattleCommunication[MULTISTRING_CHOOSER]++)
				{
					if(data_09303552_J[gBattleCommunication[MULTISTRING_CHOOSER]] == gCurrentMove)
						break;
				}
			}

			break;
		case MOVE_EFFECT_RECOIL_25:
			if(gCurrentMove == MOVE_STRUGGLE)
			{
				gBattleMoveDamage = gBattleMons[gEffectBattler].maxHP / 4;
				goto lbl_part10_5
			}
			else
			{
				denominator = 4;
				goto lbl_part10_2
			}
		...
		case MOVE_EFFECT_REMOVE_STATUS:
			if(!(gBattleMons[gBattlerTarget].status1 & STATUS1_ANY))
				gBattleScriptCurrInstr++;
			else
			{
				gBattleMons[gBattlerTarget].status1 &= -(STATUS1_ANY); // NOT ~(STATUS1_ANY) - research this
				gActiveBattler = gBattlerTarget;
				BtlController_EmitSetMonData(0, REQUEST_STATUS_BATTLE, 0, 4, &gBattleMons[gBattlerTarget].status1);
				MarkBattlerForControllerExec(gActiveBattler);
				BattleScriptPush(gBattleScriptCurrInstr + 1);
				gBattleScriptCurrInstr = BattleScript_TargetPRLZHeal;
			}
			break;
		...
		case MOVE_EFFECT_RECOIL_33:
			denominator = 3;

			lbl_part10_2:
			if(gBattleMons[gEffectBattler].ability == ABILITY_ROCK_HEAD || gBattleMons[gEffectBattler].ability == ABILITY_MAGIC_GUARD)
				gBattleScriptCurrInstr++;
			else
			{
				lbl_part10_4:
				gBattleMoveDamage = gHpDealt / denominator;

				lbl_part10_5:
				if(gBattleMoveDamage == 0)
					gBattleMoveDamage = 1;
				
				BattleScriptPush(gBattleScriptCurrInstr + 1);
				gBattleScriptCurrInstr = BattleScript_DoRecoil33; // skips native rock head check
			}
			
			break;
		...
		case MOVE_EFFECT_RECOIL_50: // 37
			denominator = 2;
			goto lbl_part10_2
		...
		}
	}
}





script_part1: @229DE_J
(47 45 02 01 34 3F 02 02 13 48 45 3C 08 12 40 00 3C) = 
(47 45 02 01 D4 3F 02 02 13 7C E5 3F 08 12 40 00 3C)
setgraphicalstatchangevalues
playanimation BS_EFFECT_BATTLER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printfromtable 083FE57C
waitmessage
return




script_part2: @229EF_J
(47 45 02 01 34 3F 02 02 13 54 45 3C 08 12 40 00 3C) = 
(47 45 02 01 D4 3F 02 02 13 88 E5 3F 08 12 40 00 3C)
setgraphicalstatchangevalues
playanimation BS_EFFECT_BATTLER, B_ANIM_STATS_CHANGE, sB_ANIM_ARG1
printfromtable 083FE588
waitmessage
return