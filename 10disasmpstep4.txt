...
case ENDTURN_INGRAIN:
	if((gStatuses3[gActiveBattler] & STATUS3_ROOTED) && gBattleMons[gActiveBattler].hp != gBattleMons[gActiveBattler].maxHP || gBattleMons[gActiveBattler].hp != 0)
	{
		itemOrAbilityVar = gBattleMons[gActiveBattler].ability
		
		if(itemOrAbilityVar != ABILITY_KLUTZ)
			itemOrAbilityVar = GetHoldEffect(gBattleMons[gActiveBattler].item)
		
		damage = gBattleMons[gActiveBattler].maxHP / 16;
		
		if(itemOrAbilityVar == ITEM_EFFECT_BIG_ROOT) // no danger here, if value is 51 it's always an item anyway
			damage = (damage * 13) / 10;
		
		if(damage == 0)
			damage = 1;
		
		gBattleMoveDamage = -damage;
		BattleScriptExecute(BattleScript_IngrainTurnHeal);
		effect++;
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_ABILITIES:
	if(AbilityBattleEffects(ABILITYEFFECT_ENDTURN, gActiveBattler, 0, 0, 0))
		effect++;
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_ITEMS1:
	if(ItemBattleEffects(1, gActiveBattler, 0))
		effect++;
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_ITEMS2:
	if(ItemBattleEffects(1, gActiveBattler, 1))
		effect++;
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_LEECH_SEED:
	if((gStatuses3[gActiveBattler] & STATUS3_LEECHSEED) && gBattleMons[gStatuses3[gActiveBattler] & STATUS3_LEECHSEED_BATTLER].hp != 0 && gBattleMons[gActiveBattler].hp != 0 && gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
	{
		damage = gBattleMons[gActiveBattler].maxHP / 8;
		
		if(damage == 0)
			damage = 1;
		
		gBattleMoveDamage = damage;
		gBattlerTarget = gStatuses3[gActiveBattler] & STATUS3_LEECHSEED_BATTLER;
		gBattleScripting.animArg1 = gStatuses3[gActiveBattler] & STATUS3_LEECHSEED_BATTLER;
		gBattleScripting.animArg2 = gActiveBattler;
		BattleScriptExecute(BattleScript_LeechSeedTurnDrain);
		effect++;
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_POISON:	
	if((gBattleMons[gActiveBattler].status1 & STATUS1_POISON) && gBattleMons[gActiveBattler].hp != 0 && gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
	{
		if(gBattleMons[gActiveBattler].ability == ABILITY_POISON_HEAL)
		{
			if(gBattleMons[gActiveBattler].maxHP != gBattleMons[gActiveBattler].hp)
			{
				damage = gBattleMons[gActiveBattler].maxHP / 8;
				
				if(damage == 0)
					damage = 1;
				
				gBattleMoveDamage = -damage;
				BattleScriptExecute(BattleScript_PoisonHealTurnHeal);
			}
		}
		else
		{
			damage = gBattleMons[gActiveBattler].maxHP / 8;
			
			if(damage == 0)
				damage = 1;
			
			gBattleMoveDamage = damage;
			BattleScriptExecute(BattleScript_PoisonTurnDmg);
		}
		
		effect++;
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_BAD_POISON:
	if((gBattleMons[gActiveBattler].status1 & STATUS1_TOXIC_POISON) && gBattleMons[gActiveBattler].hp != 0 && gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
	{
		if(gBattleMons[gActiveBattler].ability == ABILITY_POISON_HEAL)
		{
			if(gBattleMons[gActiveBattler].maxHP != gBattleMons[gActiveBattler].hp)
			{
				damage = gBattleMons[gActiveBattler].maxHP / 8;
				
				if(damage == 0)
					damage = 1;
				
				gBattleMoveDamage = -damage;
				BattleScriptExecute(BattleScript_PoisonHealTurnHeal);
			}
		}
		else
		{
			if(gBattleMons[gActiveBattler].status1 / 0x100 != 0xF)
				gBattleMons[gActiveBattler].status1 += 0x100

			damage = gBattleMons[gActiveBattler].maxHP / 16;
			
			if(damage == 0)
				damage = 1;
			
			gBattleMoveDamage = damage * (gBattleMons[gActiveBattler].status1 >> 8);
			BattleScriptExecute(BattleScript_PoisonTurnDmg);
		}
		
		effect++;
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_BURN:
	if((gBattleMons[gActiveBattler].status1 & STATUS1_BURN) && gBattleMons[gActiveBattler].hp != 0 && gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
	{
		if(gBattleMons[gActiveBattler].ability == ABILITY_HEATPROOF)
			damage = gBattleMons[gActiveBattler].maxHP / 32;
		else
			damage = gBattleMons[gActiveBattler].maxHP / 16;

		if(damage == 0)
			damage = 1;
		
		gBattleMoveDamage = damage;
		BattleScriptExecute(BattleScript_BurnTurnDmg);
		effect++;
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_NIGHTMARE:
	if((gBattleMons[gActiveBattler].status2 & STATUS2_NIGHTMARE) && gBattleMons[gActiveBattler].hp != 0)
	{
		if((gBattleMons[gActiveBattler].status1 & STATUS1_SLEEP))
		{
			if(gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
			{
				damage = gBattleMons[gActiveBattler].maxHP / 4;
				
				if(damage == 0)
					damage = 1;
				
				gBattleMoveDamage = damage;
				BattleScriptExecute(BattleScript_NightmareTurnDmg);
				effect++;
			}
		}
		else
		{
			gBattleMons[gActiveBattler].status2 &= ~STATUS2_NIGHTMARE;
		}
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_CURSE:
	if((gBattleMons[gActiveBattler].status2 & STATUS2_CURSED) && gBattleMons[gActiveBattler].hp != 0 && gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
	{
		damage = gBattleMons[gActiveBattler].maxHP / 4;
		
		if(damage == 0)
			damage = 1;
		
		gBattleMoveDamage = damage;
		BattleScriptExecute(BattleScript_CurseTurnDmg);
		effect++;
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
case ENDTURN_WRAP: 
	if((gBattleMons[gActiveBattler].status2 & STATUS2_WRAPPED) && gBattleMons[gActiveBattler].hp != 0)
	{
		gBattleTextBuff1[0] = B_BUFF_PLACEHOLDER_BEGIN;
		gBattleTextBuff1[1] = B_BUFF_MOVE;
		gBattleTextBuff1[2] = *(gBattleStruct->wrappedMove[gActiveBattler][0]);
		gBattleTextBuff1[3] = *(gBattleStruct->wrappedMove[gActiveBattler][1]);
		gBattleTextBuff1[4] = EOS;
		gBattleMons[gActiveBattler].status2 -= 0x2000;
		
		if((gBattleMons[gActiveBattler].status2 & STATUS2_WRAPPED))
		{
			gBattleScripting.animArg1 = *(gBattleStruct->wrappedMove[gActiveBattler][0]);
			gBattleScripting.animArg2 = *(gBattleStruct->wrappedMove[gActiveBattler][1]);
			
			if(gBattleMons[gActiveBattler].ability != ABILITY_MAGIC_GUARD)
			{
				if(gBattleMons[*(gBattleStruct->wrappedBy[gActiveBattler])].ability != ABILITY_KLUTZ && GetHoldEffect(gBattleMons[*(gBattleStruct->wrappedBy[gActiveBattler])].item) == HOLD_EFFECT_BINDING_BAND)
					damage = gBattleMons[gActiveBattler].maxHP / 6;
				else
					damage = gBattleMons[gActiveBattler].maxHP / 8;
				
				if(damage != 0)
					damage = 1;
				
				gBattleMoveDamage = damage;
				BattleScriptExecute(BattleScript_WrapTurnDmg);
				effect++;
			}
		}
		else
		{
			BattleScriptExecute(BattleScript_WrapEnds);
			effect++;
		}
	}
	
	gBattleStruct->turnEffectsTracker++;
	break;
...





BattleScript_PoisonHealTurnHeal:
(10 33 01 12 40 00 35 D0 3D 02 02 00 01 00 00 0B 01 0C 01 3E)
printstring STRINGID_PKMNSXRESTOREDHPALITTLE2 // research if this is correct
waitmessage 0x40
orword gHitMarker, HITMARKER_IGNORE_SUBSTITUTE
healthbarupdate BS_ATTACKER
datahpupdate BS_ATTACKER
end2