OpponentHandleChoosePokemon()
{
	chosenMonId = &gBattleStruct->AI_monToSwitchIntoId[(gActiveBattler & 1) / 2]
	
	if(chosenMonId == PARTY_SIZE && (gActiveBattler & BIT_SIDE) != B_SIDE_PLAYER)
		chosenMonId = fn_2061DC_J(&chosenMonId)
	
	if(chosenMonId = PARTY_SIZE)
	{
		chosenMonId = GetMostSuitableMonToSwitchInto();
		
		if(chosenMonId == PARTY_SIZE)
		{
			if(!(gBattleTypeFlags & BATTLE_TYPE_DOUBLE))
				battler2 = battler1 = GetBattlerAtPosition(B_POSITION_OPPONENT_LEFT);
			else
			{
				battler1 = GetBattlerAtPosition(B_POSITION_OPPONENT_LEFT);
				battler2 = GetBattlerAtPosition(B_POSITION_OPPONENT_RIGHT);
			}
			
			for(chosenMonId = 0; chosenMonId <= 5; chosenMonId++)
			{
				if(GetMonData(&gEnemyParty[chosenMonId], MON_DATA_HP) != 0 && chosenMonId != gBattlerPartyIndexes[battler1] && chosenMonId != gBattlerPartyIndexes[battler2])
					break;
			}
		}
	}
	else
	{
		chosenMonId = gBattleStruct->AI_monToSwitchIntoId[GetBattlerPosition(gActiveBattler) / 2]
		gBattleStruct->AI_monToSwitchIntoId[GetBattlerPosition(gActiveBattler) / 2] = PARTY_SIZE
	}
	
	gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMonId;
	BtlController_EmitChosenMonReturnValue(1, chosenMonId, NULL);
	OpponentBufferExecCompleted();
}







fn_2061DC_J(arg0)
{
	r0 = fn_20649C_J()
	r1 = 6
	
	if(r0 != 0)
	{
		{r0, r1} = fn_206334_J()
		
		if(r0 != 1)
		{
			{r0, r1} = fn_2060FC_J()
			
			if(r1 == 6 || r0 <= 0x8C)
			{
				r1 = fn_206164_J()
				
				if(r1 == 6)
					{r0, r1} = fn_2066CC_J(gBattleMons, *(gBattleMons + (0x58 * 2)), 1)
			}
		}
	}
	
	*arg0 = r1
	return r0
}







fn_20649C_J()
{
	if(gBattleTypeFlags & BATTLE_TYPE_BATTLE_TOWER)
		r0 = *data_0203BFF4_J
	else
		r0 = gTrainers[data_020385E2_J].0x14 // data_1FDFD8_J record size: 0x20
	
	return ((r0 >> 0xA) & 1)
}







fn_206334_J()
{
	{r0, r1} = fn_2063A4_J()

	if(r0 == 1)
	{
		for(r6 = 0; r6 <= 1; r6++)
		{
			for(r5 = 0; r5 <= 3; r5++)
			{
				if(*(((0x58 * 2) * r6) + gBattleMons + 0xC + (r5 * 2)) == 0x208)
					return {0, (r5 * 2)}
			}
		}

		r7 = 0

		lbl4:
		r7 = fn_205D96_J(r7, 1)
		
		if(r7 != 6)
		{
			for(r6 = 0; r6 < 4; r6++)
			{
				if(GetMonData(&gEnemyParty[r7], MON_DATA_MOVE1 + r6) == 0x208)
					return {1, r7}
			}

			r7++
			if(r7 < 6) goto lbl4
		}
		
		r1 = r6 + 0xD
	}
	
	return {0, r1}
}







fn_2060FC_J()
{
	s0 = 6
	r6 = 0

	for(r7 = 0; r7 != 6; r7++)
	{
		if(*(gBattleWeather + 2) & 0xFE)
		{
			r7 = fn_205D96_J(r7, 1)
			
			if(r7 == 6)
				break;
			
			if(GetMonData(&gEnemyParty[r7], MON_DATA_SPEED) <= 100)
			{
				r5 = GetMonData(&gEnemyParty[r7], MON_DATA_ATK)
				r0 = GetMonData(&gEnemyParty[r7], MON_DATA_SPATK)
				
				if(r0 < r5)
					r0 = r5
				
				if(r6 < r0)
				{
					r6 = r0
					s0 = r7
				}
			}
		}
	}
	
	return {r6, s0}
}







fn_206164_J()
{
	for(r7 = 0; r7 != 6; r7++)
	{
		r7 = fn_205D96_J(r7, 1)
		
		if(r7 == 6)
			break;
		
		ability = GetMonAbility(&gEnemyParty[r7])
		
		if(!(gBattleWeather & WEATHER_RAIN_ANY) && ability == 2)
			break;
		elseif(!(gBattleWeather & WEATHER_SANDSTORM_ANY) && ability == 0x2D)
			break;
		elseif(!(gBattleWeather & WEATHER_SUN_ANY) && ability == 0x46)
			break;
		elseif(!(gBattleWeather & WEATHER_HAIL_ANY) && ability == 0x75)
			break;
	}
	
	return r7
}







fn_2066CC_J(arg0, arg1, arg2)
{
	s1 = 0xFFFFFF
	s2 = 6

	for(i = 0; i != 6; i++)
	{
		r7 = fn_205D96_J(i, arg2)
		
		if(r7 == 6)
			break;
		
		if(arg2 != 0)
			party = gEnemyParty
		else
		{
			if(!(gBattleTypeFlags & 1) || r7 != 1)
			{
				if(r7 != 0 && !(*data_0203B964_J & (1 << r7)))
					continue;
			}
			
			party = gPlayerParty
		}
		
		s0 = GetMonData(&party[r7], MON_DATA_SPECIES)
		s4 = GetMonAbility(&party[r7])
		
		
		if(arg0 != 0)
			r6 = GetMatchupScore(arg0, s0, s4)
		else
			r6 = 10
		
		if(arg1 != 0)
			r0 = GetMatchupScore(arg1, s0, s4)
		else
			r0 = 10
		
		r0 = r6 * (r0 / 10)
		
		if(r0 <= s1)
		{
			s1 = r0
			s2 = r7
		}
	}
	
	return {s1, s2}
}







fn_2063A4_J()
{
	r4 = *(gBattleWeather + 2) & 0xFE
	
	if(r4 != 0)
		r4 = 1
	
	r5 = 0
	s1 = 0

	for(r6 = 0; r6 < 6; r6++)
	{
		if(GetMonData(&gEnemyParty[r6], MON_DATA_HP) != 0 && !GetMonData(&gEnemyParty[r6], MON_DATA_IS_EGG))
		{
			s1 += GetMonData(s0, MON_DATA_SPEED)
			r5++
		}
	}
	
	return {((((s1 / r5) - 0x64) >> 0x1F) ^ r4), (s1 % r5)}
}







fn_205D96_J(arg0, arg1)
{
	for(r7 = arg0; r7 < 6; r7++)
	{
		party = GetSideParty(arg1);
		
		if(GetMonData(&party[r7], MON_DATA_HP) != 0 && !GetMonData(&party[r7], MON_DATA_IS_EGG) && gBattlerPartyIndexes[arg1] != r7)
		{
			if(gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
			{
				if(gBattlerPartyIndexes[arg1 ^ 2] == r7)
					continue;

				if(arg1 == 0)
					break;
			}
			
			if(gBattleStruct->monToSwitchIntoId[0] != r7)
			{
				if(!(gBattleTypeFlags & BATTLE_TYPE_DOUBLE))
					break;
				
				if(gBattleStruct->monToSwitchIntoId[1] != r7)
					break;
			}
		}
	}
	
	return r7
}







GetMatchupScore(attacker, defender, defendAbility) @206292_J
{
	type1Matchup = GetTypeMatchup(gBaseStats[attacker].type1, gBaseStats[defender].type1, defendAbility);
	
	if(gBaseStats[defender].type1 != gBaseStats[defender].type2)
		type1Matchup *= (GetTypeMatchup(gBaseStats[attacker].type1, gBaseStats[defender].type2, defendAbility) / 10);
	
	if(gBaseStats[attacker].type1 != gBaseStats[attacker].type2)
	{
		type2Matchup = GetTypeMatchup(gBaseStats[attacker].type2, gBaseStats[defender].type1, defendAbility);
		
		if(gBaseStats[defender].type1 != gBaseStats[defender].type2)
			type2Matchup *= (GetTypeMatchup(gBaseStats[attacker].type2, gBaseStats[defender].type2, defendAbility) / 10);
	}
	else
		type2Matchup = 10;
	
	goodMatchupCount = 0;
	badMatchupCount = 0;
	
	if(type1Matchup != 10)
	{
		if(type1Matchup < 10)
			badMatchupCount++;
		else
			goodMatchupCount++;
	}
	
	if(type2Matchup != 10)
	{
		if(type2Matchup < 10)
			badMatchupCount++;
		else
			goodMatchupCount++;
	}
	
	return (10 + (goodMatchupCount * 0x10) - (badMatchupCount * 4));
}







GetSideParty(isEnemy) @205D8A_J
{
	if(isEnemy)
		return gEnemyParty
	else
		return gPlayerParty
}







GetTypeMatchup(attackType, defendType, defendAbility) @252248_J
{
	if(attackType == TYPE_ELECTRIC && (defendAbility == ABILITY_VOLT_ABSORB || defendAbility == ABILITY_LIGHTNING_ROD || defendAbility == ABILITY_MOTOR_DRIVE))
		return 0;
	elseif(attackType == TYPE_WATER && (defendAbility == ABILITY_WATER_ABSORB || defendAbility == ABILITY_DRY_SKIN || defendAbility == ABILITY_STORM_DRAIN))
		return 0;
	elseif(attackType == TYPE_FIRE && defendAbility == ABILITY_FLASH_FIRE)
		return 0;
	elseif(attackType == TYPE_GRASS && defendAbility == ABILITY_SAP_SIPPER)
		return 0;
	
	for(i = 0; gTypeMatchups[i].attackType != 0xFF; i++)
	{
		if(gTypeMatchups[i].attackType == attackType && gTypeMatchups[i].defendType == defendType)
			return gTypeMatchups[i].effectiveness;
	}
	
	return 10;
}