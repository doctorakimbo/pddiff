OpponentHandleChoosePokemon()
{
	chosenMonId = &gBattleStruct->AI_monToSwitchIntoId[(gActiveBattler & 1) / 2]
	
	if(chosenMonId == PARTY_SIZE && (gActiveBattler & BIT_SIDE) != B_SIDE_PLAYER)
		ChooseBestSwitchinNewAI(&chosenMonId)
	
	if(chosenMonId = PARTY_SIZE)
	{
		chosenMonId = GetMostSuitableMonToSwitchInto();
		
		if(chosenMonId == PARTY_SIZE)
		{
			if(!(gBattleTypeFlags & BATTLE_TYPE_DOUBLE))
				battler2 = battler1 = GetBattlerAtPosition(B_POSITION_OPPONENT_LEFT);
			else
			{
				battler1 = GetBattlerAtPosition(B_POSITION_OPPONENT_LEFT);
				battler2 = GetBattlerAtPosition(B_POSITION_OPPONENT_RIGHT);
			}
			
			for(chosenMonId = 0; chosenMonId <= 5; chosenMonId++)
			{
				if(GetMonData(&gEnemyParty[chosenMonId], MON_DATA_HP) != 0 && chosenMonId != gBattlerPartyIndexes[battler1] && chosenMonId != gBattlerPartyIndexes[battler2])
					break;
			}
		}
	}
	else
	{
		chosenMonId = gBattleStruct->AI_monToSwitchIntoId[GetBattlerPosition(gActiveBattler) / 2]
		gBattleStruct->AI_monToSwitchIntoId[GetBattlerPosition(gActiveBattler) / 2] = PARTY_SIZE
	}
	
	gBattleStruct->monToSwitchIntoId[gActiveBattler] = chosenMonId;
	BtlController_EmitChosenMonReturnValue(1, chosenMonId, NULL);
	OpponentBufferExecCompleted();
}







ChooseBestSwitchinNewAI(chosenMonId) @2061DC_J
{
	smart = CanUseNewAI();
	index = PARTY_SIZE;
	
	if(smart)
	{
		{useTrickRoom, index} = ShouldUseTrickRoom();
		
		if(!useTrickRoom)
		{
			{bestStat, index} = GetBestTrickRoomAttacker();
			
			if(index == PARTY_SIZE || bestStat <= 140)
			{
				index = GetAvailableWeatherSetter();
				
				if(index == PARTY_SIZE)
					{, index} = GetBestMatchupScore(gBattleMons[B_POSITION_PLAYER_LEFT], gBattleMons[B_POSITION_PLAYER_RIGHT], TRUE);
			}
		}
	}
	
	*chosenMonId = index;
}







CanUseNewAI() @20649C_J
{
	if(gBattleTypeFlags & BATTLE_TYPE_BATTLE_TOWER) // 0x100 - possibly different meaning
		flags = *data_0203BFF4_J
	else
		flags = gTrainers[data_020385E2_J].aiFlags // IMPORTANT: different value in english (0x14j -> 0x1Ce)
	
	return ((flags >> 0xA) & 1) // AI_SCRIPT_NEW_AI
}







ShouldUseTrickRoom() @206334_J
{
	if(isTeamSlow)
	{
		for(i = B_POSITION_PLAYER_LEFT; i <= B_POSITION_PLAYER_RIGHT; i += BIT_FLANK)
		{
			for(j = 0; j <= 3; j++)
			{
				if(gBattleMons[i].moves[j] == MOVE_TRICK_ROOM)
					return {FALSE, NULL};
			}
		}

		for(i = 0; i < 6; i++)
		{
			index = GetFirstAllowableSwitchin(i, TRUE);
			
			if(index == 6)
				break;
				
			for(j = 0; j < 4; j++)
			{
				if(GetMonData(&gEnemyParty[index], MON_DATA_MOVE1 + j) == MOVE_TRICK_ROOM)
					return {TRUE, index};
			}
		}
	}
	
	return {FALSE, NULL}; // Technically return val 2 is garbage data, but it's never used anyway
}







GetBestTrickRoomAttacker() @2060FC_J
{
	bestAttackerIndex = 6;
	bestAttackingStat = 0;

	for(i = 0; i != 6; i++)
	{
		if(gTrickRoomTurns & 0xFE)
		{
			index = GetFirstAllowableSwitchin(i, TRUE)
			
			if(index == PARTY_SIZE)
				break;
			
			if(GetMonData(&gEnemyParty[index], MON_DATA_SPEED) <= 100)
			{
				atk = GetMonData(&gEnemyParty[index], MON_DATA_ATK)
				spAtk = GetMonData(&gEnemyParty[index], MON_DATA_SPATK)
				
				if(spAtk < atk)
					bestStat = atk;
				else
					bestStat = spAtk;
				
				if(bestAttackingStat < bestStat)
				{
					bestAttackingStat = bestStat;
					bestAttackerIndex = index;
				}
			}
		}
	}
	
	return {bestAttackingStat, bestAttackerIndex};
}







GetAvailableWeatherSetter() @206164_J
{
	for(i = 0; i != 6; i++)
	{
		index = GetFirstAllowableSwitchin(i, TRUE);
		
		if(index == PARTY_SIZE)
			break;
		
		ability = GetMonAbility(&gEnemyParty[index])
		
		if(!(gBattleWeather & WEATHER_RAIN_ANY) && ability == ABILITY_DRIZZLE)
			return index;
		elseif(!(gBattleWeather & WEATHER_SANDSTORM_ANY) && ability == ABILITY_SAND_STREAM)
			return index;
		elseif(!(gBattleWeather & WEATHER_SUN_ANY) && ability == ABILITY_DROUGHT)
			return index;
		elseif(!(gBattleWeather & WEATHER_HAIL_ANY) && ability == ABILITY_SNOW_WARNING)
			return index;
	}
	
	return PARTY_SIZE;
}







GetBestMatchupScore(opponent1, opponent2, isEnemy) @2066CC_J
{
	// Actually WORST matchup score...for the opponent
	bestMatchupScore = 0xFFFFFF;
	bestMatchupIndex = 6;

	for(i = 0; i != 6; i++)
	{
		index = GetFirstAllowableSwitchin(i, isEnemy);
		
		if(index == PARTY_SIZE)
			break;
		
		if(isEnemy)
			party = gEnemyParty;
		else
		{
			if(!(gBattleTypeFlags & BATTLE_TYPE_DOUBLE) || index != 1)
			{
				if(index != 0 && !gWasMonShown[index])
					continue;
			}
			
			party = gPlayerParty;
		}
		
		thisMon = GetMonData(&party[index], MON_DATA_SPECIES)
		ability = GetMonAbility(&party[index]);
		
		if(opponent1 != NULL)
			score1 = GetMatchupScore(opponent1, thisMon, ability)
		else
			score1 = 10;
		
		if(opponent2 != 0)
			score2 = GetMatchupScore(opponent2, thisMon, ability)
		else
			score2 = 10;
		
		score = (score1 * score2) / 10;
		
		if(score < bestMatchupScore)
		{
			bestMatchupScore = score;
			bestMatchupIndex = index;
		}
	}
	
	return {bestMatchupScore, bestMatchupIndex};
}







IsTeamSlow() @2063A4_J
{
	trickRoom = gTrickRoomTurns & 0xFE;
	
	if(trickRoom)
		trickRoom = 1;
	
	numBattlers = 0;
	totalSpeed = 0;

	for(i = 0; i < 6; i++)
	{
		if(GetMonData(&gEnemyParty[i], MON_DATA_HP) != 0 && !GetMonData(&gEnemyParty[i], MON_DATA_IS_EGG))
		{
			totalSpeed += GetMonData(&gEnemyParty[i], MON_DATA_SPEED);
			numBattlers++;
		}
	}
	
	averageSpeed = totalSpeed / numBattlers;
	
	return IS_NEGATIVE(averageSpeed - 100) ^ trickRoom;
}







GetFirstAllowableSwitchin(startIndex, isEnemy) @205D96_J
{
	for(i = startIndex; i < 6; i++)
	{
		party = GetSideParty(isEnemy);
		
		if(GetMonData(&party[i], MON_DATA_HP) != 0 && !GetMonData(&party[i], MON_DATA_IS_EGG))
		{
			if(gBattlerPartyIndexes[isEnemy] == i)
				continue;
		
			if(gBattleTypeFlags & BATTLE_TYPE_DOUBLE)
			{
				if(gBattlerPartyIndexes[isEnemy ^ BIT_FLANK] == i)
					continue;

				if(!isEnemy)
					break;
			}
			
			if(gBattleStruct->monToSwitchIntoId[0] != i)
			{
				if(!(gBattleTypeFlags & BATTLE_TYPE_DOUBLE))
					break;
				
				if(gBattleStruct->monToSwitchIntoId[1] != i)
					break;
			}
		}
	}
	
	return i;
}







GetMatchupScore(attacker, defender, defendAbility) @206292_J
{
	type1Matchup = GetTypeMatchup(gBaseStats[attacker].type1, gBaseStats[defender].type1, defendAbility);
	
	if(gBaseStats[defender].type1 != gBaseStats[defender].type2)
		type1Matchup *= (GetTypeMatchup(gBaseStats[attacker].type1, gBaseStats[defender].type2, defendAbility) / 10);
	
	if(gBaseStats[attacker].type1 != gBaseStats[attacker].type2)
	{
		type2Matchup = GetTypeMatchup(gBaseStats[attacker].type2, gBaseStats[defender].type1, defendAbility);
		
		if(gBaseStats[defender].type1 != gBaseStats[defender].type2)
			type2Matchup *= (GetTypeMatchup(gBaseStats[attacker].type2, gBaseStats[defender].type2, defendAbility) / 10);
	}
	else
		type2Matchup = 10;
	
	goodMatchupCount = 0;
	badMatchupCount = 0;
	
	if(type1Matchup != 10)
	{
		if(type1Matchup < 10)
			badMatchupCount++;
		else
			goodMatchupCount++;
	}
	
	if(type2Matchup != 10)
	{
		if(type2Matchup < 10)
			badMatchupCount++;
		else
			goodMatchupCount++;
	}
	
	return (10 + (goodMatchupCount * 16) - (badMatchupCount * 4));
}







GetSideParty(isEnemy) @205D8A_J
{
	if(isEnemy)
		return gEnemyParty;
	else
		return gPlayerParty;
}







GetTypeMatchup(attackType, defendType, defendAbility) @252248_J
{
	if(attackType == TYPE_ELECTRIC && (defendAbility == ABILITY_VOLT_ABSORB || defendAbility == ABILITY_LIGHTNING_ROD || defendAbility == ABILITY_MOTOR_DRIVE))
		return 0;
	elseif(attackType == TYPE_WATER && (defendAbility == ABILITY_WATER_ABSORB || defendAbility == ABILITY_DRY_SKIN || defendAbility == ABILITY_STORM_DRAIN))
		return 0;
	elseif(attackType == TYPE_FIRE && defendAbility == ABILITY_FLASH_FIRE)
		return 0;
	elseif(attackType == TYPE_GRASS && defendAbility == ABILITY_SAP_SIPPER)
		return 0;
	
	for(i = 0; gTypeMatchups[i].attackType != 0xFF; i++)
	{
		if(gTypeMatchups[i].attackType == attackType && gTypeMatchups[i].defendType == defendType)
			return gTypeMatchups[i].effectiveness;
	}
	
	return 10;
}